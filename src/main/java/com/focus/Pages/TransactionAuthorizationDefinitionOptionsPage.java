package com.focus.Pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.testautomationguru.utility.PDFUtil;

public class TransactionAuthorizationDefinitionOptionsPage extends BaseEngine
{
	@FindBy(xpath="//*[@id='id_Authorization_container']/div/div/nav/div[1]/a/div/span[2]")
	private static WebElement transAuthorLabel; 
	
	@FindBy(xpath="//*[@id='txtDoc']")
	private static WebElement documentNameDropdown; 
	
	    @FindBy(xpath="//*[@id='id_menu_tree_Receipts']/a/span")
	    private static WebElement receipts; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Payments']/a/span")
	    private static WebElement payments; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Petty Cash']/a/span")
	    private static WebElement pettyCash; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Post-Dated Receipts']/a/span")
	    private static WebElement postDatedReceipts; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Post-Dated Payments']/a/span")
	    private static WebElement postDatedPayments; 
		
	    @FindBy(xpath="//span[@class='treemenu_item_content_group_text col-xs-9'][contains(text(),'Purchases Vouchers')]")
	    private static WebElement purchasesVouchers; 
	    
		    @FindBy(xpath="//*[@id='id_menu_tree_Stock adjustment']/a/span")
		    private static WebElement stockAdjustment; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Purchases Returns']/a/span")
	    private static WebElement purchasesReturns; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Purchases Orders']/a/span")
	    private static WebElement purchasesOrders; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Job orders']/a/span")
		    private static WebElement jobOrders; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Material Receipt Notes']/a/span")
	    private static WebElement materialReceiptNotes; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Sales Invoices']/a/span")
	    private static WebElement salesInvoices; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Cash Sales']/a/span")
		    private static WebElement cashSales; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Hire-Purchase Sales']/a/span")
		    private static WebElement hirePurchaseSales; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_POS Sales']/a/span")
		    private static WebElement posSales; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Sales Returns']/a/span")
	    private static WebElement salesReturns; 
		
	    @FindBy(xpath="//a[@id='2017']//span[contains(text(),'Sales Orders')]")
	    private static WebElement salesOrders; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Production Order']/a/span")
		    private static WebElement productionOrder; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Delivery Notes']/a/span")
	    private static WebElement deliveryNotes; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Non-Standard Journal Entries']/a/span")
	    private static WebElement nonStandardJournalEntries; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Inter-Departmental JV']/a/span")
		    private static WebElement interDepartmentalJV; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Debit Notes (Linewise)']/a/span")
		    private static WebElement debitNotes_LineWise; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Credit Notes (Linewise)/Payroll']/a/span")
		    private static WebElement creditNotes_Linewise_Payroll ; 
			
		    @FindBy(xpath="//*[@id='id_menu_tree_Fixed Asset Depreciation Voucher']/a/span")
		    private static WebElement fixedAssetDepreciationVoucher; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Journal Entries']/a/span")
	    private static WebElement journalEntries; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Debit Notes']/a/span")
	    private static WebElement debitNotes; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Credit Notes']/a/span")
	    private static WebElement creditNotes; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Payroll Postings']/a/span")
		    private static WebElement payrollPostings; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Opening Balances']/a/span")
	    private static WebElement openingBalances; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Shortages in Stock']/a/span")
	    private static WebElement shortagesInStock; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Excesses in Stocks']/a/span")
	    private static WebElement excessesInStocks; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Stock Transfers']/a/span")
	    private static WebElement stockTransfers; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Opening Stocks']/a/span")
	    private static WebElement openingStocks; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Issues to Production']/a/span")
	    private static WebElement issuesToProduction; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Receipts from production']/a/span")
	    private static WebElement receiptsFromProduction; 
		
		    @FindBy(xpath="//*[@id='id_menu_tree_Returns from Shop Floor']/a/span")
		    private static WebElement returnsFromShopFloor; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Job Work Issues']/a/span")
	    private static WebElement jobWorkIssues; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Job Work Receipts']/a/span")
	    private static WebElement jobWorkReceipts; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Purchases Quotations']/a/span")
	    private static WebElement purchasesQuotations; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Sales Quotations']/a/span")
	    private static WebElement salesQuotations; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Job Order']/a/span")
	    private static WebElement jobOrder; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Production Process']/a/span")
	    private static WebElement productionProcess; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Material Requisition']/a/span")
	    private static WebElement materialRequisition; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Request For Quote']/a/span")
	    private static WebElement requestForQuote; 
		
	    @FindBy(xpath="//*[@id='id_menu_tree_Forex JV']/a/span")
	    private static WebElement forexJV; 

	    
	    @FindBy(xpath="//span[@class='icon-miscellaneous']")
	    private static WebElement  miscellaneousTab;
	    		
	    @FindBy(xpath="//input[@id='misc_chkUpdateStock']")
	    private static WebElement updateStockChkBox;

	   /* @FindBy(xpath="//span[@id='updateButton']")
    	private static WebElement  updateBtn;

    	@FindBy(xpath="//i[@class='icon-close icon-font6']")
    	private static WebElement  closeBtn;*/

	    
	    
	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr/td")
		 private static List<WebElement> voucherGridBodyList;
	    
	    
	    
	    @FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
		private static List<WebElement> stockLedgerHometableRowCount;
	    
	    @FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
		private static WebElement sl_Dropdown1;
		
		@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
		private static WebElement sl_Dropdown2;
		
		@FindBy(xpath="//label[@id='oncheckaccorderan']")
		private static WebElement sl_oncheckBtn;
		
		@FindBy(xpath="//input[@id='txtsrch-term']")
		private static WebElement sl_SearhItemTxt;
		
		@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
		private static WebElement sl_SearchBtn;
		
		@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
		private static WebElement sl_MasterTypeTxt;
		
		@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
		private static WebElement sl_AutoAdjustColumnsBtn;
		
		@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
		private static WebElement sl_ItemGroupsBtn;
		
		@FindBy(xpath="//input[@id='liSelectAllMasters']")
		private static WebElement sl_HeaderSelectChkBox;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
		private static WebElement sl_ScheduleBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
		private static WebElement sl_CustomizeBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
		private static WebElement sl_FilterBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-ok')]")
		private static WebElement sl_OkBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
		private static WebElement sl_CloseBtn;
		
		@FindBy(xpath="//select[@id='DateOptions_']")
		private static WebElement sl_DateOptionDropdown;
		
		@FindBy(xpath="//input[@id='id_starting_date_']")
		private static WebElement sl_StartDateTxt;
		
		@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
		private static WebElement sl_StartDateCalanderBtn;
		
		@FindBy(xpath="//input[@id='id_ending_date_']")
		private static WebElement sl_EndDateTxt;
		
		@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
		private static WebElement sl_EndDateCalanderBtn;
		
		@FindBy(xpath="//input[@id='RITCheckbox__3']")
		private static WebElement sl_IncludeServiceTypeItemChkBox;
		
		@FindBy(xpath="//select[@id='RITLayout_']")
		private static WebElement sl_LayoutDropdown;
		
		@FindBy(xpath="//select[@id='RITOutput_']")
		private static WebElement sl_OutputDropdown;
		
		@FindBy(xpath="//input[@id='selectAllMasters_']")
		private static WebElement sl_SelectAllItemsChkBox;
		
		@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
		private static WebElement sl_FirstBtn;
		
		@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
		private static WebElement sl_PreviousBtn;
		
		@FindBy(xpath="//input[@id='btn1']")
		private static WebElement sl_PageBtn;
		
		@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
		private static WebElement sl_NextBtn;
		
		@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
		private static WebElement sl_EndBtn;
		
		@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]")
		private static WebElement sl_1stRowChkBox;
		
		@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]")
		private static WebElement sl_2ndRowChkBox;
		
		@FindBy(xpath="//div[@id='dvReportDetails']//table/tbody")
		private static WebElement report_Body;
		
		@FindBy(xpath="//input[@id='RITTable__1']")
		private static WebElement listingOfDocWorkFlowTxt;
		

		
		
		
		
		
		// Inventory Reports
		
		@FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
		private static WebElement  inventoryReportsMenu; 
		
			@FindBy(xpath="//span[contains(text(),'Item Query')]")
			private static WebElement itemQuery;
			
			@FindBy(xpath="//span[contains(text(),'Stock Ledger')]")
			private static WebElement  stockLedger;
			
			@FindBy(xpath="//span[contains(text(),'Opening Stocks Register')]")
			private static WebElement  openingStocksRegister;
			
			@FindBy(xpath="//span[contains(text(),'Stock Statement')]")
			private static WebElement  stockStatement;
					
			@FindBy(xpath="//*[@id='575']/span")
			private static WebElement  stockMovement;
			
			@FindBy(xpath="//*[@id='576']/span")
			private static WebElement  multiLevelStockMovement;
			
			@FindBy(xpath="//span[contains(text(),'Virtual Stock Analysis')]")
			private static WebElement  virtualStockAnalysis;
			
			@FindBy(xpath="//a[@id='578']")
			private static WebElement  stockValuation;
			
			@FindBy(xpath="//a[@id='656']")
			private static WebElement  stockReportByTag;
			
			@FindBy(xpath="//a[@id='579']//span[contains(text(),'ABC Analysis')]")
			private static WebElement  abcAnalysis;
			
			@FindBy(xpath="//span[contains(text(),'Stock Analysis by Batch')]")
			private static WebElement  stockAnalysisByBatch;
			
			@FindBy(xpath="//span[contains(text(),'Stock Analysis by RMA')]")
			private static WebElement  stockAnalysisByRMA;
			
			@FindBy(xpath="//a[@id='540']//span[contains(text(),'Bins Report')]")
			private static WebElement  binsReportMenu;
			
				@FindBy(xpath="//*[@id='587']/span")
				private static WebElement  stockDetailsByBins;
			
				@FindBy(xpath="//*[@id='588']/span")
				private static WebElement  stockBalancesByBins;
				
				@FindBy(xpath="//*[@id='589']/span")
				private static WebElement  stockBalancesByItemByBins;
				
				@FindBy(xpath="//span[contains(text(),'Expired Stock by Bins')]")
				private static WebElement  expiredStockByBins;		
			
			@FindBy(xpath="//span[contains(text(),'Stock balance by warehouse')]")
			private static WebElement  stockBalanceByWarehouse;
			
			@FindBy(xpath="//span[contains(text(),'Stock ageing analysis')]")
			private static WebElement  stockAgeingAnalysisMenu;
				
				@FindBy(xpath="//*[@id='582']/span")
				private static WebElement  ageingAnalysis;
				
				@FindBy(xpath="//*[@id='622']/span")
				private static WebElement  ageingAnalysisByBatch;
				
				@FindBy(xpath="//*[@id='623']/span")
				private static WebElement  ageingAnalysisByRMA;		
				
				@FindBy(xpath="//*[@id='591']/span")
				private static WebElement  ageingStockByBins;
						
				@FindBy(xpath="//*[@id='646']/span")
				private static WebElement  ageingByItemByBins;		

			@FindBy(xpath="//span[contains(text(),'Reorder Report')]")
			private static WebElement reorderReport;
			
			@FindBy(xpath="//a[@id='584']//span[contains(text(),'Fast Moving Item')]")
			private static WebElement  fastMovingItem;
					
			@FindBy(xpath="//a[@id='585']//span[contains(text(),'Slow Moving Item')]")
			private static WebElement  slowMovingItem;
			
			@FindBy(xpath="//span[contains(text(),'Peak/Low Balances')]")
			private static WebElement  peakORLowBalances;
			
			@FindBy(xpath="//span[contains(text(),'Best Selling Item')]")
			private static WebElement  bestSellingItem;
		
			@FindBy(xpath="//span[contains(text(),'Raise Indent Item with Low Stock')]")
			private static WebElement  raiseIndentItemWithLowStock;
			
			@FindBy(xpath="//span[contains(text(),'Stock transfer report')]")
			private static WebElement  stockTransferReport;
			
			@FindBy(xpath="//span[contains(text(),'Raise request for quote')]")
			private static WebElement  raiseRequestForQuote;
			
			@FindBy(xpath="//span[contains(text(),'Stock reservation report')]")
			private static WebElement  stockReservationReport;
			
			@FindBy(xpath="//span[contains(text(),'Transaction type-wise stock report')]")
			private static WebElement  transactionTypeWiseStockReport;
			
			@FindBy(xpath="//span[contains(text(),'Actual consumption report')]")
			private static WebElement  actualConsumptionReport;
		
		@FindBy(xpath="//span[contains(text(),'Order Management')]")
		private static WebElement  orderManagementMenu; 

			@FindBy(xpath="//*[@id='600']/span")
			private static WebElement  analysisOfLinkedORUnlinkedDocumentsMenu;
					
				@FindBy(xpath="//*[@id='601']/span")
				private static WebElement  listingOfDocuments;
				
				@FindBy(xpath="//*[@id='602']/span")
				private static WebElement listingOfDocumentsByDueDate;
						
				@FindBy(xpath="//*[@id='603']/span")
				private static WebElement  ageingOfPendingDocuments;
				
				@FindBy(xpath="//*[@id='604']/span")
				private static WebElement  ageingofPendingDocumentsByDueDate;
				
				@FindBy(xpath="//*[@id='624']/span")
				private static WebElement  linkChainAnalysis;
				
				@FindBy(xpath="//*[@id='657']/span")
				private static WebElement  pendingVoucherReport;
			
			@FindBy(xpath="//*[@id='201']/span")
			private static WebElement  quotationAnalysis;
			
			@FindBy(xpath="//*[@id='555']/span")
			private static WebElement  purchasesQuotation;
			
			@FindBy(xpath="//*[@id='556']/span")
			private static WebElement  salesQuotation;
			
			@FindBy(xpath="//*[@id='574']/span")
			private static WebElement  lowestQuotation;
			
			
		
		
		
		////////

		@FindBy(xpath="//i[contains(@class,'theme_button_color dropdown-toggle')]")
		private static WebElement report_sortingBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-refresh')]")
		private static WebElement report_RefreshBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-print')]")
		private static WebElement report_PrintBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-export')]")
		private static WebElement report_ExportBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-graph ImagesinArabic')]")
		private static WebElement report_GraphBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-backtrack')]")
		private static WebElement report_BackTrackBtn;
				
		@FindBy(xpath="//span[@id='reportCustomize_']//i[contains(@class,'icon-font6 icon-custamize')]")
		private static WebElement report_ReportCustomizeBtn;
				
		@FindBy(xpath="//span[@id='filterIcon_']//i[contains(@class,'icon-font6 icon-filter')]")
		private static WebElement report_FilterBtn;
		
		@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
		private static WebElement  report_FilterCustomizeBtn;
		
		@FindBy(xpath="//span[@id='a']")
		private static WebElement  report_Filter_FilterBtn;
		
		@FindBy(xpath="//*[@id='551_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
		private static WebElement  reportsAdvanced_WhereDropDown;
		
		@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
		private static WebElement  reportsAdvanced_SelectFielddropdown;
		
		@FindBy(xpath="//table/tbody/tr/td[3]/select")
		private static WebElement  reportsAdvanced_SelectOperatorDropDown;
		
		@FindBy(xpath="//table/tbody/tr/td[4]/select")
		private static WebElement  reportsAdvanced_ComparewithDropDown;
		
		@FindBy(xpath="//table/tbody/tr/td[5]/input")
		private static WebElement  reportsAdvanced_ValueTxt;
		
		@FindBy(xpath="//input[@id='advancefilter_master_551_0']")
		private static WebElement  reportsAdvanced_EnterValue;
		
		@FindBy(xpath="//table/tbody/tr/td[7]/span")
		private static WebElement  reportsAdvanced_AddIconBtn;
		
		@FindBy(xpath="//table/tbody/tr/td[6]/span")
		private static WebElement  reportsAdvanced_DeleteIcon1Btn;
		
		@FindBy(xpath="//table/tbody/tr[2]/td[6]/span")
		private static WebElement  reportsAdvanced__DeleteIcon2Btn;
		
		@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='536870916']")
		private static WebElement  reports_AdvancedFilter_SelectField_WH_ExpandBtn;
		
		@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='5058']")
		private static WebElement  reports_AdvancedFilter_SelectField_WH_NameBtn;
		
		@FindBy(xpath="//input[@id='chkSaveFilter']")
		private static WebElement  report_FilterSaveFilterPermanentlyChkBox;
		
		@FindBy(xpath="//span[@id='filterRefresh']")
		private static WebElement  report_Filter_RefreshBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon icon-ok')]")
		private static WebElement  report_FilterOkBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
		private static WebElement  report_FilterCancelBtn;
				
		@FindBy(xpath="//div[@id='dvfilter_']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
		private static WebElement report_FilterDownBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-analyze')]")
		private static WebElement report_AnalyzeBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-cross-reference')]")
		private static WebElement report_CrossReferenceBtn;
				
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-options')]")
		private static WebElement report_OptionsBtn;
				
		@FindBy(xpath="//div[@id='dvoptions_']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
		private static WebElement report_OptionsDownBtn;
				
		/*@FindBy(xpath="//span[@id='reportClose_']//i[contains(@class,'icon-font6 icon-close')]")
		private static WebElement report_CloseBtn;
				
		@FindBy(xpath="//button[@id='frstPage_']")
		private static WebElement report_FirstBtn;
				
		@FindBy(xpath="//button[@id='prvPage_']")
		private static WebElement report_PreviousBtn;
				
		@FindBy(xpath="//button[@id='pgnumber_']")
		private static WebElement report_PageNoBtn;
				
		@FindBy(xpath="//button[@id='nxtPage_']")
		private static WebElement report_NextBtn;
				
		@FindBy(xpath="//button[@id='lstPage_']")
		private static WebElement report_LastBtn;*/
		
		@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[12]")
		private static WebElement report_CloseBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[1]")
		private static WebElement report_FirstBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[2]")
		private static WebElement report_PreviousBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[3]")
		private static WebElement report_PageNoBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[4]")
		private static WebElement report_NextBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[5]")
		private static WebElement report_LastBtn;
		
		@FindBy(xpath="//input[@id='txtSearchReport']")
		private static WebElement report_SearchTxt;
		
		

		@FindBy(xpath="//*[@id='trRender_0']/td[2]")
		private static WebElement sl_1stRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_0']/td[3]")
		private static WebElement sl_1stRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[4]")
		private static WebElement sl_1stRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[5]")
		private static WebElement sl_1stRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[6]")
		private static WebElement sl_1stRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[7]")
		private static WebElement sl_1stRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[8]")
		private static WebElement sl_1stRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[9]")
		private static WebElement sl_1stRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[10]")
		private static WebElement sl_1stRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[11]")
		private static WebElement sl_1stRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[12]")
		private static WebElement sl_1stRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[13]")
		private static WebElement sl_1stRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[14]")
		private static WebElement sl_1stRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[15]")
		private static WebElement sl_1stRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[16]")
		private static WebElement sl_1stRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[17]")
		private static WebElement sl_1stRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[18]")
		private static WebElement sl_1stRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[19]")
		private static WebElement sl_1stRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[20]")
		private static WebElement sl_1stRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[21]")
		private static WebElement sl_1stRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[22]")
		private static WebElement sl_1stRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[23]")
		private static WebElement sl_1stRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[24]")
		private static WebElement sl_1stRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[25]")
		private static WebElement sl_1stRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[26]")
		private static WebElement sl_1stRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[27]")
		private static WebElement sl_1stRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[28]")
		private static WebElement sl_1stRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[29]")
		private static WebElement sl_1stRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[30]")
		private static WebElement sl_1stRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[31]")
		private static WebElement sl_1stRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[32]")
		private static WebElement sl_1stRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[33]")
		private static WebElement sl_1stRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[34]")
		private static WebElement sl_1stRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[35]")
		private static WebElement sl_1stRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[36]")
		private static WebElement sl_1stRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[37]")
		private static WebElement sl_1stRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[38]")
		private static WebElement sl_1stRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[39]")
		private static WebElement sl_1stRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[40]")
		private static WebElement sl_1stRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[41]")
		private static WebElement sl_1stRow40thCol;
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_1']/td[2]")
		private static WebElement sl_2ndRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_1']/td[3]")
		private static WebElement sl_2ndRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[4]")
		private static WebElement sl_2ndRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[5]")
		private static WebElement sl_2ndRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[6]")
		private static WebElement sl_2ndRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[7]")
		private static WebElement sl_2ndRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[8]")
		private static WebElement sl_2ndRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[9]")
		private static WebElement sl_2ndRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[10]")
		private static WebElement sl_2ndRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[11]")
		private static WebElement sl_2ndRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[12]")
		private static WebElement sl_2ndRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[13]")
		private static WebElement sl_2ndRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[14]")
		private static WebElement sl_2ndRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[15]")
		private static WebElement sl_2ndRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[16]")
		private static WebElement sl_2ndRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[17]")
		private static WebElement sl_2ndRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[18]")
		private static WebElement sl_2ndRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[19]")
		private static WebElement sl_2ndRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[20]")
		private static WebElement sl_2ndRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[21]")
		private static WebElement sl_2ndRow20thCol;
		
		
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_2']/td[2]")
		private static WebElement sl_3rdRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_2']/td[3]")
		private static WebElement sl_3rdRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[4]")
		private static WebElement sl_3rdRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[5]")
		private static WebElement sl_3rdRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[6]")
		private static WebElement sl_3rdRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[7]")
		private static WebElement sl_3rdRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[8]")
		private static WebElement sl_3rdRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[9]")
		private static WebElement sl_3rdRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[10]")
		private static WebElement sl_3rdRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[11]")
		private static WebElement sl_3rdRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[12]")
		private static WebElement sl_3rdRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[13]")
		private static WebElement sl_3rdRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[14]")
		private static WebElement sl_3rdRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[15]")
		private static WebElement sl_3rdRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[16]")
		private static WebElement sl_3rdRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[17]")
		private static WebElement sl_3rdRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[18]")
		private static WebElement sl_3rdRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[19]")
		private static WebElement sl_3rdRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[20]")
		private static WebElement sl_3rdRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[21]")
		private static WebElement sl_3rdRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[22]")
		private static WebElement sl_3rdRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[23]")
		private static WebElement sl_3rdRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[24]")
		private static WebElement sl_3rdRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[25]")
		private static WebElement sl_3rdRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[26]")
		private static WebElement sl_3rdRow25thCol;
		
	
		
		
		
	    
	
	//////Name Text Field   
		
	@FindBy(xpath="//*[@id='ctrlAuthorizationH']")
	private static WebElement nameTxt; 
	
	@FindBy(xpath="//*[@id='ctrlAuthorizationH_input_settings']/span")
	private static WebElement nameSettingBtn; 

	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_heading']")
	    private static WebElement nameSettingPop_CustomizeDisplayColoumnLabel;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_container']")
	    private static WebElement nameSettingPop_sAuthorizationTxt;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[1]")
	    private static WebElement nameSettingPop_StandardFieldsBtn;
	
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_list']")
		    private static WebElement nameSettingPop_StandardFields_FiledDropdown;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_header']")
		    private static WebElement nameSettingPop_StandardFields_HeaderTxt;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_alignment']")
		    private static WebElement nameSettingPop_StandardFields_AlignmentDropdown;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_standardfields_width']")
		    private static WebElement nameSettingPop_StandardFields_WidthTxt;
		
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[3]")
			private static WebElement nameSettingPop_StandardFields_OkBtn;
			
			@FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[4]")
			private static WebElement nameSettingPop_StandardFields_CancelBtn;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[2]")
	    private static WebElement nameSettingPop_DeleteColoumnBtn;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[3]")
	    private static WebElement nameSettingPop_OkBtn;
	
	    @FindBy(xpath="//*[@id='ctrlAuthorizationH_customize_popup_footer']/div/div/input[4]")
	    private static WebElement nameSettingPop_CancelBtn;
		
	@FindBy(xpath="//*[@id='chkActive']")
	private static WebElement activeChkBox;  
	
	@FindBy(xpath="//*[@id='chkAlwaysauthorizationstartsfromfirstlevel']")
	private static WebElement alwaysauthorizationstartsfromfirstlevelChkBox; 
		
	
	//Transaction Authorization Clear,Delete,Save,Cancel
	
	/*@FindBy(xpath="//*[@id='ulAuthBtns']/li[1]/span/i")
	private static WebElement clearbtn; 
	
	@FindBy(xpath="//span[@id='spndeleteProfile']")
	private static WebElement deleteBtn; 
	*/
	
	
	
	
	
	@FindBy(xpath="//*[@id='ulAuthBtns']/li[5]/span/i")
	private static WebElement tranAuthCancelBtn; 
		
	@FindBy(xpath="//*[@id='btnSaveAuthorization']")
	private static WebElement tranAuthSaveBtn; 
	
	//Action On Initial Rejection
	    
	@FindBy(xpath="//*[@id='chkFinancialAccountingMain']")
	private static WebElement financialAccountingChkBox; 
	
	@FindBy(xpath="//*[@id='chkBaseLinkMain']")
	private static WebElement linksBaseChkBox; 
	
	@FindBy(xpath="//*[@id='chkLinksMain']")
	private static WebElement linksChkBox; 
	
	@FindBy(xpath="//*[@id='spnAddLevel']/i")
	private static WebElement addLevelBtn; 
	
	@FindBy(xpath="//*[@id='spnAddParallel'']/i")
	private static WebElement addParallel;    
	
	@FindBy(xpath="//i[@id='id_StartNode']")
	private static WebElement startPointBtn; 
		
	
	//After Clicking On AddLevel/Add Parallel Button The Authorization Definition POp Rises--Related Fields 
	
	@FindBy(xpath="//*[@id='id_report_popup_heading']")
	private static WebElement authDefLabel; 
		
	@FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[1]/a/span")
	private static WebElement conditionTab; 
		
	//Description Fields
	
	@FindBy(xpath="//*[@id='txtDescription']")
	private static WebElement descriptionTxt; 
		
	@FindBy(xpath="//*[@id='chkConditionNotRequired']")
	private static WebElement conditionNotRequiredChkBox; 

	
	@FindBy(xpath="//*[@id='chkCreditLimitExceeded']")
	private static WebElement creditLimitExceededChkBox; 
		
	@FindBy(xpath="//*[@id='chkBudgetExceeded']")
	private static WebElement budgetExceededChkBox; 
		
	@FindBy(xpath="//*[@id='chkNegativeCashCheck']")
	private static WebElement negativeCashCheckChkBox; 
		
	@FindBy(xpath="//*[@id='chkLineWiseAuthorization']")
	private static WebElement lineWiseAuthorizationChkBox; 
		
	@FindBy(xpath="//*[@id='chkCreditDaysExceeded']")
	private static WebElement creditDaysExceededChkBox; 
		
	@FindBy(xpath="//*[@id='chkNegativeStockCheck']")
	private static WebElement negativeStockCheckChkBox; 
		
	@FindBy(xpath="//*[@id='chkDateRange']")
	private static WebElement dateRangeChkBox; 
		
	@FindBy(xpath="//*[@id='dpFromDate']")
	private static WebElement fromDateTxt; 
		
	@FindBy(xpath="//*[@id='dpToDate']")
	private static WebElement toDateTxt; 
	
	@FindBy(xpath="//*[@id='chkTimeRange']")
	private static WebElement timeRangeChkBox;
		
	@FindBy(xpath="//*[@id='chkTimeRange']")
	private static WebElement fromTimeTxt; 
		
	@FindBy(xpath="//*[@id='tpToTime']")
	private static WebElement totimeTxt; 
		
	//Condition------Condition Fields
				   
	
	
	
	
	    //Selection Field  Inner Fields
	
		@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='1']")
		private static WebElement  DocNo;
		
		@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='2']")
		private static WebElement  Date;
		
		@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='80']")
		private static WebElement  Time;
					
		//Cash Bank AC
					
		@FindBy(xpath="//*[@id='4']")
		private static WebElement  CashBankACExpandBtn;
		
			@FindBy(xpath="//*[@id='5002']")
			private static WebElement  CashBankAC_Name;
			
			@FindBy(xpath="//*[@id='5003']")
			private static WebElement  CashBankAC_Code;
			
			@FindBy(xpath="//*[@id='127']")
			private static WebElement  CashBankAC_Alias;
			
			@FindBy(xpath="//*[@id='5004']")
			private static WebElement  CashBankAC_AccountType;
			
			@FindBy(xpath="//*[@id='300023']")
			private static WebElement  CashBankAC_Address;
			
			@FindBy(xpath="//*[@id='303786']")
			private static WebElement  CashBankAC_AllowCustomerPortal;
			
			@FindBy(xpath="//*[@id='302968']")
			private static WebElement  CashBankAC_BankAC;
			
			@FindBy(xpath="//*[@id='303935']")
			private static WebElement  CashBankAC_BankAccountName;
			
			@FindBy(xpath="//*[@id='303936']")
			private static WebElement  CashBankAC_BankAccountNumber;
			
			@FindBy(xpath="//*[@id='302774']")
			private static WebElement  CashBankAC_ChequeDiscountlimit;
			
			@FindBy(xpath="//*[@id='300083']")
			private static WebElement  CashBankAC_City1;
			
			@FindBy(xpath="//*[@id='300084']")
			private static WebElement  CashBankAC_City2;
			
			@FindBy(xpath="//*[@id='300018']")
			private static WebElement  CashBankAC_ConsolidationMethod;
			
			@FindBy(xpath="//*[@id='5006']")
			private static WebElement  CashBankAC_CreditDays;
			
			@FindBy(xpath="//*[@id='5005']")
			private static WebElement  CashBankAC_CreditLimit;
			
			@FindBy(xpath="//*[@id='300012']")
			private static WebElement  CashBankAC_DebitCreditproposal;
			
			@FindBy(xpath="//*[@id='300013']")
			private static WebElement  CashBankAC_DebitCreditRequired;
			
			@FindBy(xpath="//*[@id='300024']")
			private static WebElement  CashBankAC_DeliveryAddress;
			
			@FindBy(xpath="//*[@id='300249']")
			private static WebElement  CashBankAC_Email;
			
			@FindBy(xpath="//*[@id='300014']")
			private static WebElement  CashBankAC_ExchangeAdjustmentGainAC;
			
			@FindBy(xpath="//*[@id='300015']")
			private static WebElement  CashBankAC_ExchangeAdjustmentLossAC;
			
			@FindBy(xpath="//*[@id='303574']")
			private static WebElement  CashBankAC_Faxno;
			
			@FindBy(xpath="//*[@id='304269']")
			private static WebElement  CashBankAC_FinanceEmail;
			
			@FindBy(xpath="//*[@id='303937']")
			private static WebElement  CashBankAC_IFSCcode;
			
			@FindBy(xpath="//*[@id='303785']")
			private static WebElement  CashBankAC_Password;
			
			@FindBy(xpath="//*[@id='304047']")
			private static WebElement  CashBankAC_PaymentType;
			
			@FindBy(xpath="//*[@id='304157']")
			private static WebElement  CashBankAC_PDCdiscountedAmount;
			
			@FindBy(xpath="//*[@id='300027']")
			private static WebElement  CashBankAC_Pin1;
			
			@FindBy(xpath="//*[@id='300028']")
			private static WebElement  CashBankAC_Pin2;
			
			@FindBy(xpath="//*[@id='304379']")
			private static WebElement  CashBankAC_Portalemail;
			
			@FindBy(xpath="//*[@id='300016']")
			private static WebElement  CashBankAC_PrimaryAccount;
			
			@FindBy(xpath="//*[@id='302870']")
			private static WebElement  CashBankAC_RateOFInterest;
			
			@FindBy(xpath="//*[@id='300250']")
			private static WebElement  CashBankAC_SendEmailtoCustomer;
			
			@FindBy(xpath="//*[@id='303573']")
			private static WebElement  CashBankAC_TelNo;
			
			@FindBy(xpath="//*[@id='8388609']")
			private static WebElement  CashBankAC_GroupLevel;
									
			@FindBy(xpath="//*[@id='8388864']")
			private static WebElement  CashBankAC_GroupLevelCode;
			
			@FindBy(xpath="//*[@id='8388610']")
			private static WebElement  CashBankAC_GroupLeve2;
			
			@FindBy(xpath="//*[@id='8388865']")
			private static WebElement  CashBankAC_GroupLeve2Code;
			
			@FindBy(xpath="//*[@id='8388611']")
			private static WebElement  CashBankAC_GroupLeve3;
			
			@FindBy(xpath="//*[@id='8388866']")
			private static WebElement  CashBankAC_GroupLeve3Code;
			
			/////
			@FindBy(xpath="//*[@id='8388612']")
			private static WebElement  CashBankAC_GroupLeve4;
			
			@FindBy(xpath="//*[@id='8388867']")
			private static WebElement  CashBankAC_GroupLeve4Code;
						
			@FindBy(xpath="//*[@id='8388613']")
			private static WebElement  CashBankAC_GroupLeve5;
			
			@FindBy(xpath="//*[@id='8388868']")
			private static WebElement  CashBankAC_GroupLeve5Code;
						
			@FindBy(xpath="//*[@id='8388614']")
			private static WebElement  CashBankAC_GroupLeve6;
			
			@FindBy(xpath="//*[@id='8388869']")
			private static WebElement  CashBankAC_GroupLeve6Code;
						
			@FindBy(xpath="//*[@id='8388615']")
			private static WebElement  CashBankAC_GroupLeve7;
			
			@FindBy(xpath="//*[@id='8388870']")
			private static WebElement  CashBankAC_GroupLeve7Code;
						
			@FindBy(xpath="//*[@id='5154']")
			private static WebElement  CashBankAC_Name2;			
				
			@FindBy(xpath="//*[@id='5155']")
			private static WebElement  CashBankAC_Code2;			
				
			@FindBy(xpath="//*[@id='300568']")
			private static WebElement  CashBankAC_State;			
				
			@FindBy(xpath="//*[@id='8388609']")
			private static WebElement  CashBankAC_GroupLevel1;			
				
			@FindBy(xpath="//*[@id='8388864']")
			private static WebElement  CashBankAC_GroupLevel1Code;			
					
					
			//Department
			
			@FindBy(xpath="//*[@id='268435459']")
			private static WebElement  DepartmentExpansion;
			
				@FindBy(xpath="//*[@id='5042']")
				private static WebElement  Dept_Name;
				
				@FindBy(xpath="//*[@id='5043']")
				private static WebElement  Dept_Code;
				
				@FindBy(xpath="//*[@id='8388609']")
				private static WebElement  Dept_GroupLevel1;
				
				@FindBy(xpath="//*[@id='8388864']")
				private static WebElement  Dept_GroupLevel1Code;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='67108883']")
			private static WebElement  SNarration;	
			
			@FindBy(xpath="//*[@id='67108869']")
			private static WebElement  sChequeNo;
			
			@FindBy(xpath="//*[@id='12']")
			private static WebElement  AccountExansiion;
				
				@FindBy(xpath="//*[@id='5002']")
				private static WebElement  Account_Name;
				
				@FindBy(xpath="//*[@id='5003']")
				private static WebElement  Account_Code;
				
				@FindBy(xpath="//*[@id='127']")
				private static WebElement  Account_Alias;
				
				@FindBy(xpath="//*[@id='5004']")
				private static WebElement  Account_AccountType;
				
				@FindBy(xpath="//*[@id='300023']")
				private static WebElement  Account_Address;
				
				@FindBy(xpath="//*[@id='303786']")
				private static WebElement  Account_AllowCustomerPortal;
				
				@FindBy(xpath="//*[@id='302968']")
				private static WebElement  Account_BankAC;
				
				@FindBy(xpath="//*[@id='303935']")
				private static WebElement  Account_BankAccountName;
				
				@FindBy(xpath="//*[@id='303936']")
				private static WebElement  Account_BankAccountNumber;
				
				@FindBy(xpath="//*[@id='302774']")
				private static WebElement  Account_ChequeDiscountlimit;
				
				@FindBy(xpath="//*[@id='300083']")
				private static WebElement  Account_City1;
				
				@FindBy(xpath="//*[@id='300084']")
				private static WebElement  Account_City2;
				
				@FindBy(xpath="//*[@id='300018']")
				private static WebElement  Account_ConsolidationMethod;
				
				@FindBy(xpath="//*[@id='5006']")
				private static WebElement  Account_CreditDays;
				
				@FindBy(xpath="//*[@id='5005']")
				private static WebElement  Account_CreditLimit;
				
				@FindBy(xpath="//*[@id='300012']")
				private static WebElement  Account_DebitCreditproposal;
				
				@FindBy(xpath="//*[@id='300013']")
				private static WebElement  Account_DebitCreditRequired;
				
				@FindBy(xpath="//*[@id='300024']")
				private static WebElement  Account_DeliveryAddress;
				
				@FindBy(xpath="//*[@id='300249']")
				private static WebElement  Account_Email;
				
				@FindBy(xpath="//*[@id='300014']")
				private static WebElement  Account_ExchangeAdjustmentGainAC;
				
				@FindBy(xpath="//*[@id='300015']")
				private static WebElement  Account_ExchangeAdjustmentLossAC;
				
				@FindBy(xpath="//*[@id='303574']")
				private static WebElement  Account_Faxno;
				
				@FindBy(xpath="//*[@id='304269']")
				private static WebElement  Account_FinanceEmail;
				
				@FindBy(xpath="//*[@id='303937']")
				private static WebElement  Account_IFSCcode;
				
				@FindBy(xpath="//*[@id='303785']")
				private static WebElement  Account_Password;
				
				@FindBy(xpath="//*[@id='304047']")
				private static WebElement  Account_PaymentType;
				
				@FindBy(xpath="//*[@id='304157']")
				private static WebElement  Account_PDCdiscountedAmount;
				
				@FindBy(xpath="//*[@id='300027']")
				private static WebElement  Account_Pin1;
				
				@FindBy(xpath="//*[@id='300028']")
				private static WebElement  Account_Pin2;
				
				@FindBy(xpath="//*[@id='304379']")
				private static WebElement  Account_Portalemail;
				
				@FindBy(xpath="//*[@id='300016']")
				private static WebElement  Account_PrimaryAccount;
				
				@FindBy(xpath="//*[@id='302870']")
				private static WebElement  Account_RateOFInterest;
				
				@FindBy(xpath="//*[@id='300250']")
				private static WebElement  Account_SendEmailtoCustomer;
				
				@FindBy(xpath="//*[@id='303573']")
				private static WebElement  Account_TelNo;
				
				@FindBy(xpath="//*[@id='8388609']")
				private static WebElement  Account_GroupLevel;
										
				@FindBy(xpath="//*[@id='8388864']")
				private static WebElement  Account_GroupLevelCode;
				
				@FindBy(xpath="//*[@id='8388610']")
				private static WebElement  Account_GroupLeve2;
				
				@FindBy(xpath="//*[@id='8388865']")
				private static WebElement  Account_GroupLeve2Code;
				
				@FindBy(xpath="//*[@id='8388611']")
				private static WebElement  Account_GroupLeve3;
				
				@FindBy(xpath="//*[@id='8388866']")
				private static WebElement  Account_GroupLeve3Code;
	
				@FindBy(xpath="//*[@id='8388612']")
				private static WebElement  Account_GroupLeve4;
				
				@FindBy(xpath="//*[@id='8388867']")
				private static WebElement  Account_GroupLeve4Code;
							
				@FindBy(xpath="//*[@id='8388613']")
				private static WebElement  Account_GroupLeve5;
				
				@FindBy(xpath="//*[@id='8388868']")
				private static WebElement  Account_GroupLeve5Code;
							
				@FindBy(xpath="//*[@id='8388614']")
				private static WebElement  Account_GroupLeve6;
				
				@FindBy(xpath="//*[@id='8388869']")
				private static WebElement  Account_GroupLeve6Code;
							
				@FindBy(xpath="//*[@id='8388615']")
				private static WebElement  Account_GroupLeve7;
				
				@FindBy(xpath="//*[@id='8388870']")
				private static WebElement  Account_GroupLeve7Code;
							
				@FindBy(xpath="//*[@id='5154']")
				private static WebElement  Account_Name2;			
					
				@FindBy(xpath="//*[@id='5155']")
				private static WebElement  Account_Code2;			
					
				@FindBy(xpath="//*[@id='300568']")
				private static WebElement  Account_State;			
					
				@FindBy(xpath="//*[@id='8388609']")
				private static WebElement  Account_GroupLevel1;			
					
				@FindBy(xpath="//*[@id='8388864']")
				private static WebElement  Account_GroupLevel1Code;	
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='4']")
			private static WebElement  vendorAC;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='536870916']")
			private static WebElement  warehouse;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='23']")
			private static WebElement  item;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='24']")
			private static WebElement  unit;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='33554437']")
			private static WebElement  RD;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='1107296261']")
			private static WebElement  voucherRD;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='35']")
			private static WebElement  LpurchaseVoucherN;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='26']")
			private static WebElement  Quantity;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='27']")
			private static WebElement  Rate;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='28']")
			private static WebElement  Gross;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='1073741852']")
			private static WebElement  VoucherGross;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='13']")
			private static WebElement  Batch;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='85']")
			private static WebElement  Bins;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='37']")
			private static WebElement  ExpDate;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='38']")
			private static WebElement  RMA;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='134217734']")
			private static WebElement  FD;
			
			@FindBy(xpath="//*[@id='16']")
			private static WebElement  Amount;
			
			@FindBy(xpath="//*[@id='83']")
			private static WebElement  Reference;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='75']")
			private static WebElement  Net;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='78']")
			private static WebElement  User;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='147']")
			private static WebElement  Role;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='148']")
			private static WebElement  UserVal1;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='149']")
			private static WebElement  UserVal2;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='150']")
			private static WebElement  UserVal3;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='151']")
			private static WebElement  UserVal4;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='152']")
			private static WebElement  UserVal5;
			
			@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter']//a[@id='67108920']")
			private static WebElement  sRemarks;
	
			
		
	//Completion Inner Fields			
      
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[1]/select")
	private static WebElement Row1ConjunctionDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[2]/input")
	private static WebElement Row1SelectFieldTxt; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[3]/select")
	private static WebElement Row1SelectOperatorDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[4]/select")
	private static WebElement Row1CompareWithDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[5]/input")
	private static WebElement Row1ValueTxt; 
	
	
	@FindBy(xpath="//input[@id='advancefilter_master_68_0_']")
	private static WebElement InputValueTxt; 
	
	@FindBy(xpath="//*[@id='advancefilter_master_68_0__table_body']/tr/td[2]")
	private static List<WebElement> Row1ValueList; 
	
	
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[1]/select")
	private static WebElement Row2ConjunctionDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[2]/input")
	private static WebElement Row2SelectFieldTxt; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[3]/select")
	private static WebElement Row2SelectOperatorDropdown; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[4]/select")
	private static WebElement Row2CompareWithDropdown; 
		
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[5]/input")
	private static WebElement Row2ValueTxt;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[6]/span")
	private static WebElement Row1TransAuthConditionDeleteBtn; 
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[7]/span")
	private static WebElement Row1TransAuthConditionAddBtn;
	
	@FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[2]/td[6]/span")
	private static WebElement Row2TransAuthConditionDeleteBtn; 
	
	
	
		
	
	
	
	///status Update----------
	
	@FindBy(xpath="//*[@id='id_txtStatusUpdate']")
	private static WebElement statusUpdateDropdown; 
		
	@FindBy(xpath="//*[@id='txtAuthDefReason']")
	private static WebElement reasonTxt; 
		
	@FindBy(xpath="//*[@id='chkFinancialAccounting']")
	private static WebElement keepUnpostedfinancialAccountingChkBox; 
		
	@FindBy(xpath="//*[@id='chkLinkBase']")
	private static WebElement keepUnpostedlinkBaseChkBox; 
		
	@FindBy(xpath="//*[@id='chkReferences']")
	private static WebElement keepUnpostedReferencesChkBox; 
		
	@FindBy(xpath="//*[@id='chkLinks']")
	private static WebElement keepUnpostedLinksChkBox;
	
	@FindBy(xpath="//*[@id='chkReservation']")
	private static WebElement keepUnpostedReservationChkBox;
	
	@FindBy(xpath="//input[@id='chkInventory']")
	private static WebElement keepUnpostedInventoryChkBox;
	
	
	//Authorization MOde
	
	@FindBy(xpath="//*[@id='chkFullAuthorization']")
	private static WebElement fullAuthorizationChkBox;
	
	@FindBy(xpath="//*[@id='chkAskRemarksonapproval']")
	private static WebElement askRemarksOnapprovalChkBox;
	
	@FindBy(xpath="//*[@id='chkmakeAskRemarksonapproval']")
	private static WebElement makeApprovalRemarksmandatoryChkBox;
	
	@FindBy(xpath="//*[@id='chkAskremarksonRejection']")
	private static WebElement askRemarksOnRejectionChkBox;
	
	@FindBy(xpath="//*[@id='chkmakeAskRemarksonRejection']")
	private static WebElement makeRejectionRemarksMandatoryChkBox;
	
	
	//Undo Authorization On Editing
	
	@FindBy(xpath="//*[@id='chkAnyValueChange']")
	private static WebElement anyValueChangeChkBox;
	
	@FindBy(xpath="//*[@id='chkAmountsOrQuantityOrNumeric']")
	private static WebElement amountsOrQuantityOrNumericChkBox;
	
	@FindBy(xpath="//*[@id='chkBillAdjustments']")
	private static WebElement billAdjustmentsChkBox;
	
	@FindBy(xpath="//*[@id='chkUndoReservation']")
	private static WebElement undoReservationChkBox;
	
	@FindBy(xpath="//*[@id='chkUndoLinks']")
	private static WebElement undoLinksChkBox;
	
	@FindBy(xpath="//*[@id='chkBatchRMABins']")
	private static WebElement batchRMABinChkBox;
	
	@FindBy(xpath="//*[@id='ddlUndoAuthEditing']")
	private static WebElement undoAuthorizationEditingDropdown;
	
	//Last Dropdown In Condition Screen
	
	
	
	//TransactionAuthorization------UserSelection Tab
	
	
	@FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[2]/a/span")
	private static WebElement userSelectionTab;
	
	@FindBy(xpath="//*[@id='ddlUserSelection']")
	private static WebElement userselectionDropdown;
	
	@FindBy(xpath="//*[@id='ddlCriteria']")
	private static WebElement criteriaDropdown;
	
	
	//User Selection----Grid Fields
	
	@FindBy(xpath="//*[@id='id_tblUserSelection_User']")
	private static WebElement userDropdown;
	
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_1-1']")
	private static WebElement userrow1;
	
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_2-1']")
	private static WebElement userrow2;
	
	@FindBy(xpath="//*[@id='id_tblUserSelection_col_1-2']")
	private static WebElement limitDefinitionrow1;
	
		@FindBy(xpath="//*[@id='divCondtionModal']/div/div/div[1]/div[1]/h4]")
		private static WebElement GridLimitDef_ConditionLabel;
		
		@FindBy(xpath="//*[@id='ddlLimiton']")
		private static WebElement GridLimitDef_LimitOnDropdown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[1]/select")
		private static WebElement GridLimitDef_ConjunctionDropdown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[2]/input")
		private static WebElement GridLimitDef_SelectFieldTxt;
		
			@FindBy(xpath="//*[@id='4']")
			private static WebElement GridLimitDef_SelectField_CashAndBankAc;
			
			@FindBy(xpath="//*[@id='268435459']")
			private static WebElement GridLimitDef_SelectField_Department;
			
			@FindBy(xpath="//*[@id='12']")
			private static WebElement GridLimitDef_SelectField_Account;
			
			@FindBy(xpath="//*[@id='268435462']")
			private static WebElement GridLimitDef_SelectFieldLocation;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[3]/select")
		private static WebElement GridLimitDef_SelectOperatorDropdown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[4]/select")
		private static WebElement GridLimitDef_CompareWithDropDown;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[5]/input")
		private static WebElement GridLimitDef_ValueTxt;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[6]/span")
		private static WebElement GridLimitDef_CloseRow1Btn;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr/td[7]/span")
		private static WebElement GridLimitDef_AddRow1Btn;
		
		@FindBy(xpath="//*[@id='68_1_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
		private static WebElement GridLimitDef_CloseRow2Btn;
		
		@FindBy(xpath="//*[@id='divCondtionModal']/div/div/div[2]/div[1]/div[4]/span/i")
		private static WebElement GridLimitDef_OkBtn;
		
		@FindBy(xpath="//*[@id='btnCancel']/i")
		private static WebElement GridLimitDef_CancelIcon;
	
	
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_1-3']")
	private static WebElement limitValue1;	
		
	@FindBy(xpath="//td[@id='id_tblUserSelection_col_1-4']")
	private static WebElement resetFrequency1;	
			
	@FindBy(xpath="//*[@id='id_tblUserSelection_LimitValue']")
	private static WebElement limitValueTxt;	
		
	@FindBy(xpath="//*[@id='id_tblUserSelection_ResetFrequency']")
	private static WebElement resetFrequencyDropdown;	
	
	
	
	
	//Alert Tab Fields
		
	@FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[3]/a/span")
	private static WebElement alertsTab;	
		
	//Grid
	
	@FindBy(xpath="//*[@id='chkReceived']")
	private static WebElement receivedChkBox;	
		
	@FindBy(xpath="//*[@id='chkApproved']")
	private static WebElement approvedChkBox;	
		
	@FindBy(xpath="//*[@id='chkRejected']")
	private static WebElement rejectedChkBox;	
		
	@FindBy(xpath="//*[@id='chkStopped']")
	private static WebElement stoppedChkBox;	
		
	//EmailHeaderTemplate
	
	@FindBy(xpath="//*[@id='id_tblAlerts_control_heading_2']/div/u")
	private static WebElement emailHeaderTemplateBtn;	
	
		@FindBy(xpath="//*[@id='id_SMSTemplate']/div/nav/div/div[1]/a/div/span[2]")
		private static WebElement emailHeaderTemplate_CustomizeTemplateLabel;	
		
		//Header Fields Of Customize Template Pop
		
		@FindBy(xpath="//*[@id='btnNewSmsTemplate']")
		private static WebElement customizeTemplateNewBtn;	
		
		@FindBy(xpath="//*[@id='btnSaveSmsTemplate']")
		private static WebElement customizeTemplateSaveBtn;	
			
		@FindBy(xpath="//*[@id='btnCloseSMSModal']")
		private static WebElement customizeTemplateCloseBtn;	
			
		@FindBy(xpath="//*[@id='smsTemplateOptCtrl']")
		private static WebElement customizeTemplateTemplatestxt;	
		
		@FindBy(xpath="//*[@id='fieldtab']/li[1]/span")
		private static WebElement customizeTemplateCompanyExpandBtn;
		
		
		@FindBy(xpath="//*[@id='id_tblAlerts_col_1-2']")
		private static WebElement emailHeadretTemplateRow1;	
		
		@FindBy(xpath="//*[@id='id_tblAlerts_col_1-4']")
		private static WebElement smsTemplateRow1;	
		
		@FindBy(xpath="//*[@id='id_tblAlerts_col_1-5']")
		private static WebElement AlertsTemplateRow1;	
		
		@FindBy(xpath="//*[@id='id_tblAlerts_EmailHeaderTemplate']")
		private static WebElement emailHeadretTemplateDropdown;
		
		@FindBy(xpath="//*[@id='id_tblAlerts_SMSTemplate']")
		private static WebElement smsTemplateDropdown;
		
		@FindBy(xpath="//*[@id='id_tblAlerts_Alerts']")
		private static WebElement AlertsTemplateDropdown;
			
		@FindBy(xpath="//*[@id='smsTemplateOptCtrl_input_settings']/span")
		private static WebElement customizeTemplate_TemplatesSettingBtn;	
			
			
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_heading']")
			private static WebElement templateSettingPop_CustomizeDisplayColoumnLabel;
			         
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_container']")
			private static WebElement templateSettingPop_sTemplateNameTxt;
	
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[1]")
			private static WebElement templateSettingPop_StandardFieldsBtn;
		
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_list']")
			    private static WebElement templateSettingPop_StandardFields_FiledDropdown;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_header']")
			    private static WebElement templateSettingPop_StandardFields_HeaderTxt;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_alignment']")
			    private static WebElement templateSettingPop_StandardFields_AlignmentDropdown;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_standardfields_width']")
			    private static WebElement templateSettingPop_StandardFields_WidthTxt;
			
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[3]")
				private static WebElement templateSettingPop_StandardFields_OkBtn;
				
				@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[4]")
				private static WebElement templateSettingPop_StandardFields_CancelBtn;
		
			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[2]")
			private static WebElement templateSettingPop_DeleteColoumnBtn;

			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[3]")
			private static WebElement templateSettingPop_OkBtn;

			@FindBy(xpath="//*[@id='smsTemplateOptCtrl_customize_popup_footer']/div/div/input[4]")
			private static WebElement templateSettingPop_CancelBtn;
		
	
	//Email Template Tab			
					
	//Header Fields
			
			@FindBy(xpath="//*[@id='forHf']/span[2]/span/i[1]")
			private static WebElement emailTemplateOpenBtn;
			
			
			@FindBy(xpath="//a[text()='Open']")
			private static WebElement emailTemplateOpenTxt;	
			
			@FindBy(xpath="//li[text()='emailTemplate1']")
			private static WebElement emailTemplateOpenLayoutTxt;	
			
			@FindBy(xpath="//*[@id='btn_PopUpOk']")
			private static WebElement emailTemplateLoadBtn;	
			
			@FindBy(xpath="//*[@id='id_InvoicePrint']")
			private static WebElement emailTemplatePrintDropdown;	
			
			@FindBy(xpath="//a[text()='Print']")
			private static WebElement emailTemplatePrintBtn;	
			
	@FindBy(xpath="//u[contains(text(),'Email Template')]")
	private static WebElement emailTemplateBtn;	
					
	@FindBy(xpath="//*[@id='forHf']/span[1]/span/i[1]")
	private static WebElement emailTemplateNewBtn;	
	
	@FindBy(xpath="//i[@class='icon-font6 icon-new']")
	private static WebElement  Newdropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[1]")
		private static WebElement  New_LayoutBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[2]")
		private static WebElement  New_PageBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-open']")
	private static WebElement  Opendropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[1]")
		private static WebElement  OpenBtn;
	
	   //Pop
	    @FindBy(xpath="//*[@id='1']")
	    private static WebElement  Open_Selct1Option;
	
	    @FindBy(xpath="//button[@id='btn_PopUpOk']")
		private static WebElement  OpenBtn_OkBtn;
		
		@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
		private static WebElement  OpenBtn_CancelBtn;
	
	@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[2]")
	private static WebElement FromXMLBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-save']")
	private static WebElement  Savedropdown;

		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[1]")
		private static WebElement  PrintSaveBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[2]")
		private static WebElement  SaveAsBtn; 
		
		@FindBy(xpath="//input[@id='id_PopuplayoutName']")
		private static WebElement  SaveTxtField;
		
		@FindBy(xpath="//*[@id='id_tblAlerts_col_1-3']")
		private static WebElement  emailTemplateRow1;
		
		@FindBy(xpath="//*[@id='id_tblAlerts_EmailTemplate']")
		private static WebElement  emailTemplateDropdown;
		
		@FindBy(xpath="//*[@id='btn_PopUpOk']")
		private static WebElement  Save_OkBtn;
		
		@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
		private static WebElement  Save_CancekBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[3]")
		private static WebElement  SaveAsImageBtn; //No Response
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[4]")
		private static WebElement  SaveAsXMLBtn; // Downloads xml file
		
		@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[5]")
		private static WebElement  SaveAsHTMLBtn; 
	
	@FindBy(xpath="//*[@id='forHf']/span[4]")
	private static WebElement  Removedropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[1]")
		private static WebElement  RemoveBtn;  
		
		@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[2]")
		private static WebElement  RemoveCurrentPageBtn; 
                          
		//popup Error MEssage 
		@FindBy(xpath="//*[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[1]")
		private static WebElement  ErrorMessage;//This Is only Page.You Not Delete this Page --Message while using RemovecurrentPAgeBtn 
		
		@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[3]")
		private static WebElement  RemoveControlBtn;				
	
	@FindBy(xpath="//*[@id='forHf']/span[5]")
	private static WebElement  PageNo;
	
	@FindBy(xpath="//*[@id='forHf']/span[6]")
	private static WebElement  Controldrpdown;
			
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[1]")
		private static WebElement  StaticTextBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[2]")
		private static WebElement  BitmapBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[3]")
		private static WebElement  BodyGridBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[4]")
		private static WebElement  RectangleBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[5]")
		private static WebElement  EcllipseBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[6]")
		private static WebElement  LineBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[7]")
		private static WebElement  AreaBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[8]")
		private static WebElement  TableBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[9]")
		private static WebElement  ApprovalHistoryBtn;

	@FindBy(xpath="//*[@id='forHf']/span[7]/span/i[1]")
	private static WebElement  Alignmentdropdown;
			
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[1]")
		private static WebElement  LeftAlignmentBtn;
					
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[2]")
		private static WebElement  RightAlignmentBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[3]")
		private static WebElement  TopAlignmentBtn;	
		
		@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[4]")
		private static WebElement  BottomAlignmentBtn;
	
	@FindBy(xpath="//*[@id='forHf']/span[8]")
	private static WebElement  Sizedropdown;
	
		@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[1]")
		private static WebElement  SameSizeBtn;
					
		@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[2]")
		private static WebElement  SameWidthBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[3]")
		private static WebElement  SameHeightBtn;
	
	@FindBy(xpath="//*[@id='forHf']/span[9]")
	private static WebElement  Printdropdown;
	
	@FindBy(xpath="//*[@id='menu-print']")
	private static WebElement  Print_PrintBtn;
						
		@FindBy(xpath="//*[@id='menu-preview']	")
		private static WebElement  Print_PreviewBtn;
		
		@FindBy(xpath="//*[@id='fit-button']")
		private static WebElement  Preview_FitToWidthBtn;
		
		@FindBy(xpath="//*[@id='zoom-in-button']")
		private static WebElement  PreviewZ_ZoomInBtn;
		
		@FindBy(xpath="//*[@id='zoom-out-button']")
		private static WebElement  Preview_ZoomOutBtn;
		
		@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[3]")
		private static WebElement  PageSetUpBtn;
		
		@FindBy(xpath="//*[@id='id_PageSetUpPreview']")
		private static WebElement  PageSetupPagePreviewField;
		
		@FindBy(xpath="//*[@id='id_PageType']")
		private static WebElement  PageSetupPaperSizedropdown;
		
		@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='0']")
		private static WebElement  PageSetupPotraitRadio;
		
		@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='1']")
		private static WebElement  PageSetupLandScapeRadio;
		
		@FindBy(xpath="//*[@id='id_PaperUnit'][@value='0']")
		private static WebElement  PageSetupCentimetersRadio;
		
		@FindBy(xpath="//*[@id='id_PaperUnit'][@value='1']")
		private static WebElement  PageSetupInchesRadio;
		
		@FindBy(xpath="//*[@id='id_PageSizeLeftMarginDisplay']")
		private static WebElement  PageSetupLeftTxt;
		
		@FindBy(xpath="//*[@id='id_PageSizeRightMarginDisplay']")
		private static WebElement  PageSetupRightTxt;
		
		@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
		private static WebElement  PageSetupTopTxt;
		
		@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
		private static WebElement  PageSetupBottomTxt;
		
		@FindBy(xpath="//*[@id='id_PageSetupOkBtn']")
		private static WebElement  PageSetupOkBtn;
		
		@FindBy(xpath="//*[@id='id_PageSetupCancelBtn']")
		private static WebElement  PageSetUpCancelBtn;
                  
	@FindBy(xpath="//*[@id='id_InvoiceDesingCancel']/i")
	private static WebElement  ExitBtn;	
	
	//Header Elements
	
	@FindBy(xpath="//*[@id='li_InvoicePageSetup']/a")
	private static WebElement  headerPageSetUpTab;
	
	@FindBy(xpath="//*[@id='li_InvoiceDesigner']/a")
	private static WebElement headerDesignerTab;
	
	@FindBy(xpath="//*[@id='li_InvoicePreview']/a")
	private static WebElement  headerPreviewTab;
	
	//Fields  
	
	@FindBy(xpath="//*[@id='LiDesignField']/a")
	private static WebElement  headerFieldsTab;
	
	@FindBy(xpath="//*[@id='LiProp']/a")
	private static WebElement  headerPropertiesTab;
	
	@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/a")
	private static WebElement  fields_CompanyExpandBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[1]")
		private static WebElement  fields_Company_CompanyName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[2]")
		private static WebElement  fields_Company_CompanyCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[3]")
		private static WebElement  fields_Company_AccountingDate;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]")
		private static WebElement  fields_Company_Address1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[5]")
		private static WebElement  fields_Company_Address2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[6]")
		private static WebElement  fields_Company_City;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[7]")
		private static WebElement  fields_Company_Zipcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[8]")
		private static WebElement  fields_Company_Country;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[9]")
		private static WebElement  fields_Company_PhoneNumber1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[10]")
		private static WebElement  fields_Company_PhoneNumber2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[11]")
		private static WebElement  fields_Company_Fax;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[12]")
		private static WebElement  fields_Company_TaxRegestrationNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[13]")
		private static WebElement  fields_Company_ExciseRegistrationNumber;

	@FindBy(xpath="//span[contains(text(),'Header')]")
	private static WebElement   fields_HeaderExpandBtn;
	             
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[2]/ul/li[1]/a")
		private static WebElement  fields_Header_DocNo;
	
	@FindBy(xpath="//li[@class='treeview active']//span[contains(text(),'Date')]//i[@class='icon-expand icon-font8']")
	private static WebElement  fields_Header_DateExpandBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[1]/a")
		private static WebElement  header_Date;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[2]/a")
		private static WebElement  header_Date_Year;
		
		@FindBy(xpath="///*[@id='InvoiceDesignheader']/ul/li[1]/ul/li[2]/ul/li[3]/a")
		private static WebElement  header_Date_Month;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[4]/a")
		private static WebElement  header_Date_DayOfYear;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[5]/a")
		private static WebElement  header_Date_Day;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[6]/a")
		private static WebElement  header_Date_Week;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[2]/ul/li[7]/a")
		private static WebElement  header_Date_WeekDay;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[3]/a")
		private static WebElement  fields_Header_TimeExpandBtn;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[1]/a")
		private static WebElement  headers_Time_Time;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[2]/a")
		private static WebElement  headers_Time_Hour;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[3]/a")
		private static WebElement  headers_Time_Minute;
		
		@FindBy(xpath="//*[@id='InvoiceDesignheaders']/ul/li[1]/ul/li[3]/ul/li[4]/a")
		private static WebElement headers_Time_Second;
	
	@FindBy(xpath="//span[contains(text(),'CashBankAC')]")
	private static WebElement fields_Header_CashBankACExpandBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[1]/a")
		private static WebElement  cashAndBankAC_Name;
					
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[2]/a")
		private static WebElement  cashAndBankAC_Code;
					
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[3]/a")
		private static WebElement  cashAndBankAC_Alias;
					
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[4]/a")
		private static WebElement  cashAndBankAC_Accounttype;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[5]/a")
		private static WebElement  cashAndBankAC_Address;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[6]/a")
		private static WebElement  cashAndBankAC_AllowCustomerPortal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[7]/a")
		private static WebElement  cashAndBankAC_BanckAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[8]/a")
		private static WebElement  cashAndBankAC_BankACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[9]/a")
		private static WebElement  cashAndBankAC_BankAccountName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[10]/a")
		private static WebElement  cashAndBankAC_BankAccountNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[11]/a")
		private static WebElement  cashAndBankAC_ChequeDiscountLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[12]/a")
		private static WebElement  cashAndBankAC_City1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[13]/a")
		private static WebElement  cashAndBankAC_CityCode1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[14]/a")
		private static WebElement  cashAndBankAC_City2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[15]/a")
		private static WebElement  cashAndBankAC_CityCode2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[16]/a")
		private static WebElement  cashAndBankAC_ConsolidationMethod;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[17]/a")
		private static WebElement  cashAndBankAC_CreditDays;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[18]/a")
		private static WebElement  cashAndBankAC_CreditLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[19]/a")
		private static WebElement  cashAndBankAC_DebitCreditProposal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[20]/a")
		private static WebElement  cashAndBankAC_DebitCreditRequired;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[21]/a")
		private static WebElement  cashAndBankAC_DefaultCurrency;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[22]/a")
		private static WebElement  cashAndBankAC_DeliveryAddress;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[23]/a")
		private static WebElement  cashAndBankAC_Email;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[24]/a")
		private static WebElement  cashAndBankAC_ExchangeAdjustGainAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[25]/a")
		private static WebElement  cashAndBankAC_ExchangeAdjustGainACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[26]/a")
		private static WebElement  cashAndBankAC_ExchangeAdjustLossAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[27]/a")
		private static WebElement  cashAndBankAC_ExchangeAdjustLossACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[28]/a")
		private static WebElement  cashAndBankAC_FaxNo;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[29]/a")
		private static WebElement  cashAndBankAC_FinanceChargeTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[30]/a")
		private static WebElement  cashAndBankAC_FinanaceEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[31]/a")
		private static WebElement  cashAndBankAC_IFSCcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[32]/a")
		private static WebElement  cashAndBankAC_Password;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[33]/a")
		private static WebElement  cashAndBankAC_PaymentTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[34]/a")
		private static WebElement  cashAndBankAC_PaymentType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[35]/a")
		private static WebElement  cashAndBankAC_PDCdiscountedAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[36]/a")
		private static WebElement  cashAndBankAC_PDCdiscountedACcode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[37]/a")
		private static WebElement  cashAndBankAC_Pin1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[38]/a")
		private static WebElement  cashAndBankAC_Pin2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[39]/a")
		private static WebElement  cashAndBankAC_PortalEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[40]/a")
		private static WebElement  cashAndBankAC_PrimaryAccount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[41]/a")
		private static WebElement  cashAndBankAC_PrimanryAccountCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[42]/a")
		private static WebElement  cashAndBankAC_RateOFInterest;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[43]/a")
		private static WebElement  cashAndBankAC_ReminderTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[44]/a")
		private static WebElement  cashAndBankAC_SendEmaialToCustomer;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[45]/a")
		private static WebElement  cashAndBankAC_TelNo;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[46]/a")
		private static WebElement  cashAndBankAC_GropupLevel1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[47]/a")
		private static WebElement  cashAndBankAC_GroupLevel1Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[48]/a")
		private static WebElement  cashAndBankAC_GroupLevel2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[49]/a")
		private static WebElement  cashAndBankAC_GroupLevel2Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[50]/a")
		private static WebElement  cashAndBankAC_GroupLevel3;
		               
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[51]/a")
		private static WebElement  cashAndBankAC_GroupLevel3Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[52]/a")
		private static WebElement  cashAndBankAC_GroupLevel4;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[53]/a")
		private static WebElement  cashAndBankAC_GroupLevel4Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[54]/a")
		private static WebElement  cashAndBankAC_GroupLevel5;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[55]/a")
		private static WebElement  cashAndBankAC_GroupLevel5Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[56]/a")
		private static WebElement  cashAndBankAC_GroupLevel6;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[57]/a")
		private static WebElement  cashAndBankAC_GroupLevel6Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[58]/a")
		private static WebElement  cashAndBankAC_GroupLevel7;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[1]/ul/li[4]/ul/li[59]/a")
		private static WebElement  cashAndBankAC_GroupLevel7Code;
		
			
	@FindBy(xpath="//li[@class='treeview active']//span[contains(text(),'Department')]")
	private static WebElement  fields_Header_DepartmentExpandBtn;
	
	@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Location')]")
	private static WebElement  fields_Header_LocationExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'sNarration')]")
	private static WebElement  header_sNarration;
	
	@FindBy(xpath="//span[contains(text(),'sChequeNo')]")
	private static WebElement  header_sChequeNo;
	
	@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[2]/ul/li[9]/a/span")
	private static WebElement  header_User;
	
	@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Role')]")
	private static WebElement  header_Role;
	
	@FindBy(xpath="//span[contains(text(),'UserVal1')]")
	private static WebElement  header_UserValue1;
	
	@FindBy(xpath="//span[contains(text(),'UserVal2')]")
	private static WebElement  header_UserValue2;
	
	@FindBy(xpath="//span[contains(text(),'UserVal3')]")
	private static WebElement  header_UserValue3;
	
	@FindBy(xpath="//span[contains(text(),'UserVal4')]")
	private static WebElement  header_UserValue4;
	
	@FindBy(xpath="//span[contains(text(),'UserVal5')]")
	private static WebElement  header_UserValue5;
	
	@FindBy(xpath="//span[contains(text(),'VoucherName')]")
	private static WebElement  header_VoucherName;
	
	
	//Body Expansion Fields
	
	@FindBy(xpath="//span[contains(text(),'Body')]")
	private static WebElement  fields_BodyExpansionBtn;
	
	@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/a")
	private static WebElement  fields_Body_AccountExpansionBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[1]/a")
		private static WebElement body_Name;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[2]/a")
		private static WebElement body_Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[3]/a")
		private static WebElement body_Alias;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[4]/a")
		private static WebElement body_AccountType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[5]/a")
		private static WebElement body_Address;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[6]/a")
		private static WebElement body_AlloowCoustmerPortal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[7]/a")
		private static WebElement body_BankAc;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[8]/a")
		private static WebElement body_BAnkAcCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[9]/a")
		private static WebElement body_BanbkAccountName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[10]/a")
		private static WebElement body_BankAccountNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[11]/a")
		private static WebElement body_BAnkDiscountLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[12]/a")
		private static WebElement body_City1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[13]/a")
		private static WebElement body_CityCode1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[14]/a")
		private static WebElement body_City2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[15]/a")
		private static WebElement body_CityCode2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[16]/a")
		private static WebElement body_ConsoildationMethod;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[17]/a")
		private static WebElement body_CreditDays;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[18]/a")
		private static WebElement body_CreditLimit;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[19]/a")
		private static WebElement body_DebitOrCreditProposal;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[20]/a")
		private static WebElement body__DebitOrCreditRequired;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[21]/a")
		private static WebElement body_DefaultCurrency;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[22]/a")
		private static WebElement body_DeliveryAddress;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[23]/a")
		private static WebElement body_Email;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[24]/a")
		private static WebElement body_ExchangeAdjustmentGainAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[25]/a")
		private static WebElement body_ExchangeAdjustmentGainAcCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[26]/a")
		private static WebElement body_fields_Header_ExchangeAdjustmentLossAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[27]/a")
		private static WebElement body_fields_Header_ExchangeAdjustmentLossACCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[28]/a")
		private static WebElement body_FaxNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[29]/a")
		private static WebElement body_FininaceChargeTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[30]/a")
		private static WebElement body_FinanceEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[31]/a")
		private static WebElement body_IFSCCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[32]/a")
		private static WebElement body_Password;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[33]/a")
		private static WebElement body_PaymentTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[34]/a")
		private static WebElement body_PaymentType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[35]/a")
		private static WebElement body_PDCDiscountedAC;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[36]/a")
		private static WebElement body_PDCDiscountedACCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[37]/a")
		private static WebElement body_Pin1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[38]/a")
		private static WebElement body_Pin2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[39]/a")
		private static WebElement body_POrtalEmail;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[40]/a")
		private static WebElement body_PrimaryAccount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[41]/a")
		private static WebElement body_PrimaryAccountCode;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[42]/a")
		private static WebElement body_RateOfInterest;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[43]/a")
		private static WebElement body_RemainderTerms;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[44]/a")
		private static WebElement body_SendEmailTOCustomer;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[45]/a")
		private static WebElement body_TelNumber2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[46]/a")
		private static WebElement body_GroupLevel1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[47]/a")
		private static WebElement body_GroupLevel1Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[48]/a")
		private static WebElement body_GroupLevel2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[49]/a")
		private static WebElement body_GroupLevel2Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[50]/a")
		private static WebElement body_GroupLevel3;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[51]/a")
		private static WebElement body_GroupLevel3Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[52]/a")
		private static WebElement body_GroupLevel4;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[53]/a")
		private static WebElement body_GroupLevel4Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[54]/a")
		private static WebElement body_GroupLevel5;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[55]/a")
		private static WebElement body_GroupLevel5Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[56]/a")
		private static WebElement body_GroupLevel6;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[57]/a")
		private static WebElement body_GroupLevel6Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[58]/a")
		private static WebElement body_GroupLevel7;
		              
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[1]/ul/li[59]/a")
		private static WebElement body_GroupLevel7Code;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[2]/a")
		private static WebElement body_Amount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[3]/a")
		private static WebElement body_VouchurAmount;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[4]/a")
		private static WebElement body_Referrence;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[5]/a")
		private static WebElement body_Net;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[6]/a")
		private static WebElement body_VoucherNet;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[3]/ul/li[7]/a")
		private static WebElement body_SRemarks;
		
		@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[5][text()='4']")
		private static WebElement voucher4;
		
		@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[5][text()='2']")
		private static WebElement voucher2;

		
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
		private static List<WebElement> voucherGridDocNo;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		private static List<WebElement> voucherGridIndexChkBox;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
		private static List<WebElement> voucherGridSuspendStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[13]")
		private static List<WebElement> voucherGridAuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[13]")
		private static WebElement voucherGridRow1AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[2]/td[13]")
		private static WebElement voucherGridRow2AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[3]/td[13]")
		private static WebElement voucherGridRow3AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[4]/td[13]")
		private static WebElement voucherGridRow4AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[5]/td[13]")
		private static WebElement voucherGridRow5AuthorizationStatus;
		
		@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		private static List<WebElement> voucherGridCheckBoxList;
		
		
		
		
		
		
	//UserDetails
	@FindBy(xpath="//span[contains(text(),'User details')]")
	private static WebElement  fields_UserDetailsExpansionBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[1]/a")
		private static WebElement userDetails_UserName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[2]/a")
		private static WebElement userDetails_MobileNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[3]/a")
		private static WebElement userDetails_PhoneNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[4]/a")
		private static WebElement userDetails_EmailId;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[5]/a")
		private static WebElement userDetails_Singature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[6]/a")
		private static WebElement userDetails_Employee;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[7]/a")
		private static WebElement userDetails_AuthoriseUserName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[8]/a")
		private static WebElement userDetails_AuthoriseUserMobileNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[9]/a")
		private static WebElement userDetails_AuthoriseUserPhoneNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[10]/a")
		private static WebElement userDetails_AuthoriseUserEmailId;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[11]/a")
		private static WebElement userDetails_AuthoriseUserSignature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[12]/a")
		private static WebElement userDetails_AuthoriseBy;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[13]/a")
		private static WebElement userDetails_NextAuthoriseUserName;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[14]/a")
		private static WebElement userDetails_NextUserMobileNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[15]/a")
		private static WebElement userDetails_NextUserPhoneNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[16]/a")
		private static WebElement userDetails_NextUserEmailId;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[17]/a")
		private static WebElement userDetails_NextUserSignature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[18]/a")
		private static WebElement userDetails_CreatedBySignature;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[4]/ul/li[19]/a")
		private static WebElement userDetails_ModifiedBySignature;

	
	//Miscellaneous 
	
	@FindBy(xpath="//li[@class='treeview active']//span[contains(text(),'Miscellaneous')]")
	private static WebElement  fields_MiscellaneousExpansionBtn;
	
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[1]/a")
		private static WebElement miscellaneous_Longdate;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[2]/a")
		private static WebElement miscellaneous_PageNumber;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[3]/a")
		private static WebElement miscellaneous_Printdate;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[4]/a")
		private static WebElement miscellaneous_PrintTime;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[5]/a")
		private static WebElement miscellaneous_TotalPage;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[6]/a")
		private static WebElement miscellaneous_Sno;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[7]/a")
		private static WebElement miscellaneous_PageType;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[8]/a")
		private static WebElement miscellaneous_AgingDetails;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[9]/a")
		private static WebElement miscellaneous_AgingAmounts;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[10]/a")
		private static WebElement miscellaneous_AgingHeadings;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[11]/a")
		private static WebElement miscellaneous_Agingbalance;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[12]/a")
		private static WebElement miscellaneous_AgingSlab1;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[13]/a")
		private static WebElement miscellaneous_AgingSlab2;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[14]/a")
		private static WebElement miscellaneous_AgingSlab3;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[15]/a")
		private static WebElement miscellaneous_AgingSlab4;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[16]/a")
		private static WebElement miscellaneous_AgingSlab5;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[17]/a")
		private static WebElement miscellaneous_AgingSlab6;
		
		@FindBy(xpath="//*[@id='InvoiceDesignFields']/ul/li[5]/ul/li[18]/a")
		private static WebElement miscellaneous_AgingMonthWise;
		
	//'SMS template 
	
	@FindBy(xpath="//u[contains(text(),'SMS template')]")
	private static WebElement headerSMSTemplate;					
	
	//Pop As Same Above Email Header Template
	//Alerts
	@FindBy(xpath="//u[contains(text(),'Alerts')]")
	private static WebElement headerAlert;
	
	//Pop As Same Above Email Header Template
	
	//Recipient
	@FindBy(xpath="//div[contains(text(),'Recipient')]")
	private static WebElement headerRecipient;					
	
	
	/// Ok And Cancel for Authorization Definition
	
	@FindBy(xpath="//*[@id='id_report_popup_ok']")
	private static WebElement definitionOkBtn;					
			
	@FindBy(xpath="//*[@id='id_report_popup_cancel']/i	")
	private static WebElement definitionCloseBtn;					
	
	@FindBy(xpath="//*[@id='16']/div/span")
	private static WebElement  settingsmenuBtn;
	
	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	private static WebElement  configureTransactionBtn;
	
	@FindBy(xpath="//*[@id='68']/span")
	private static WebElement  transactionAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='235']/span")
	private static WebElement  pricebookAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='19']/span")
	private static WebElement  configureMastersBtn;
	
	@FindBy(xpath="//*[@id='67']/span")
	private static WebElement  masterAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='69']/span")
	private static WebElement  creditLimitAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='74']/span")
	private static WebElement  designWorkflowBtn;
	
	@FindBy(xpath="//*[@id='105']/span")
	private static WebElement  settingsWizardBtn;
	
	@FindBy(xpath="//*[@id='232']/span")
	private static WebElement  batchCodeGenerationBtn;
	
	@FindBy(xpath="//*[@id='34']/span")
	private static WebElement  mapCreditLimitBtn;
	
	@FindBy(xpath="//*[@id='257']/span")
	private static WebElement  vatTaxCodeBtn;
	
	@FindBy(xpath="//*[@id='258']/span")
	private static WebElement  customerPortalAdminBtn;
	
	@FindBy(xpath="//*[@id='3308']/span")
	private static WebElement  budgetAuthorizationBtn;
	
	@FindBy(xpath="//*[@id='3320']/span")
	private static WebElement  paymentGatewayIntegrationBtn;
	
	@FindBy(xpath="//*[@id='dashName']")
	private static WebElement dashboardName;
	
	@FindBy(xpath="//div[@id='divLevel1']//div[@class='row clsDivAuthorizationName']")
	private static WebElement level1;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-edit icon-font7']")
	private static WebElement Level1editBtn;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-new icon-font7']")
	private static WebElement AddLevel1Btn;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-add-parallel icon-font7']")
	private static WebElement AddParallel1Btn;
	
	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-delete icon-font7']")
	private static WebElement DeleteLevel1Btn;
	
	@FindBy(xpath="//span[@id='chkLevelCheck1']//input[@id='chkLevelCheck0']")
	private static WebElement LevelCheck1ChkBox;
	
	@FindBy(xpath="//span[contains(text(),'Alerts')]")
	private static WebElement alertTab;
	
	
	
	@FindBy(xpath="//div[@id='divLevel2']//div[@class='row clsDivAuthorizationName']")
	private static WebElement level2;
	
	@FindBy(xpath="//div[@id='divLevel2']//i[@class='icon-edit icon-font7']")
	private static WebElement Level2editBtn;
	
	@FindBy(xpath="//div[@id='divLevel2']//i[@class='icon-new icon-font7']")
	private static WebElement AddLevel2Btn;
	
	@FindBy(xpath="//div[@id='divLevel2']//i[@class='icon-add-parallel icon-font7']")
	private static WebElement AddParallel2Btn;
	
	@FindBy(xpath="//div[@id='divLevel2']//i[@class='icon-delete icon-font7']")
	private static WebElement Level2DeleteBtn;
	
	@FindBy(xpath="//span[@id='chkLevelCheck2']//input[@id='chkLevelCheck0']")
	private static WebElement LevelCheck2ChkBox;
	
	
	//Vouchers Home Page Ribbon Control
		@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
		private static WebElement  newBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
		private static WebElement  editBtn;

		@FindBy(xpath="//span[@class='icon-print icon-font6']")
		private static WebElement  printBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
		private static WebElement  deleteBtn;
		
		@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
		private static WebElement  authorizeBtn;
		
		@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
		private static WebElement  suspendBtn;
		
		@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
		private static WebElement  rejectBtn;
		
		@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
		private static WebElement  chequeReturnBtn;
		
		@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
		private static WebElement  printBarCodeBtn;
		
		@FindBy(xpath="//span[@class='icon-convert icon-font6']")
		private static WebElement  convertBtn;
		
		@FindBy(xpath="//span[@class='icon-export icon-font6']")
		private static WebElement  exportToXMLBtn;  
			
		@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
		private static WebElement  settingsBtn;
		
		@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
		private static WebElement  homeCloseBtn;
				
		//Vouchers Home Page Options
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
		private static WebElement  allVouchersOption;
		
		@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
		private static WebElement  pendingBillsOption;
		
		@FindBy(xpath="//input[@id='SelectDefaultView']")
		private static WebElement  selectDefaultViewChkBox;
			
		@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
		private static WebElement  sortingBtn;
		
	    @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
	    private static WebElement  createViewBtn;

	    @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
	    private static WebElement  customizeBtn;
	   
	    @FindBy(xpath="//span[@class='icon-filter icon-font6']")
	    private static WebElement  filterBtn;
	   
	    @FindBy(xpath="//*[@id='transhomeRefresh']")
	    private static WebElement  refreshBtn;
	   
	    @FindBy(xpath="//*[@id='transhomeRefresh']")
	    private static WebElement  refreshBtnInPVVAT;
	    
	    @FindBy(xpath="//i[@class='icon-font6 icon-export']")
	    private static WebElement  exportBtn;
	   
		// Options Button  (Display Option)	
	    @FindBy(xpath="//span[@id='transOptions']")
	    private static WebElement  optionsBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
	    private static WebElement  autoAdjustWidthBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
	    private static WebElement  fitToScreenBtn;
	   
	    @FindBy(xpath="//a[contains(text(),'Normal')]")
	    private static WebElement  normalBtn;
	   
					
		//Voucher Home Page Grid Header Columns
		@FindBy(xpath="//input[@id='HeaderChkBox']")
		private static WebElement  grid_HeaderChkBox;	
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
		private static WebElement  grid_Header_Date;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
		private static WebElement  grid_Header_VoucherNumber;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
		private static WebElement  grid_Header_CreatedBy;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
		private static WebElement  grid_Header_ModifiedBy;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
		private static WebElement  grid_Header_CreatedDate;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
		private static WebElement  grid_Header_ModifiedDate;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
		private static WebElement  grid_Header_CreatedTime;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
		private static WebElement  grid_Header_ModifiedTime;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
		private static WebElement  grid_Header_Suspended;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
		private static WebElement  grid_Header_Cancelled;
		
		@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
		private static WebElement  grid_Header_AuthorizationStatus;
		
		
		//Grid Voucher DetailsBtn
		@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
		private static WebElement  grid_VoucherDetailsBtn1;
		
		@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
		private static WebElement  grid_VoucherDetailsBtn2;
		
		
		//Grid CheckBox 1 And 2
		
		@FindBy(xpath="//tr[@id='trRender_1']//td//input")
		private static WebElement  grid_ChkBox1;
		
		@FindBy(xpath="//tr[@id='trRender_2']//td//input")
		private static WebElement  grid_ChkBox2;
		
		@FindBy(xpath="//tr[@id='trRender_3']//td//input")
		private static WebElement  grid_ChkBox3;
		
		@FindBy(xpath="//tr[@id='trRender_4']//td//input")
		private static WebElement  grid_ChkBox4;
		
		
		// Vouchers Home Page Footer
		@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
		private static WebElement  searchField;
								
		@FindBy(xpath="//button[@id='frstPage']")
		private static WebElement  firstPageBtn;

		@FindBy(xpath="//button[@id='id_previousPage']")
		private static WebElement  previousPageBtn;

		@FindBy(xpath="//button[@id='id_pagenumber']")
		private static WebElement  currentPageNo;

		@FindBy(xpath="//button[@id='id_nextPage']")
		private static WebElement  nextPageBtn;

		@FindBy(xpath="//button[@id='lstPage']")
		private static WebElement  lastPageBtn;
		
		
		
		//Vouchers Entry Page Ribbon Control Options
		@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
		private static WebElement  freeFlowBtn;
		
		@FindBy(xpath="//span[@class='icon-header icon-font6']")
		private static WebElement  jumpToHeaderSectionBtn;
		
		@FindBy(xpath="//span[@class='icon-panel icon-font6']")
		private static WebElement  jumpToBodySectionBtn;
		
		@FindBy(xpath="//span[@class='icon-footer icon-font6']")
		private static WebElement  jumpToFooterBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_new']")
		private static WebElement  new_newBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
		private static WebElement  saveBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_previous']")
		private static WebElement  previousBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_next']")
		private static WebElement  nextBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_print']")
		private static WebElement  new_PrintBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
		private static WebElement  new_SuspendBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_close']")
		private static WebElement  new_CloseBtn;
		
		@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
		private static WebElement  new_DeleteBtn;
		
		@FindBy(xpath="//div[@id='id_transactionentry_authorize']")
		private static WebElement  new_AuthorizeBtn;
		
		@FindBy(xpath="//div[@id='DashletDocInfo0']/div/div[1]/div[2]")
		private static WebElement  new_DocumentInfoStatusTxt;
		
		
		
		
		
		@FindBy(xpath="//span[@class='icon-menu icon-font4']")
		private static WebElement  toggleBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
		private static WebElement  copyDocumentOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
		private static WebElement  copyToClipBoardOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
		private static WebElement  pasteFromClipBoardOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
		private static WebElement  raiseCheckReturnOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
		private static WebElement  addToStockOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
		private static WebElement  markConvertedOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
		private static WebElement  bOMinputOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
		private static WebElement  autoAllocateOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
		private static WebElement  reverseEntryOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
		private static WebElement  printBarCodeOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
		private static WebElement  postingDetailsOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
		private static WebElement  exportToXMLOption;
		
		@FindBy(xpath="//*[@id='id_transactionentry_settings']")
		private static WebElement  settingsOption;
		
		
		
		// Line Wise Authorization 
		@FindBy(xpath="//span[@class='icon-clear icon-font6']")
		private static WebElement  lineWiseAuthorizationClearBtn;
		
		@FindBy(xpath="//div[@class='btn toolbar_button default_padding_toolbar_button']//span[@class='icon-ok icon-font6']")
		private static WebElement  lineWiseAuthorizationOkBtn;
		
		@FindBy(xpath="//div[@class='btn toolbar_button default_padding_toolbar_button']//span[@class='icon-close icon-font6']")
		private static WebElement  lineWiseAuthorizationCancelBtn;
		
		
		@FindBy(xpath="//input[@id='id_transaction_authorization_grid_control_heading_ctrl_2']")
		private static WebElement  lineWiseAuthHeaderChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-2']/input")
		private static WebElement  lineWiseAuthRow1ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-2']/input")
		private static WebElement  lineWiseAuthRow2ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-2']/input")
		private static WebElement  lineWiseAuthRow3ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-2']/input")
		private static WebElement  lineWiseAuthRow4ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-2']/input")
		private static WebElement  lineWiseAuthRow5ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-2']/input")
		private static WebElement  lineWiseAuthRow6ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-2']/input")
		private static WebElement  lineWiseAuthRow7ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-2']/input")
		private static WebElement  lineWiseAuthRow8ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-2']/input")
		private static WebElement  lineWiseAuthRow9ChkBox;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-2']/input")
		private static WebElement  lineWiseAuthRow10ChkBox;
		
		
		
		@FindBy(xpath="//span[@id='id_headrightsymbol']")
		private static WebElement  lineWiseAuthHeaderAuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-1']/span[1]")
		private static WebElement  lineWiseAuthRow1AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-1']/span[1]")
		private static WebElement  lineWiseAuthRow2AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-1']/span[1]")
		private static WebElement  lineWiseAuthRow3AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-1']/span[1]")
		private static WebElement  lineWiseAuthRow4AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-1']/span[1]")
		private static WebElement  lineWiseAuthRow5AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-1']/span[1]")
		private static WebElement  lineWiseAuthRow6AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-1']/span[1]")
		private static WebElement  lineWiseAuthRow7AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-1']/span[1]")
		private static WebElement  lineWiseAuthRow8AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-1']/span[1]")
		private static WebElement  lineWiseAuthRow9AuthorizeBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-1']/span[1]")
		private static WebElement  lineWiseAuthRow10AuthorizeBtn;
		
		
		
		@FindBy(xpath="//span[@id='id_headremovesymbol']")
		private static WebElement  lineWiseAuthHeaderRejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-1']/span[2]")
		private static WebElement  lineWiseAuthRow1RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-1']/span[2]")
		private static WebElement  lineWiseAuthRow2RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-1']/span[2]")
		private static WebElement  lineWiseAuthRow3RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-1']/span[2]")
		private static WebElement  lineWiseAuthRow4RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-1']/span[2]")
		private static WebElement  lineWiseAuthRow5RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-1']/span[2]")
		private static WebElement  lineWiseAuthRow6RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-1']/span[2]")
		private static WebElement  lineWiseAuthRow7RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-1']/span[2]")
		private static WebElement  lineWiseAuthRow8RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-1']/span[2]")
		private static WebElement  lineWiseAuthRow9RejectBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-1']/span[2]")
		private static WebElement  lineWiseAuthRow10RejectBtn;
		
		
		
		@FindBy(xpath="//span[@id='id_headbansymbol']")
		private static WebElement  lineWiseAuthHeaderBanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_1-1']/span[3]")
		private static WebElement  lineWiseAuthRow1BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_2-1']/span[3]")
		private static WebElement  lineWiseAuthRow2BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_3-1']/span[3]")
		private static WebElement  lineWiseAuthRow3BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_4-1']/span[3]")
		private static WebElement  lineWiseAuthRow4BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_5-1']/span[3]")
		private static WebElement  lineWiseAuthRow5BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_6-1']/span[3]")
		private static WebElement  lineWiseAuthRow6BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_7-1']/span[3]")
		private static WebElement  lineWiseAuthRow7BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_8-1']/span[3]")
		private static WebElement  lineWiseAuthRow8BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_9-1']/span[3]")
		private static WebElement  lineWiseAuthRow9BanBtn;
		
		@FindBy(xpath="//td[@id='id_transaction_authorization_grid_col_10-1']/span[3]")
		private static WebElement  lineWiseAuthRow10BanBtn;
		
		
		
		
		
		//Voucher Entry Page Header Fields
		@FindBy(xpath="//input[@id='id_header_1']")
		private static WebElement  documentNumberTxt;
		
		@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
		private static WebElement  documentNumberdropdown_ExpansionBtn;
		
		@FindBy(xpath="//input[@id='id_header_2']")
		private static WebElement  dateTxt;
		
		@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
		private static WebElement  dateTxt_CalenderBtn;
		
		@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
		private static WebElement  calender_TodayBtn;
		
		@FindBy(xpath="//input[@id='id_header_4']")
		private static WebElement  caskBankAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
		private static WebElement  caskBankAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		private static WebElement  cashBankAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  cashBankAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  cashBankAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  cashBankAccount_Settings_CancelBtn;
				
		@FindBy(xpath="//input[@id='id_header_268435459']")
		private static WebElement  departmentTxt;
		
		@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
		private static WebElement  department_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
		private static WebElement  department_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
			private static WebElement  department_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
			private static WebElement  department_Settings_StandardFieldsBtn;
							
				@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
				private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
				private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
				private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
				private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
							
									
			@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
			private static WebElement  department_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  department_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  department_Settings_CancelBtn;

		@FindBy(xpath="//*[@id='id_header_6']")
		private static WebElement  maturityDateTxt;
		
		@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
		private static WebElement  maturityDateTxt_CalenderBtn;
		
		@FindBy(xpath="//input[@id='id_header_3']")
		private static WebElement  purchaseAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
		private static WebElement  purchaseAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
		private static WebElement  purchaseAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			private static WebElement  purchaseAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
							
				@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  purchaseAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  purchaseAccount_Settings_CancelBtn;


	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  vendorAccountTxt;

	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  vendorAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  vendorAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  vendorAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  vendorAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  vendorAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  salesAccountTxt;

	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  salesAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  salesAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
			private static WebElement  salesAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
			private static WebElement  salesAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  salesAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  salesAccount_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_header_4']")
		private static WebElement  customerAccountTxt;
		
		@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
		private static WebElement  customerAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		private static WebElement  customerAccount_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  customerAccount_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[@class='panel']//input[3]")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[@class='panel']//input[4]")
						private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  customerAccount_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  customerAccount_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  customerAccount_Settings_CancelBtn;
		
		@FindBy(xpath="//input[@id='id_header_12']")
		private static WebElement  accountTxt;
		
		@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
		private static WebElement  account_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
		private static WebElement  account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
			private static WebElement  account_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
			private static WebElement  account_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
				private static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
				private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
				private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
				private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
									
									
			@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
			private static WebElement  account_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  account_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  account_Settings_CancelBtn;
		
		@FindBy(xpath="//input[@id='id_header_31']")
		private static WebElement  issuesReceiptsTxt;
		
		@FindBy(xpath="//input[@id='id_header_268435460']")
		private static WebElement  wareHouseTxt;
		
		@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
		private static WebElement  wareHouse_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
		private static WebElement  wareHouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
			private static WebElement  wareHouse_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
			private static WebElement  wareHouse_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  wareHouse_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  wareHouse_Settings_CancelBtn;
		
		@FindBy(xpath="//span[contains(text(),'sName')]")
		private static WebElement  customize_sName;
		
		@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
		private static WebElement  customize_sCode;
		
		@FindBy(xpath="//span[contains(text(),'Alias')]")
		private static WebElement  customize_Alias;
		
		@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
		private static WebElement  customize_bGroup;
		
		@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
		private static WebElement  customize_Balance;
		
		@FindBy(xpath="//input[@id='id_header_67108920']")
		private static WebElement  appropriateBasedOndropdown;
		
		@FindBy(xpath="//input[@id='id_header_67108921']")
		private static WebElement  additionalValueTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108924']")
		private static WebElement  narrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_21']")
		private static WebElement  raiseReceiptsChkBox;
		
		@FindBy(xpath="//input[@id='id_header_67108865']")
		private static WebElement  receipts_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108868']")
		private static WebElement  payments_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108871']")
		private static WebElement  pettyCash_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108874']")
		private static WebElement  postDatedReceipts_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108865']")
		private static WebElement  postDatedPayments_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108880']")
		private static WebElement  purchaseVouchers_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108881']")
		private static WebElement  purchaseReturns_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108884']")
		private static WebElement  salesInvoice_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108886']")
		private static WebElement  salesOrder_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108928']")
		private static WebElement  salesInvoiceNewNarrationTxt;
		
		
		@FindBy(xpath="//input[@id='id_header_67108885']")
		private static WebElement  salesReturns_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108913']")
		private static WebElement  cashSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108914']")
		private static WebElement  hirePurchaseSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108890']")
		private static WebElement  journalEntries_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108916']")
		private static WebElement  forexJV_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108910']")
		private static WebElement  interDepartmentalJV_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108888']")
		private static WebElement  nonStandardJournalEntries_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108892']")
		private static WebElement  debitNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108911']")
		private static WebElement  debitNotesLineWise_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108893']")
		private static WebElement  creditNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108912']")
		private static WebElement  creditNotesLineWisePayroll_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108894']")
		private static WebElement  openingBalance_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108891']")
		private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108909']")
		private static WebElement  requestForQuote_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108903']")
		private static WebElement  purchasesQuotations_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108882']")
		private static WebElement  purchasesOrders_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108882']")
		private static WebElement  materialReceiptsNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108904']")
		private static WebElement  salesQuotationss_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108887']")
		private static WebElement  deliveryNotes_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108917']")
		private static WebElement  posSales_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108918']")
		private static WebElement  productionOrder_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108886']")
		private static WebElement  salesOrders_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108895']")
		private static WebElement  shortagesinStock_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108896']")
		private static WebElement  excessesinStocks_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108897']")
		private static WebElement  stockTransfers_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108898']")
		private static WebElement  openingStocks_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108925']")
		private static WebElement  openingStocksNEW_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108908']")
		private static WebElement  materialRequisition_NarrationTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108866']")
		private static WebElement  receipts_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108869']")
		private static WebElement  payments_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108872']")
		private static WebElement  pettyCash_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108875']")
		private static WebElement  postDatedReceipts_ChequeNoTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108878']")
		private static WebElement  postDatedPayments_ChequeNoTxt;



		//Voucher Entry Page Body Fields
		
		@FindBy(xpath="//input[@id='id_body_536870916']")
		private static WebElement  pvWareHouseTxt;
		
		@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
		private static WebElement  pvWareHouse_ExpansionBtn;
		
		@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
		private static WebElement  pvWareHouse_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
			private static WebElement  pvWareHouse_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
			private static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  pvWareHouse_Settings_OkBtn;
							
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  pvWareHouse_Settings_CancelBtn;
		
		// Grid Elements
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		private static WebElement  grid_Header_Account;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		private static WebElement  grid_Header_Item;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
		private static WebElement  grid_Header_DebitAC;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
		private static WebElement  grid_Header_CreditAC;



		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
		private static WebElement  firstRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
		private static WebElement  secondRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
		private static WebElement  thirdRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
		private static WebElement  fourthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
		private static WebElement  fifthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
		private static WebElement  sixthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
		private static WebElement  seventhRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
		private static WebElement  eigthRowIndex;
		
		@FindBy(xpath="//span[@class='icon-delete icon-font8']")
		private static WebElement  deleteRowBtn;
		
		@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
		private static WebElement  insertRowBtn;
		
		@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
		private static WebElement  selectRowBtn;
		
		@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
		private static WebElement  unSelectRowBtn;
		
		@FindBy(xpath="//span[@class='icon-clone icon-font8']")
		private static WebElement  duplicateRowBtn;

		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
		private static WebElement  select1stRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
		private static WebElement  select1stRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
		private static WebElement  select1stRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
		private static WebElement  select1stRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
		private static WebElement  select1stRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
		private static WebElement  select1stRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
		private static WebElement  select1stRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
		private static WebElement  select1stRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
		private static WebElement  select1stRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
		private static WebElement  select1stRow_10thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
		private static WebElement  select1stRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
		private static WebElement  select1stRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
		private static WebElement  select1stRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
		private static WebElement  select1stRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
		private static WebElement  select1stRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
		private static WebElement  select1stRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
		private static WebElement  select1stRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
		private static WebElement  select1stRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
		private static WebElement  select2ndRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
		private static WebElement  select2ndRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
		private static WebElement  select2ndRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
		private static WebElement  select2ndRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
		private static WebElement  select2ndRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
		private static WebElement  select2ndRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
		private static WebElement  select2ndRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
		private static WebElement  select2ndRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
		private static WebElement  select2ndRow_9thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
		private static WebElement  select2ndRow_11thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
		private static WebElement  select2ndRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
		private static WebElement  select2ndRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
		private static WebElement  select2ndRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
		private static WebElement  select2ndRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
		private static WebElement  select2ndRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
		private static WebElement  select2ndRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
		private static WebElement  select2ndRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
		private static WebElement  select2ndRow_19thColumn;

		
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
		private static WebElement  select3rdRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
		private static WebElement  select3rdRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
		private static WebElement  select3rdRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
		private static WebElement  select3rdRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
		private static WebElement  select3rdRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
		private static WebElement  select3rdRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
		private static WebElement  select3rdRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
		private static WebElement  select3rdRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
		private static WebElement  select3rdRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
		private static WebElement  select3rdRow_10thColumn;

	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
		private static WebElement  select3rdRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
		private static WebElement  select3rdRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
		private static WebElement  select3rdRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
		private static WebElement  select3rdRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
		private static WebElement  select3rdRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
		private static WebElement  select3rdRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
		private static WebElement  select3rdRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
		private static WebElement  select3rdRow_18thColumn;




		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
		private static WebElement  select4thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
		private static WebElement  select4thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
		private static WebElement  select4thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
		private static WebElement  select4thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
		private static WebElement  select4thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
		private static WebElement  select4thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
		private static WebElement  select4thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
		private static WebElement  select4thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
		private static WebElement  select4thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
		private static WebElement  select4thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
		private static WebElement  select4thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
		private static WebElement  select4thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
		private static WebElement  select4thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
		private static WebElement  select4thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
		private static WebElement  select4thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
		private static WebElement  select4thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
		private static WebElement  select4thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
		private static WebElement  select4thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
		private static WebElement  select4thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
		private static WebElement  select4thRow_20thColumn;



		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
		private static WebElement  select5thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
		private static WebElement  select5thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
		private static WebElement  select5thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
		private static WebElement  select5thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
		private static WebElement  select5thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
		private static WebElement  select5thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
		private static WebElement  select5thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
		private static WebElement  select5thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
		private static WebElement  select5thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
		private static WebElement  select5thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
		private static WebElement  select5thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
		private static WebElement  select5thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
		private static WebElement  select5thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
		private static WebElement  select5thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
		private static WebElement  select5thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
		private static WebElement  select5thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[18]")
		private static WebElement  select5thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[19]")
		private static WebElement  select5thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[20]")
		private static WebElement  select5thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[21]")
		private static WebElement  select5thRow_20thColumn;




		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
		private static WebElement  select6thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
		private static WebElement  select6thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
		private static WebElement  select6thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
		private static WebElement  select6thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
		private static WebElement  select6thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
		private static WebElement  select6thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
		private static WebElement  select6thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
		private static WebElement  select6thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
		private static WebElement  select6thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
		private static WebElement  select6thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
		private static WebElement  select6thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
		private static WebElement  select6thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
		private static WebElement  select6thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
		private static WebElement  select6thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
		private static WebElement  select6thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
		private static WebElement  select6thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[18]")
		private static WebElement  select6thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[19]")
		private static WebElement  select6thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[20]")
		private static WebElement  select6thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[21]")
		private static WebElement  select6thRow_20thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
		private static WebElement  select7thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
		private static WebElement  select7thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
		private static WebElement  select7thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
		private static WebElement  select7thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
		private static WebElement  select7thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
		private static WebElement  select7thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
		private static WebElement  select7thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
		private static WebElement  select7thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
		private static WebElement  select7thRow_9thColumn;



		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
		private static WebElement  select8thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
		private static WebElement  select8thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
		private static WebElement  select8thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
		private static WebElement  select8thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
		private static WebElement  select8thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
		private static WebElement  select8thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
		private static WebElement  select8thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
		private static WebElement  select8thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
		private static WebElement  select8thRow_9thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
		private static WebElement  select9thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
		private static WebElement  select9thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
		private static WebElement  select9thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
		private static WebElement  select9thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
		private static WebElement  select9thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
		private static WebElement  select9thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
		private static WebElement  select9thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
		private static WebElement  select9thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
		private static WebElement  select9thRow_9thColumn;



		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
		private static WebElement  select10thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
		private static WebElement  select10thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
		private static WebElement  select10thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
		private static WebElement  select10thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
		private static WebElement  select10thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
		private static WebElement  select10thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
		private static WebElement  select10thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
		private static WebElement  select10thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
		private static WebElement  select10thRow_9thColumn;


		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
		private static WebElement  select11thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
		private static WebElement  select11thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
		private static WebElement  select11thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
		private static WebElement  select11thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
		private static WebElement  select11thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
		private static WebElement  select11thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
		private static WebElement  select11thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
		private static WebElement  select11thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
		private static WebElement  select11thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
		private static WebElement  select12thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
		private static WebElement  select12thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
		private static WebElement  select12thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
		private static WebElement  select12thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
		private static WebElement  select12thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
		private static WebElement  select12thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
		private static WebElement  select12thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
		private static WebElement  select12thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
		private static WebElement  select12thRow_9thColumn;

		@FindBy(xpath="//input[@id='id_body_12']")
		private static WebElement  enter_AccountTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
		private static WebElement  enter_Account_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
		private static WebElement  enter_Account_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			private static WebElement  enter_Account_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn;
									
						@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
															
						@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
														
						@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
															
						@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
															
						@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
															
						@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
						private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			private static WebElement  enter_Account_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_Account_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_Account_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_16']")
		private static WebElement  enter_Amount;
		
		@FindBy(xpath="//textarea[@id='id_body_16777219']")
		private static WebElement  enter_Receipts_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777222']")
		private static WebElement  enter_Payments_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777225']")
		private static WebElement  enter_PettyCash_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777228']")
		private static WebElement  enter_PostDatedReceipts_Remarks;
		
		@FindBy(xpath="//textarea[@id='id_body_16777231']")
		private static WebElement  enter_PostDatedPaymentss_Remarks;
		
		@FindBy(xpath="//input[@id='id_body_23']")
		private static WebElement  enter_ItemTxt;
		
		@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
		private static WebElement  item_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
		private static WebElement  item_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
			private static WebElement  item_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
			private static WebElement  item_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
				private static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
				private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
				private static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
				private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
			private static WebElement  item_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  item_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  item_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_24']")
		private static WebElement  enter_UnitTxt;
		
		@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
		private static WebElement  unit_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
		private static WebElement  unit_SettingsBtn;

			@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
			private static WebElement  unit_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
			private static WebElement  unit_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
				private static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
				private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
				private static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
				private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
			private static WebElement  unit_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  unit_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  unit_Settings_CancelBtn;

			
			
			
			
		@FindBy(xpath="//input[@id='id_body_33554460']")
		private static WebElement  enter_AQ;
		
		@FindBy(xpath="//input[@id='id_body_33554461']")
		private static WebElement  enter_FQ;
			
		@FindBy(xpath="//input[@id='id_body_26']")
		private static WebElement  enter_Quantity;
		
		@FindBy(xpath="//input[@id='id_body_35_5']")
		private static WebElement  enter_PurchasesOrders;
		
			@FindBy (xpath="//input[@id='id_transaction_entry_detail_workflow_popup_control_heading_ctrl_1']")
			private static WebElement purchaseOrderLinkHeaderChkBox;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
			private static List<WebElement> purchaseOrderLinkPopupVouchersList;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[7]")
			private static List<WebElement> purchaseOrderLinkPopupVouchersNoList;
			
			@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_popup_body']/tr/td[2]/input")
			private static List<WebElement> purchaseOrderLinkPopupChkBoxList;
			
			@FindBy (xpath="//div[@id='id_transaction_workflow_popup_heading']/div/ul/li[3]/div")
			private static WebElement purchaseOrderLinkPopupOkBtn;
			
		@FindBy(xpath="//input[@id='id_body_27']")
		private static WebElement  enter_Rate;
		
		@FindBy(xpath="//*[@id='id_body_28']")
		private static WebElement  enter_Gross;
		
		@FindBy(xpath="//input[@id='id_body_22']")
		private static WebElement  enter_Reserve;
		
		@FindBy(xpath="//input[@id='id_body_13']")
		private static WebElement  enter_Batch;
		
		@FindBy(xpath="//input[@id='id_body_38']")
		private static WebElement  enter_RMA;
		
		@FindBy(xpath="//input[@id='id_body_85']")
		private static WebElement  enter_Bin;
		
		@FindBy(xpath="//input[@id='id_body_12']")
		private static WebElement  enter_DebitACTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
		private static WebElement  enter_DebitAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
		private static WebElement  enter_DebitAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
			private static WebElement  enter_DebitAC_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
			private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_DebitAC_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_DebitAC_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_39']")
		private static WebElement  enter_CreditACTxt;
		
		@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
		private static WebElement  enter_CreditAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
		private static WebElement  enter_CreditAC_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
			private static WebElement  enter_CreditAC_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
			private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_CreditAC_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_CreditAC_Settings_CancelBtn;

		@FindBy(xpath="//input[@id='id_body_18']")
		private static WebElement  enter_DebitTxt;
		
		@FindBy(xpath="//input[@id='id_body_19']")
		private static WebElement  enter_CreditTxt;
		
		@FindBy(xpath="//textarea[@id='id_body_16777241']")
		private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
		
		@FindBy(xpath="//input[@id='id_body_87']")
		private static WebElement  enter_Warehouse2Txt;
		
		@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
		private static WebElement  enter_Warehouse2_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
		private static WebElement  enter_Warehouse2_SettingsBtn;

			@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
			private static WebElement  enter_WareHouse2_Settings_Container;
									
			@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
									
				@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
													
				@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
												
				@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
													
				@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
													
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
									
			@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
			private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
									
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_WareHouse2_Settings_OkBtn;
							
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_WareHouse2_Settings_CancelBtn;


		// Right Panel InfoSide Bar	
		@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
		private static WebElement  infoSideBarCustomizeBtn;

		@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
		private static WebElement  infoSideBarMinimizeExpandBtn;
			
			@FindBy(xpath="//li[@id='Trans_Dash_Save']//span[text()='Save']")
			private static WebElement  customizeSaveBtn;
			
			@FindBy(xpath="//span[@class='noWrap clsBlueColor'][contains(text(),'Cancel')]")
			private static WebElement  customizeCancelBtn;
			
			@FindBy(xpath="//input[@id='searchBoxTrans']")
			private static WebElement  customizeSearchTxt;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
			private static WebElement  customizeSearchBtn;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
			private static WebElement  graphBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
				private static WebElement  newGraphOption;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
			private static WebElement  reportBtn;
				
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
				private static WebElement  newReportOption;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
			private static WebElement  infoPanelBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
				private static WebElement  newInfoPanelOption;
				
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
			private static WebElement  workFlowBtn;
							
					@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
					private static WebElement  newWorkFlowOption;
							
			@FindBy(xpath="//a[@id='DocumentInfoOption']")
			private static WebElement  otherDashlets;
							
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
				private static WebElement  documentInfo;

		/*@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
		private static WebElement  infoSideBarMinimizeExpandBtn;	*/	
				
		@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
		private static WebElement  infoSideBarExpandBtn;


		// Footer Section
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		private static WebElement  netLabel;
		
		@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
		private static WebElement  netAmount;


		
		//Navigation of Voucher Menus
		
		// Financial Menu and Sub Menus
		@FindBy(xpath="//span[@class='icon-financial icon-font1']")
		private static WebElement  finacinalsMenu;
		
			@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
			private static WebElement  transactionsExpandBtn;
				
				@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
				private static WebElement  purchasesExpandBtn;
				
				@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
				private static WebElement  purchaseVouchersBtn;
				
	    //Inventory Menu and Sub Menus		
		@FindBy(xpath="//div[contains(text(),'Inventory')]")
		private static WebElement  inventoryMenu; 
		
			@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
			private static WebElement  inventoryTransactionsMenu; 
				
				@FindBy(xpath="//*[@id='139']/span")
				private static WebElement  inventoryTransactionsPurchasesMenu; 
			
					@FindBy(xpath="//*[@id='2010']/span")
					private static WebElement  requestForQuoteVoucher;
					
					@FindBy(xpath="//*[@id='2011']/span")
					private static WebElement  purchasesQuotationsVoucher;
						
					@FindBy(xpath="//a[@id='2012']//span[contains(text(),'Purchases Orders')]")
					private static WebElement  purchasesOrdersVoucher;
				
					@FindBy(xpath="//*[@id='2013']/span")
					private static WebElement  materialReceiptNotesVoucher;
						
				@FindBy(xpath="//*[@id='140']/span")
				private static WebElement  inventoyTransactionsSalesMenu; 
					
					@FindBy(xpath="//*[@id='2018']/span")
					private static WebElement  salesQuotationsVoucher;
					
					@FindBy(xpath="//*[@id='2019']/span")
					private static WebElement  deliveryNotesVoucher;
					
					@FindBy(xpath="//*[@id='2022']/span")
					private static WebElement  posSalesVoucher;
					
					@FindBy(xpath="//*[@id='2045']/span")
					private static WebElement  productionOrdersVoucher;
					
					@FindBy(xpath="//*[@id='2017']/span")
					private static WebElement  salesOrdersVoucher;
								
				@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
				private static WebElement  inventoryTransactionsStocksMenu; 
					
					@FindBy(xpath="//*[@id='2034']/span")
					private static WebElement  shortagesInStockVoucher;
					
					@FindBy(xpath="//*[@id='2035']/span")
					private static WebElement  excessesInStocksVoucher;
						
					@FindBy(xpath="//*[@id='2036']/span")
					private static WebElement  stockTransfersVoucher;
					
					@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
					private static WebElement  openingStocksVoucher;
					
					@FindBy(xpath="//span[contains(text(),'Opening Stocks New')]")
					private static WebElement  openingStocksNewVoucher;
					
					@FindBy(xpath="//*[@id='2038']/span")
					private static WebElement  materialRequisitionVoucher;
							
					@FindBy(xpath="//*[@id='2049']/span")
					private static WebElement  stockAdjustmentVoucher;
						
				@FindBy(xpath="//*[@id='164']/span")
				private static WebElement  holdAndUnholdStockVoucher;
				
				@FindBy(xpath="//*[@id='93']/span")
				private static WebElement  stockReconciliation;
				
				@FindBy(xpath="//*[@id='99']/span")
				private static WebElement  stockAllocation;
			
				
	    //Validation and Confirmation messages
		@FindBy(xpath="//div[@class='theme_color font-6']")
		public static WebElement errorMessage;
		 
		@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
		public static WebElement errorMessageCloseBtn;
		
		//Dash board Page
		@FindBy(xpath="//*[@id='dashName']")
	    private static WebElement labelDashboard ;
		
		@FindBy(xpath="//*[@id='Select_dash']")
		private static WebElement selectDashboard ;
			
		@FindBy(xpath="//*[@id='Dashboard_AddDash']")
	    private static WebElement newAddDashBoard;
		 
	    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
	    private static WebElement dashboardCustomizationSettings;
				
			   
			    
	    //Vouchers Settings Options
		@FindBy(xpath="//span[@id='updateButton']")
		private static WebElement  settings_updateBtn;
		
		@FindBy(xpath="//i[@class='icon-close icon-font6']")
		private static WebElement  settings_closeBtn;
						
			//Documents Tab
			@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
			private static WebElement  documentsTab;
			
			@FindBy(xpath="//li[@id='navigationtab1']")
			private static WebElement  documentsTabForMaterialReceiptNotes;
			
			@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
			private static WebElement  loadMastersBtn;
				
				@FindBy(xpath="//select[@id='doc_voucherDropDown']")
				private static WebElement  loadmasterDropDown;
				
				@FindBy(xpath="//button[@id='btnSelectDependMaster']")
				private static WebElement  selectAllBtn;
				
				@FindBy(xpath="//button[contains(text(),'Reset')]")
				private static WebElement  resetBtn;
				
				@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
				private static WebElement  okBtn;
				
				@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
				private static WebElement  deleteTagBtn;
				
				@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
				private static WebElement  addGroupBtn;
				
					@FindBy(xpath="//input[@id='doc_GroupName']")
					private static WebElement  groupNameTXt;
					
					@FindBy(xpath="//button[contains(text(),'Add')]")
					private static WebElement  addBtn;
					
					@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
					private static WebElement  cancelBtn;

				@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
				private static WebElement  deletegroupBtn;
				
				@FindBy(xpath="//input[@id='doc_title']")
				private static WebElement  titleTxt;
				
				@FindBy(xpath="//input[@id='doc_baseDocument']")
				private static WebElement  baseDocumentTxt;
				
				@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
				private static WebElement  accountDependencyTxt;
				
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
					private static WebElement  iExchangeAdjustmentGainACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
					private static WebElement  iExchangeAdjustmentLossACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
					private static WebElement  iPrimaryAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCity')]")
					private static WebElement  iCityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
					private static WebElement  iDeliverycityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBankAc')]")
					private static WebElement  iBankACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
					private static WebElement  iPDCDiscountedACChkBox;
							
				@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
				private static WebElement  itemDependencyTxt;
				
					@FindBy(xpath="//span[contains(text(),'Outlet__')]")
					private static WebElement  outletChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
					private static WebElement  iCostofShortageStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
					private static WebElement  iCostofExcessStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
					private static WebElement  iCostofSaleReturnACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
					private static WebElement  iPurchaseVarianceACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
					private static WebElement  iDefaultBaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
					private static WebElement  iDefaultSalesUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
					private static WebElement  iDefaultPurchaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
					private static WebElement  iCostOfIssueAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
					private static WebElement  iStocksAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
					private static WebElement  iSalesAccountChkBox;
					
					@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
					private static WebElement  otherdetails1Box;
					
					@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
					private static WebElement  replenishment1ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Reorder__')]")
					private static WebElement  reorderChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCategory')]")
					private static WebElement  iCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
					private static WebElement  iWIPAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Classification__')]")
					private static WebElement  classificationChkBox;
					
					@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
					private static WebElement  repelenishment2ChkBox;
					
					@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
					private static WebElement  otherDetails2ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBin')]")
					private static WebElement  iBinChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
					private static WebElement  iAlternateCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
					private static WebElement  iTaxCodeChkBox;
				
				@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
				private static WebElement  accountfilterDropdown;
				
				@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
				private static WebElement  itemfilterDropdown;
				
				
				// Documents Tab Grid Elements
				
			    // first row 
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
				private static WebElement  firstrow;
				
				@FindBy(xpath="//div[contains(text(),'Delete Row')]")
				private static WebElement  doc_deleterowBtn;
				
				@FindBy(xpath="//div[contains(text(),'Insert Row')]")
				private static WebElement  doc_insertRowBtn;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
				private static WebElement  masters1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
				private static WebElement  position1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
				private static WebElement  showDependency1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
				private static WebElement  group1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
				private static WebElement  filter1;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
				private static WebElement  mandatory1;
				
				
				// Second Row // Delete and Insert row are same
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
				private static WebElement  secondRow;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
				private static WebElement  masters2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
				private static WebElement  position2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
				private static WebElement  showDependency2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
				private static WebElement  group2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
				private static WebElement  filter2;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
				private static WebElement  mandatory2;
				
				// After clicking // Properties Changes which are same for all rows
				
				@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
				private static WebElement  masterDropDown;
				
				@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
				private static WebElement  positionDropdown;
				
				@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
				private static WebElement  showDependencyDropdown;
				
				@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
				private static WebElement  groupTxt;
				
				@FindBy(xpath="//select[@id='docFilter']")
				private static WebElement  filterDropdown;
				
				@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
				private static WebElement  mandatoryDropDown;
				
				
				
				
				//Financials Menu // Opening Balance Voucher Page
				
				@FindBy(xpath="//*[@id='60']/div")
				private static WebElement  financialsMenu; 
				
					@FindBy(xpath="//*[@id='61']/span")
					private static WebElement  financialsTransactionMenu;
					
					

						@FindBy(xpath="//*[@id='2001']/span")
						private static WebElement  cashAndBankMenu; 
						
				     		@FindBy(xpath="//*[@id='2002']/span")
							private static WebElement  receiptsVoucher;
							
							@FindBy(xpath="//*[@id='2003']/span")
							private static WebElement  paymentsVoucher;
							
							@FindBy(xpath="//*[@id='2004']/span")
							private static WebElement  pettyVoucher;
							
							@FindBy(xpath="//*[@id='2005']/span")
							private static WebElement  postDatedReceiptsVoucher;
										
							@FindBy(xpath="//*[@id='2006']/span")
							private static WebElement  postDatedPaymentsVoucher;
							
							@FindBy(xpath="//*[@id='108']/span")
							private static WebElement  defineChequeSeries;
							
							@FindBy(xpath="//*[@id='109']/span")
							private static WebElement  cancelCheque;				
			
						@FindBy(xpath="//*[@id='2007']/span")
						private static WebElement  financialsTransactionsPurchaseMenu;
						
						@FindBy(xpath="//*[@id='671']/span")
						private static WebElement  financialsTransactionAuthorizationReportMenu;
						
							@FindBy(xpath="//*[@id='2008']/span")
							private static WebElement  purchaseVoucher;
							
							@FindBy(xpath="//*[@id='DateOptions_']")
							private static WebElement  dateOptionDropdown;
							
							@FindBy(xpath="//*[@id='reportViewControls']/ul/li/span[4]")
							private static WebElement  reportOkBtn;
							
							@FindBy(xpath="//*[@id='2009']/span")
							private static WebElement  purchaseReturnsVoucher;
													
						@FindBy(xpath="//*[@id='2014']/span")
						private static WebElement  financialsTransactionsSalesMenu;
							
							@FindBy(xpath="//*[@id='2015']/span")
							private static WebElement  salesInvoicesVoucher;
							
							@FindBy(xpath="//*[@id='2016']/span")
							private static WebElement  salesReturnsVoucher;
							
							@FindBy(xpath="//a[@id='2060']/span")
							private static WebElement  salesInvoiceVATVoucher;
							
							
							
							//  Reports Elements
							
							@FindBy(xpath="(//tr[@id='trRender_0'])[1]/td")
							private static List<WebElement> reportsRow1List;
						  	
						  	@FindBy(xpath="(//tr[@id='trRender_1'])[1]/td")
							private static List<WebElement> reportsRow2List;
							
							@FindBy(xpath="(//tr[@id='trRender_2'])[1]/td")
							private static List<WebElement> reportsRow3List;
							
							@FindBy(xpath="(//tr[@id='trRender_3'])[1]/td")
							private static List<WebElement> reportsRow4List;
							
							@FindBy(xpath="(//tr[@id='trRender_4'])[1]/td")
							private static List<WebElement> reportsRow5List;
							
							@FindBy(xpath="(//tr[@id='trRender_5'])[1]/td")
							private static List<WebElement> reportsRow6List;
							
							@FindBy(xpath="(//tr[@id='trRender_6'])[1]/td")
							private static List<WebElement> reportsRow7List;
							
							@FindBy(xpath="(//tr[@id='trRender_7'])[1]/td")
							private static List<WebElement> reportsRow8List;
							
							
							
							
							/*@FindBy(xpath="//*[@id='2020']/span")
							private static WebElement  cashSales;
									
							@FindBy(xpath="//*[@id='2021']/span")
							private static WebElement  hirePurchaseSales;*/
						
						@FindBy(xpath="//*[@id='2023']/span")
						private static WebElement  financialsTransactionsJournalsMenu;
						
						    @FindBy(xpath="//*[@id='2032']/span")
							private static WebElement  journalsEntriesVoucher;
							
							@FindBy(xpath="//*[@id='2025']/span")
							private static WebElement  forexJVVoucher;
							
							@FindBy(xpath="//*[@id='2029']/span")
							private static WebElement  interdepartmentaljvVoucher;
							
							@FindBy(xpath="//*[@id='2024']/span")
							private static WebElement  oldJouranlEntriesVoucher;
							
							@FindBy(xpath="//*[@id='2026']/span")
							private static WebElement  debitNotesVoucher;
							
							@FindBy(xpath="//*[@id='2030']/span")
							private static WebElement  debitNotesLinewiseVoucher;
							
							@FindBy(xpath="//*[@id='2027']/span")
							private static WebElement  creditNotesVoucher;
							
							@FindBy(xpath="//*[@id='2031']/span")
							private static WebElement  creditNotesLinewiseVoucher;
							
							@FindBy(xpath="//*[@id='2028']/span")
							private static WebElement  openingBalancesVoucher;
							
							@FindBy(xpath="//*[@id='2046']/span")
							private static WebElement  fixedAssetsDepreciationVoucher;
						
						@FindBy(xpath="//*[@id='219']/span")
						private static WebElement  financialsTransactionsAutoPostingsMenu;
						
							@FindBy(xpath="//*[@id='77']/span")
							private static WebElement  recurringJournalVoucher;
							
							@FindBy(xpath="//*[@id='79']/span")
							private static WebElement  postRecurringJournal;
							
							@FindBy(xpath="//*[@id='92']/span")
							private static WebElement  recurringJournalTemplate;
							
							@FindBy(xpath="//*[@id='91']/span")
							private static WebElement  postInterest;
							
							@FindBy(xpath="//*[@id='90']/span")
							private static WebElement  convertMaturedPDCs;
							
							@FindBy(xpath="//*[@id='161']/span")
							private static WebElement assignPDCLimit;
							
							@FindBy(xpath="//*[@id='166']/span")
							private static WebElement  stockReplenishment;

					@FindBy(xpath="//*[@id='62']/span")
					private static WebElement  financialsCreditManagementMenu; 
					
						@FindBy(xpath="//*[@id='63']/span")
						private static WebElement  paymentTerms;
						
						@FindBy(xpath="//*[@id='64']/span")
						private static WebElement  financeTerms;
						
						@FindBy(xpath="//*[@id='65']/span")
						private static WebElement  reminderTerms;		
						
						@FindBy(xpath="//*[@id='89']/span")
						private static WebElement  sendReminder;
						
						@FindBy(xpath="//*[@id='217']/span")
						private static WebElement  delinquency;
						
							@FindBy(xpath="//*[@id='73']/span")
							private static WebElement  questionnarie;
							
							@FindBy(xpath="//*[@id='218']/span")
							private static WebElement  delinquencyMgmt;
							
						@FindBy(xpath="//*[@id='35']/span")
						private static WebElement  creidtApproval;
						
				    @FindBy(xpath="//*[@id='81']/span")
				    private static WebElement  financialsReportsMenu; 
				    
					    @FindBy(xpath="//*[@id='500']/span")
						private static WebElement  ledger;
			
						@FindBy(xpath="//*[@id='658']/span")
						private static WebElement  ledgerDetail;
			
						@FindBy(xpath="//*[@id='501']/span")
						private static WebElement  subLedger;
						
						@FindBy(xpath="//*[@id='82']/span")
						private static WebElement  cashAndBankBooksMenu;
						
							@FindBy(xpath="//*[@id='510']/span")
							private static WebElement  cashBookReport;
							
							@FindBy(xpath="//*[@id='511']/span")
							private static WebElement  bankBookReport;
							
							@FindBy(xpath="//*[@id='512']/span")
							private static WebElement  pettyCashBokReport;
							
							@FindBy(xpath="//*[@id='513']/span")
							private static WebElement  dayBookReport;
							
							@FindBy(xpath="//*[@id='83']/span")
							private static WebElement  bankReconciliationReport;
							
							@FindBy(xpath="//*[@id='84']/span")
							private static WebElement  bankReconciliationImport;
							
							@FindBy(xpath="//*[@id='85']/span")
							private static WebElement  customerVendorReconciliation;
						
							@FindBy(xpath="//*[@id='537']/span")
							private static WebElement  bankReconciliationStatement;
								
							@FindBy(xpath="//*[@id='162']/span")
							private static WebElement chequeDiscountingMenu;
						
						@FindBy(xpath="//*[@id='502']/span")
						private static WebElement  salesReportsMenu;
						
							@FindBy(xpath="//*[@id='503']/span")
							private static WebElement  salesRegisterReport;
			
							@FindBy(xpath="//*[@id='504']/span")
							private static WebElement  salesReturnRegisterReport;
							
							@FindBy(xpath="//*[@id='505']/span")
							private static WebElement summarySalesBookReport;
							
							@FindBy(xpath="//*[@id='628']/span")
							private static WebElement monthlySalesBookReport;
							
							@FindBy(xpath="//*[@id='629']/span")
							private static WebElement  topCustomersListReport;
						
						@FindBy(xpath="//*[@id='506']/span")
						private static WebElement  purchaseReportsMenu;
						
							@FindBy(xpath="//*[@id='507']/span")
							private static WebElement  purchaseRegisterReport;
							
							@FindBy(xpath="//*[@id='508']/span")
							private static WebElement  purchaseReturnRegisteReport;
							
							@FindBy(xpath="//*[@id='509']/span")
							private static WebElement  summaryPurchaseBookReport;
									
						@FindBy(xpath="//*[@id='514']/span")
						private static WebElement  registersReportMenu;
						
							@FindBy(xpath="//*[@id='516']/span")
							private static WebElement  openingBalanceRegisterReport;
							
							@FindBy(xpath="//*[@id='515']/span")
							private static WebElement journalEntriesRegisterReport;
							
							@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
							private static WebElement creditNoteRegisterReport;
							
							@FindBy(xpath="//*[@id='610']/span")
							private static WebElement  debitNoteRegisterReport;
							
							@FindBy(xpath="//*[@id='598']/span")
							private static WebElement  receiptsRegisterReport;
							
							@FindBy(xpath="//*[@id='599']/span")
							private static WebElement  paymentRegisterReport;
							
							@FindBy(xpath="//*[@id='518']/span")
							private static WebElement  pdcReceiptsRegisterReport;
							
							@FindBy(xpath="//*[@id='519']/span")
							private static WebElement pdcPaymentsRegisterReport;
							
							@FindBy(xpath="//*[@id='517']/span")
							private static WebElement  entryJournalRegisterMenu;
									
						@FindBy(xpath="//*[@id='523']/span")
						private static WebElement  salesAndPurchasesReportMenu;
						
							@FindBy(xpath="//*[@id='524']/span")
							private static WebElement  salesGroupedByCustomerReport;
							
							@FindBy(xpath="//*[@id='525']/span")
							private static WebElement  salesGroupedByProductReport;
							
							@FindBy(xpath="//*[@id='526']/span")
							private static WebElement  salesGroupedByDepartmentReport;
							
							@FindBy(xpath="//*[@id='527']/span")
							private static WebElement  purchasesGroupedByVendorReport;
							
							@FindBy(xpath="//*[@id='528']/span")
							private static WebElement  purchasesGroupedByProductReport;
							
							@FindBy(xpath="//*[@id='529']/span")
							private static WebElement  purchasesGroupedByDepartmentReport;		
						
						@FindBy(xpath="//*[@id='568']/span")
						private static WebElement  MiscellaneousAnalysisReportMenu;
						
							@FindBy(xpath="//*[@id='569']/span")
							private static WebElement  peakAndLowBalancesReport;
							
							@FindBy(xpath="//*[@id='570']/span")
							private static WebElement  comprativeAnalysisReport;
							
							@FindBy(xpath="//*[@id='571']/span")
							private static WebElement  transactionsTypeAnalysisReport;
							
							@FindBy(xpath="//*[@id='572']/span")
							private static WebElement  abcAnalysisReport;
							
							@FindBy(xpath="//*[@id='597']/span")
							private static WebElement  interestCalculationReport;
			
						@FindBy(xpath="//*[@id='536']/span")
						private static WebElement  mastersInformationMenu;
						
					     	@FindBy(xpath="//*[@id='538']/span")
							private static WebElement  masterInfoMenu;
							
							@FindBy(xpath="//*[@id='144']/span")
							private static WebElement  productLabelMenu;
							
							@FindBy(xpath="//*[@id='573']/span")
							private static WebElement  unitConversionMenu;
								
							@FindBy(xpath="//*[@id='147']/span")
							private static WebElement  skidDefinitionMenu;
											
						@FindBy(xpath="//*[@id='520']/span")
						private static WebElement  auditTrailMenu;
						
							@FindBy(xpath="//*[@id='521']/span")
							private static WebElement  auditTrailtransactionsReport;
							
							@FindBy(xpath="//*[@id='522']/span")
							private static WebElement  aAuditTrailloginsReport;
						
						@FindBy(xpath="//*[@id='204']/span")
						private static WebElement  accountQuery;
						
				    @FindBy(xpath="//*[@id='530']/span")
				    private static WebElement  financialsFinalAccountsMenu; 
				    
					    @FindBy(xpath="//*[@id='531']/span")
						private static WebElement trialBalanceReport;
								
						@FindBy(xpath="//*[@id='532']/span")
						private static WebElement profitandLossReport;
						
						@FindBy(xpath="//*[@id='533']/span")
						private static WebElement  tradingAccountReport;
						
						@FindBy(xpath="//*[@id='534']/span")
						private static WebElement  tradingandProfitAndLossReport;
						
						@FindBy(xpath="//*[@id='535']/span")
						private static WebElement  balanceSheetReport;				
						
						@FindBy(xpath="//*[@id='592']/span")
						private static WebElement  finalAccountSchedulesReport;
						
						@FindBy(xpath="//*[@id='593']/span")
						private static WebElement  fundFlowReport;
						
						@FindBy(xpath="//*[@id='594']/span")
						private static WebElement  cashFlowReport;
						
						@FindBy(xpath="//*[@id='252']/span")
						private static WebElement  cashFlowCalendarReport;
						
						@FindBy(xpath="//*[@id='595']/span")
						private static WebElement  cashFlowAnalysisReport;
						
						@FindBy(xpath="//*[@id='632']/span")
						private static WebElement  advanceCashFlowReport;
						
						@FindBy(xpath="//*[@id='630']/span")
						private static WebElement  incomeExpenseTrendsReport;
						
						@FindBy(xpath="//*[@id='655']/span")
						private static WebElement  receivablePayableReport;
					
					@FindBy(xpath="//*[@id='558']/span")
					private static WebElement  financialsReceivableAndPayableAnalysisMenu; 
					
						@FindBy(xpath="//*[@id='605']/span")
						private static WebElement customerDetailMenu;
						
							@FindBy(xpath="//*[@id='559']/span")
							private static WebElement  customerListingOfOutstandingBillsReport;
							
							@FindBy(xpath="//*[@id='560']/span")
							private static WebElement  customerStatementsReport;
							
							@FindBy(xpath="//*[@id='560']/span")
							private static WebElement  customerDueDateAnalysisReport;
							
							@FindBy(xpath="//*[@id='563']/span")
							private static WebElement  customerAgeingDetailsReport;
							
							@FindBy(xpath="//*[@id='564']/span")
							private static WebElement  customerDetailAgeingbyDueDateReport;
							
							@FindBy(xpath="//*[@id='566']/span")
							private static WebElement  customerOverdueAnalysisReport;
						
						@FindBy(xpath="//*[@id='607']/span")
						private static WebElement  customerSummaryMenu;
								
							@FindBy(xpath="//*[@id='562']/span")
							private static WebElement  customerAgeingSummaryMenu;
							
							@FindBy(xpath="//*[@id='565']/span")
							private static WebElement  customerSummaryAgeingByDueDateMenu;
							
							@FindBy(xpath="//*[@id='567']/span")
							private static WebElement  customerOverdueSummaryMenu;
							
							@FindBy(xpath="//*[@id='539']/span")
							private static WebElement  customerbillwiseSummaryMenu;	
						
						@FindBy(xpath="//*[@id='606']/span")
						private static WebElement  vendorDetailMenu;
						
							@FindBy(xpath="//*[@id='541']/span")
							private static WebElement  vendorListingoFOutstandingBillsReport;
								
							@FindBy(xpath="//*[@id='542']/span")
							private static WebElement  vendorStatementsReport;
							
							@FindBy(xpath="//*[@id='543']/span")
							private static WebElement  vendorDueDateAnalysisReport;
							
							@FindBy(xpath="//*[@id='545']/span")
							private static WebElement  vendorAgeingDetailsReport;
								
							@FindBy(xpath="//*[@id='546']/span")
							private static WebElement  vendorDetailVendorDetailAgeingByDueDateMenu;
						
							@FindBy(xpath="//*[@id='548']/span")
							private static WebElement  vendorOverdueAnalysisMenu;
							
						@FindBy(xpath="//*[@id='608']/span")
						private static WebElement  vendorSummaryMenu;
						
							@FindBy(xpath="//*[@id='544']/span")
							private static WebElement  vendorAgeingSummaryReport;
							
							@FindBy(xpath="//*[@id='547']/span")
							private static WebElement  vendorSummaryAgeingByDueDateReport;
							
							@FindBy(xpath="//*[@id='549']/span")
							private static WebElement  vendorOverdueSummaryReport;
							
							@FindBy(xpath="//*[@id='634']/span")
							private static WebElement  vendorbillWiseSummaryReport;
						
						@FindBy(xpath="//*[@id='75']/span")
						private static WebElement  letterofCredit;
						
						@FindBy(xpath="//*[@id='165']/span")
						private static WebElement  releaseLetterofCredit;
				
					@FindBy(xpath="//*[@id='3301']/span")
					private static WebElement  financialsBudgetMenu; 
					
						@FindBy(xpath="//*[@id='3302']/span")
						private static WebElement  defineBudgetReport;
						
						@FindBy(xpath="//*[@id='3303']/span")
						private static WebElement  confirmBudgetReport;
						
						@FindBy(xpath="//*[@id='3304']/span")
						private static WebElement  reviseBudgetMenu;
						
							@FindBy(xpath="//*[@id='3305']/span")
							private static WebElement  appendBudget;
							
							@FindBy(xpath="//*[@id='3306']/span")
							private static WebElement  addORReduceBudget;
							
							@FindBy(xpath="//*[@id='3307']/span")
							private static WebElement  transferBudget;
						
						@FindBy(xpath="//*[@id='3309']/span")
						private static WebElement  approveBudgetReport;
						
						@FindBy(xpath="//*[@id='3310']/span")
						private static WebElement  rejectedBudgetReport;
						
						@FindBy(xpath="//*[@id='3321']/span")
						private static WebElement  budgetReportsMenu;
						
							@FindBy(xpath="//*[@id='666']/span")
							private static WebElement  advancedBudgetReportMenu;
							
							@FindBy(xpath="//*[@id='669']/span")
							private static WebElement  revisedBudgetReportMenu;
					
							
					@FindBy(xpath="//*[@id='3311']/span")
					private static WebElement  financialsOnlinePaymentsMenu;   
					
						@FindBy(xpath="//*[@id='3312']/span")
						private static WebElement  onlineBankRegistrationMenu;
						
						@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[2]/a/span")
						private static WebElement  issuePaymentToBankMenu;
						
						@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[3]/a/span")
						private static WebElement  reconcilePaymentsMenu;
						
						@FindBy(xpath="//*[@id='3315']/span")
						private static WebElement  onlineBankReconcilationMenu;
						
						@FindBy(xpath="//*[@id='3317']/span")
						private static WebElement  bankStatementMenu;	
					    
						@FindBy(xpath="//*[@id='dashName']")
						private static WebElement dashboard;

						 //Starting Of PurchaseVoucher 
					    
						@FindBy(xpath="//span[contains(text(),'Purchase Vouchers N')]")
						private static WebElement  purchaseVoucherNew;

						
						@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
						private static WebElement  homePageAllVouchersView;
						
						@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
						private static WebElement  homePagePendingAuthorizationView;
						
						@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
						private static WebElement  homePagePendingOrdersLinks;
						
						@FindBy(xpath = "//ul[@id='navigation_menu']/li[2]/ul/li/a/span")
						private static List<WebElement> financialsMenusList;
						
						
						@FindBy(xpath="//span[@id='btnPick']")
						private static WebElement  billRefPickIcon;		
						
						@FindBy(xpath="//input[@id='txtNewReference']")
						private static WebElement newReferenceTxt;
						
						@FindBy(xpath="//span[@id='btnOk']")
						private static WebElement  billRefOkBtn;		
						
						@FindBy(xpath="//span[@id='btnCancel']")
						private static WebElement  billRefcancel;	
				
			    
		
				
		 //Views Tab
		@FindBy(xpath="//span[@class='icon-views'")
		private static WebElement  viewsTab;
			
		//Export Fields 
		@FindBy(xpath="//span[contains(text(),'Export Fields')]")
		private static WebElement exportFieldsTab;
			
		//Triggers
		@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
		private static WebElement  triggersTab;	
			
		//Document Numbering
		@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
		private static WebElement  documentNumberingTab;
			
		//Hire Purchase	
		@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
		private static WebElement hirePurchasetab;
			
		//Reports Tab	
		@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
		private static WebElement  reportsTab;	
		
		//Schemes
		@FindBy(xpath="//span[contains(text(),'Schemes')]")
		private static WebElement schemestab;	
		
		
		// Bin Inward Elements
		
			@FindBy (xpath="//input[@id='id_bins_totalquantity']")
			private static WebElement binTotalQty;
			
			@FindBy (xpath="//div[@class='modal-body']//div[4]")
			private static WebElement binBaseUOM;
			
			@FindBy (xpath="//input[@id='srch_bin']")
			private static WebElement binSearchTxt;
			
			
			
			@FindBy (xpath="//*[@id='TransactionNewBin']/div/div/div[2]/div[1]/div[7]/button")
			private static WebElement binSearchBtn; 
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
			private static WebElement  binselect1stRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
			private static WebElement  binselect1stRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
			private static WebElement  binselect1stRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
			private static WebElement  binselect1stRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
			private static WebElement  binselect1stRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
			private static WebElement  binselect1stRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
			private static WebElement  binselect1stRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
			private static WebElement  binselect1stRow_8thColumn;
			
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
			private static WebElement  binselect2ndRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
			private static WebElement  binselect2ndRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
			private static WebElement  binselect2ndRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
			private static WebElement  binselect2ndRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
			private static WebElement  binselect2ndRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
			private static WebElement  binselect2ndRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
			private static WebElement  binselect2ndRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
			private static WebElement  binselect2ndRow_8thColumn;
			
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
			private static WebElement  binselect3rdRow_1stColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
			private static WebElement  binselect3rdRow_2ndColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
			private static WebElement  binselect3rdRow_3rdColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
			private static WebElement  binselect3rdRow_4thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
			private static WebElement  binselect3rdRow_5thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
			private static WebElement  binselect3rdRow_6thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
			private static WebElement  binselect3rdRow_7thColumn;
			
			@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
			private static WebElement  binselect3rdRow_8thColumn;
			
			
			@FindBy(xpath="//span[@class='icon-sum']")
			private static WebElement  binRowSum;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
			private static WebElement  binRowSum_2ndColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
			private static WebElement  binSelect4htRow_3rdColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
			private static WebElement  binRowSum_4thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
			private static WebElement  binRowSum_5thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
			private static WebElement  binRowSum_6thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
			private static WebElement  binRowSum_7thColumn;
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
			private static WebElement  binRowSum_8thColumn;
			
			
			@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
			private static WebElement  binSumInward;
			
			
			
			@FindBy (xpath="//input[@id='id_bins_balance']")
			private static WebElement binBalanceTxt;
			
			@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
			private static WebElement binAlternateCategoryCheckBtn;
			
			@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
			private static WebElement binAutoAllocateBtn;
			
			@FindBy (xpath="//span[@class='icon-pick icon-font4']")
			private static WebElement binPickBtn; 
			
			@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
			private static WebElement binAutoAllocateWithinGroupBtn;
			
			@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
			private static WebElement binOkBtn;
			
			@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
			private static WebElement binCancelBtn;

			
			// RMA POpup Window
			@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
			private static WebElement rmaScreenTitle;
			
			@FindBy (xpath="//input[@id='txtSerialNo']")
			private static WebElement rmaSerialNumberTxtField;

			@FindBy (xpath="//input[@id='txtQuantity']")
			private static WebElement rmaQuantityTxtField;
			
			@FindBy (xpath="//div[@id='img_add']//span")
			private static WebElement rmaAddBtn;
				
			@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
			private static WebElement rmaNumberofItemsLabel;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
			private static WebElement rmaTableHeadingRMA;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
			private static WebElement rmaTableHeadingDocumentNo;
			
			@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
			private static WebElement rmaTableHeadingDocumentDate;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
			private static WebElement rmaClearBtn;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
			private static WebElement rmaOkBtn;
			
			@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
			private static WebElement rmaCancelBtn;
			
			@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
			private static WebElement rmaCloseBtn;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
			private static WebElement rmaTableRow1Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
			private static WebElement rmaTableRow2Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
			private static WebElement rmaTableRow3Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
			private static WebElement rmaTableRow4Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
			private static WebElement rmaTableRow5Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
			private static WebElement rmaTableRow6Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
			private static WebElement rmaTableRow7Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
			private static WebElement rmaTableRow8Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
			private static WebElement rmaTableRow9Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
			private static WebElement rmaTableRow10Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
			private static WebElement rmaTableRow11Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
			private static WebElement rmaTableRow12Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
			private static WebElement rmaTableRow13Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
			private static WebElement rmaTableRow14Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
			private static WebElement rmaTableRow15Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
			private static WebElement rmaTableRow16Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
			private static WebElement rmaTableRow17Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
			private static WebElement rmaTableRow18Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
			private static WebElement rmaTableRow19Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
			private static WebElement rmaTableRow20Column1;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
			private static WebElement rmaTableRow1Column2;
			
			@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
			private static WebElement rmaTableRow1Column3;
			
			@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
			private static WebElement rmaExpansionBtn;
			
			
			//----------------------------------------------------------------------------------------------------------    
		    // Edit Screen Tab     
					    
		    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
		   	private static WebElement  editScreenTab; 
			
			@FindBy(xpath="//i[@class='icon-add icon-font7']")
			private static WebElement editScreenaddBtn;

			@FindBy(xpath="//a[contains(text(),'Field Details')]")
			private static WebElement editScreenFieldDetailsTab;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
			private static WebElement  editScreenCaptionTxt;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
			private static WebElement  editScreenCaptionDataTypeDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
			private static WebElement editScreenDefaultValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
			private static WebElement editScreenNoOfDecimalsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
			private static WebElement editScreenToolTipTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
			private static WebElement editScreenBannerTextTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
			private static WebElement editScreenMinimunValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
			private static WebElement editScreenMaximunValueTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
			private static WebElement editScreenAddFieldsBehaviourDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
			private static WebElement  editScreenAddBehaviourformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
			private static WebElement  editScreenAddBehaviourFormulaokBtn;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			private static WebElement editScreenPreloadTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			private static WebElement editScreenRestrictformulaTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
			private static WebElement editScreenRoundOffsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
			private static WebElement editScreenRoundOffToTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
			private static WebElement editScreenRestrictMessageTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
			private static WebElement editScreenAddToNetDropdown;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
			private static WebElement editScreenAddToStockDropDown;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
			private static WebElement editScreenpositionDropdown;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
			private static WebElement editScreenColumnWidthTxt;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			private static WebElement editScreenValueInBaseCurrencyChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			private static WebElement editScreenHideFromSummaryChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
			private static WebElement editScreenPostToAccountChkBox;  
		 
			@FindBy(xpath="//input[@id='acc1-1']")
			private static WebElement editScreenAccount1Radio;  
					   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
			private static WebElement editScreenAccount1Txt;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
			private static WebElement editScreenAccount1ExpandBtn;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
			private static WebElement editScreenAccount1SettingsBtn;  
					   
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
				private static WebElement editScreenAccount1Container;  
			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
				private static WebElement editScreenAccount1StandardFiledsBtn;  
								    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
					private static WebElement editScreenAccount1StandardFiledsDropdown;  
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
					private static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
				    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
					private static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
					private static WebElement editScreenAccount1StandardFiledsWidthTxt;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					private static WebElement editScreenAccount1StandardFiledsokBtn;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[4]")
					private static WebElement editScreenAccount1StandardFiledscancelBtn;  
								    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
				private static WebElement editScreenAccount1deleteColumnBtn;
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
			   	private static WebElement editScreenAccount1okBtn;  
			       
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
			   	private static WebElement editScreenAccount1cancelBtn;
					
			@FindBy(xpath="//input[@id='acc2-2']")
			private static WebElement editScreenAccount2Radio;  
			    
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
			private static WebElement editScreenAccount2Txt;  
			    
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
			private static WebElement editScreenAccount2ExpandBtn;
		  
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
		  	private static WebElement editScreenAccount2SettingsBtn;  
					      
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
				private static WebElement editScreenAccount2Container;  
			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
				private static WebElement editScreenAccount2StandardFiledsBtn;  
					  			    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
					private static WebElement editScreenAccount2StandardFiledsDropdown;  
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
					private static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
				    
				    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
					private static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
				    
				    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
					private static WebElement editScreenAccount2StandardFiledsWidthTxt;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					private static WebElement editScreenAccount2StandardFiledsokBtn;  
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[4]")
					private static WebElement editScreenAccount2StandardFiledscancelBtn;  
					  			    
			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
				private static WebElement editScreenAccount2deleteColumnBtn;
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
			   	private static WebElement editScreenAccount2okBtn;  
			       
			       @FindBy(xpath="//section[@id='page_Content']//input[4]")
			   	private static WebElement editScreenAccount2cancelBtn;
		   
		   @FindBy(xpath="//input[@id='acc1-3']")
		   private static WebElement editScreenAccount1VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_1Var']")
		   private static WebElement editScreenAccount1VariableTxt;
		   
		   @FindBy(xpath="//input[@id='acc2-4']")
		   private static WebElement editScreenAccount2VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_2Var']")
		   private static WebElement editScreenAccount2VariableTxt;
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
		   private static WebElement editScreenRegularExpTxt; 
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
		   private static WebElement editScreenerrorMessageTxt; 

		 // properties  
		   
		  @FindBy(xpath="//a[contains(text(),'Properties')]")
		  private static WebElement editScreenPropertiesTab;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
		  private static WebElement editScreenauditTrailChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
		  private static WebElement editScreencantExportChkBox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
		  private static WebElement editScreencantImportChkbox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
		  private static WebElement editScreenhiddenChkbox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
		  private static WebElement editScreenmandatorychkBox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
		  private static WebElement editScreennotAvailableForReportsChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
		  private static WebElement editScreenreadOnlyChkBox;  
		 
		     
		  @FindBy(xpath="//span[contains(text(),'Apply')]")
		  private static WebElement editScreenApplyBtn;  
		     
		  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
		  private static WebElement editScreencloseBtn;  
		  

		 
		  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
		  private static WebElement editScreenExternalModulesTab; 
					
			// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
		    // External Functions(External Fields) Changes From Screen to Screen
		
			// Formatting Tab
					  
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
		    private static WebElement editScreenformattingTab;

			@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
		    private static WebElement editScreenFontFamilyDropdown;
			
		    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
		    private static WebElement editScreenFontStyleDropdown;

		    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
		    private static WebElement editScreenFontWeightDropdown;

			@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenFontSizeDropdown;
			
			@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenForeColourDropdown;
			
			@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenBackColourDropdown;
			
			@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenBaseLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenOverLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement EditScreenStrikeThroughCheckbox;
			
			@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenUnderlineCheckbox;
			
			@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
			private static WebElement editScreenFontPreviewTxt;
			
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
			private static WebElement editScreenenableFontChkbox;
					
			  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
			  private static WebElement editScreenLoadFieldsBtn;  
			     
			  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
			  private static WebElement editScreenLoadFieldsDropdown;  
			     
			  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
			  private static WebElement editScreenselectAllBtn;  
			  
			  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
			  private static WebElement editScreenokBtn;  
			     
			  @FindBy(xpath="//input[@id='searchlayout2']")
			  private static WebElement editScreenSearchTxt;  
			     
			  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
			  private static WebElement editScreenPreviousBtn;  
			     
			  @FindBy(xpath="//button[@id='btnEditScreenNext']")
			  private static WebElement editScreenNextBtn;  
			  
			  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
				private static WebElement editScreenRatePreloadLabel;
			  
			  @FindBy(xpath="//select[@id='cmbBehaviour']")
			  private static WebElement editScreenBehaviourDropdown;
			  
			  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			  private static WebElement editScreenQuantityPreloadedTxt;
			  	  
			  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			  private static WebElement  formulaTxt;
				
			  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
			  private static WebElement  expandeFormula;
						
		     // Grid Elements 
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
			private static WebElement  editScreenTransactionExpandBtn;
					
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
				private static WebElement  editScreenQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
				private static WebElement  editScreenqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
				private static WebElement  editScreenRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
				private static WebElement  editScreenrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
				private static WebElement  editScreenAlternateQty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
				private static WebElement  editScreenqtya;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
				private static WebElement  editScreengrossAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
				private static WebElement  editScreengr;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
				private static WebElement  editScreenStockValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
				private static WebElement  editScreenstkv;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
				private static WebElement  editScreenAccount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
				private static WebElement  EditScreenacc;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
				private static WebElement  editScreenAccount2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
				private static WebElement  editScreenacc2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
				private static WebElement  editScreenExchangeRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
				private static WebElement  editScreenexrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
				private static WebElement  editScreenqtyinBaseUnit;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
				private static WebElement  editScreenqtyb;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
				private static WebElement  editScreenCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
				private static WebElement  editScreencrn;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
				private static WebElement  editScreenValueOfThetagMasterIDofTheTag;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
				private static WebElement  editScreentgval;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
				private static WebElement  editScreenNetAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
				private static WebElement  EditScreennet;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
				private static WebElement  editScreenNetAmountInOriginalCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
				private static WebElement  editScreenneto;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
				private static WebElement  editScreenTotalQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
				private static WebElement  editScreentqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
				private static WebElement  editScreenTotalGross;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
				private static WebElement  editScreentgr;
								
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
			private static WebElement  screenFiledExpandBtn;
					
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
				private static WebElement  mrnQtyInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
				private static WebElement  sb1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
				private static WebElement  mrnQtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
				private static WebElement  sbo1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
				private static WebElement  qtyBalancedInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
				private static WebElement  sb2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
				private static WebElement  qtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
				private static WebElement  sbO2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
				private static WebElement  averagerateInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
				private static WebElement  sb3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
				private static WebElement  avreageRateCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
				private static WebElement  sbO3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
				private static WebElement  addValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
				private static WebElement  sb4;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
				private static WebElement  addValueInputCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
				private static WebElement  sbO4;
					
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
			private static WebElement  layoutFieldExpandBtn;
			
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
				private static WebElement  appropriateBasedOnInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
				private static WebElement  lh0;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
				private static WebElement  additionalValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
				private static WebElement  lh1;
								
		    //Grid Completed
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			private static WebElement  editScreenqtyFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
			private static WebElement  editScreenqtyPlusBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
			private static WebElement  editScreenqtyMinusBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
			private static WebElement  editScreenqtyDivideBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
			private static WebElement  editScreenqtyMultiplyBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
			private static WebElement  editScreenqtyBrackets1Btn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
			private static WebElement  editScreenqtyBrackets2Btn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
			private static WebElement  editScreenqtyTildeBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
			private static WebElement  editScreenqtyAndBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
			private static WebElement  editScreenqtyPercentBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
			private static WebElement  editScreenqtySquarebracketBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
			private static WebElement  editScreenqtyVerticalBarBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
			private static WebElement  editScreenqtyBackSlashBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
			private static WebElement  editScreenqtyLessThanbtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
			private static WebElement  editScreenqtyGreaterThanBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
			private static WebElement  editScreenqtyExclamationBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
			private static WebElement  editScreenqtyEqualBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
			private static WebElement  editScreenqtyQuestionBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
			private static WebElement  editScreenqtyCaretBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
			private static WebElement  editScreenqtyDateDiffBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
			private static WebElement  editScreenqtyCondBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
			private static WebElement  editScreenqtyMinBtn;
			
			@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
			private static WebElement  editScreenqtyMaxBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			private static WebElement  editScreenqtyConditionokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			private static WebElement  editScreenqtyConditioncancelBtn;
					
					
			@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
			private static WebElement  editScreenformulaTxt;
			
			
			// CustomizeGrid
			
			@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
			private static WebElement editScreencustomizeGridBtn;  
			  
			@FindBy(xpath="//span[contains(text(),'Apportion')")
			private static WebElement editScreenApportionBtn;
			     
			@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
			private static WebElement editScreenAuditTrialBtn;  
			    
			@FindBy(xpath="//span[contains(text(),'Back color')]")
			private static WebElement editScreenbackColorBtn;  
			     
			@FindBy(xpath="//span[contains(text(),'Banner text')]")
			private static WebElement editScreenbannerTextBtn;  
			 
			  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
			  private static WebElement editScreencannotBeExportedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
			  private static WebElement editScreencannotBeImportedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Column Span')]")
			  private static WebElement editScreencolumnSpanBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
			  private static WebElement editScreencopyFromParentBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'DataType')]")
			  private static WebElement editScreendataTypeBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Default Value')]")
			  private static WebElement editScreenDefaultValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Error message')]")
			  private static WebElement editScreenerrorMessageBtn;  
			 
			  @FindBy(xpath="//span[contains(text(),'External module attached')]")
			  private static WebElement editScreenExternalModuleAttachedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Field Order')]")
			  private static WebElement editScreenFilterOrderBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Font')]")
			  private static WebElement editScreenFontBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Group Name')]")
			  private static WebElement editScreengroupNameBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
			  private static WebElement editScreenHideLeftPanelBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Information Field')]")
			  private static WebElement editScreenInformationFieldBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
			  private static WebElement editScreenMandatoryBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
			  private static WebElement editScreenMassupdateBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
			  private static WebElement editScreenMaximumValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
			  private static WebElement editScreenMergerFieldBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
			  private static WebElement editScreenMinimumValueBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
			  private static WebElement editScreenNoOfDecimalsBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
			  private static WebElement editScreenNotAvailableForReportsBtn; 
			     
			  @FindBy(xpath="//span[contains(text(),'Read Only')]")
			  private static WebElement editScreenReadOnlyBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
			  private static WebElement editScreenRegularExpressionBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
			  private static WebElement editScreenRestrictFormulaBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
			  private static WebElement editScreenRestrictMessageBtn;  
			  
			  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
			  private static WebElement editScreenRoundsOffsBtn;  
			
			  @FindBy(xpath="//span[contains(text(),'Row Span')]")
			  private static WebElement editScreenRowSpanBtn; 
			     
			  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
			  private static WebElement editScreenRuleAttachedBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
			  private static WebElement editScreenToolTipBtn;  
			     
			  @FindBy(xpath="//span[contains(text(),'Variable name')]")
			  private static WebElement editScreenVariableNameBtn;  
			 
			  
			  
			  
			
			 // Body Tab 
			  
			  @FindBy(xpath="//a[contains(text(),'Body')]")
			  private static WebElement  editScreenBodyTab; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody1stRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody1stRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody2ndRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody2ndRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody3rdRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody3rdRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody4thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody4thRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody5thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody5thRowDeleteBtn;
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenBody6thRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenBody6thRowDeleteBtn;
			  
			  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
			  private static WebElement  editScreenBodyUpArrowBtn; 
			
			  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
			  private static WebElement  editScreenBodyDownArrowBtn;
							
			  // Footer Tab
			  
			  @FindBy(xpath="//a[contains(text(),'Footer')]")
			  private static WebElement  editScreenFooterTab;  
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenFooter1stRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenFooter1stRowDeleteBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
			  private static WebElement  editScreenFooter2ndRowEditBtn; 
			  
			  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
			  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
			  
			  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
			  private static WebElement  editScreenFooterUpArrowBtn; 
			
			  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
			  private static WebElement  editScreenFooterDownArrowBtn; 
			  
			  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
				private static WebElement qtyPreloadedLabel;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
				private static WebElement qtyPreloadedTxt;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
				private static WebElement qtyPreloadedformulaTxt;
				
				@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
				private static WebElement qtyPreloadedFormulaSearchTxt;
				
				@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
				private static WebElement qtyPreloadedFormulaokBtn;
				
				@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
				private static WebElement qtyPreloadedFormulacancelBtn;


				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
				private static WebElement editScreenLoadFields1stChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
				private static WebElement editScreenLoadFields2ndChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
				private static WebElement editScreenLoadFields3rdChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
				private static WebElement editScreenLoadFields4thChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
				private static WebElement editScreenLoadFields5hChkBox;
				
				@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
				private static WebElement editScreenLoadFields6thChkBox;
				
				@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
				private static WebElement  preloadformulaTxt;
				
				@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
				private static WebElement  preloadFormulaSearchTxt;
				
				@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
				private static WebElement  preloadFormulaokBtn;
					
				@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
				private static WebElement  preloadFormulacancelBtn;
				
				
				@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
				private static WebElement  editScreenFooter1stRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
				private static WebElement  editScreenFooter2ndRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
				private static WebElement  editScreenbody1stRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
				private static WebElement  editScreenbody2ndRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
				private static WebElement  editScreenbody3rdRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
				private static WebElement  editScreenbody4thRowCaption;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
				private static WebElement  editScreenbody5thRowCaption;
				
				
				
				// Add To Stock Status
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
				private static WebElement  editScreenbody1stRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
				private static WebElement  editScreenbody2ndRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
				private static WebElement  editScreenbody3rdRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
				private static WebElement  editScreenbody4thRowAddtoStock;
				
				@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
				private static WebElement  editScreenbody5thRowAddtoStock;			
				
			// Suspend Status Of Entry Page
			@FindBy(xpath="//tr[1]//td[11]")
			private static WebElement suspendStatusRow1;
		
		//User Name Display
		/*@FindBy(xpath="/html/body/section/div[2]/header/nav/div/ul/li[6]/a/span")
		private static WebElement userNameDisplay;

		@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
		private static WebElement companyName;

		@FindBy(xpath="//*[@id='companyLogo']")
		private static WebElement companyLogo;*/

	    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
		private static WebElement noIn;
	    
	    /*@FindBy(xpath="//input[@id='donotshow']")
		private static WebElement doNotShowCheckbox;
	    
	    @FindBy(xpath="//span[@class='pull-right']")
		private static WebElement closeBtnInDemoPopupScreen;*/
	    
	    
	    // Inentory Menu 
	    
	    @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
	    private static WebElement  invTransactionsMenu; 
	    
	    @FindBy(xpath="//a[@id='139']//span[contains(text(),'Purchases')]")
	    private static WebElement  invTransPurchasesMenu; 
	    
	    @FindBy(xpath="//a[@id='140']//span[contains(text(),'Sales')]")
	    private static WebElement  invTransSalesMenu; 
	    
	    @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
	    private static WebElement  invTransStocksMenu; 
	    
	   
		
		// Home Menu
		@FindBy(xpath = "//*[@id='1']/div/span")
		public static WebElement homeMenu;

		//Financial Menu
		@FindBy (xpath="//span[@class='icon-financial icon-font1']")
		private static WebElement financialMenu;
		
		//Fixed Assets Menu
		@FindBy (xpath="//span[@class='icon-assets icon-font1']")
		private static WebElement fixedAssetsMenu;
		
		//Production Menu
		@FindBy (xpath="//span[@class='icon-production icon-font1']")
		private static WebElement productionMenu;
		
		//Point Of Sale Menu
		@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
		private static WebElement pointOfSaleMenu;
		
		//Quality Of Control Menu
		@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
		private static WebElement qualityControlMenu;
		
		//Settings Menu
		@FindBy (xpath="//span[@class='icon-settings icon-font1']")
		private static WebElement SettingsMenu;
		
		
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
		private static WebElement  pendingAuthorizationPurchases;
		
		@FindBy(xpath="//tr[@id='trRender_1']//td//input")
		private static WebElement  voucherHomeRow1ChkBox;
		
		@FindBy(xpath="//tr[@id='trRender_2']//td//input")
		private static WebElement  voucherHomeRow2ChkBox;
		
		
		@FindBy(xpath="//i[@class='icon-alerts-1 icon-font5']")   
		private static WebElement  voucherHomePageAlertBtn;
		
		@FindBy(xpath="//*[contains(text(),'Transactions (1)')]")
		private static WebElement  voucherHomePageAlertTransactions;
		
		@FindBy(xpath="//*[@id='769']/span")
		private static WebElement  voucherHomePageAlertPurchaseVoucherN;
		
		@FindBy(xpath="//*[text()='Alerts TemplateTransaction Authorization']")
		private static WebElement  voucherHomePageAlertsTemplateTransactionAuthorization;
		
		@FindBy(xpath="(//div[@class='col-xs-12 col-sm-4 col-md-5'])[2]")
		private static WebElement  voucherInfoSideBarAuthorizationStatus;
		
		
		
		
		
		
		
			
		@FindBy(xpath="//textarea[@id='id_transaction_authorization_remark']")
		private static WebElement  authorizePopupTextArea;
						
		@FindBy(xpath="//input[@id='id_transaction_authorization_remark_popup_ok']")
		private static WebElement  authorizePopupOkBtn;
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_authorization_remark_popup_ok']")
		private static WebElement  authorizePopupOkBtnEntryPage;
		
		@FindBy(xpath="//div[@id='id_transaction_homeview_authorization_remarkpopup_container']//input[2]")
		private static WebElement  authorizePopupCancelBtn;
		
		
		// Login Page
		@FindBy(xpath = "//*[@id='txtUsername']")	
		private static WebElement username;
		
		
		
		//Consume the links through CTRL + L in linked voucher
		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		private static WebElement workFlowExpandBtn;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_dropdown']")
		private static WebElement  workFlowDropdown;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchon']")
		private static WebElement  searchOnDropdownCL;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchtype']")
		private static WebElement  containingDropdownCL;
				
		@FindBy(xpath="//input[@id='id_transactionentry_workflow_search_input']")
		private static WebElement  workFlowSearchTxtCL;

		@FindBy(xpath="//div[@id='id_transaction_entry_workflow_control_area2']//td[4]")
		private static WebElement  workFlowCustomizeBtnCL;

		@FindBy(xpath="//span[@class='icon-ok icon-font7']")
		private static WebElement  workFlowOkBtnCL;

		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		private static WebElement  workFlowMinimizeBtnCL;

		@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_control_heading_ctrl_1']")
		private static WebElement  workFlowHeaderChkBoxCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_6']//div[contains(text(),'Voucher No')]")
		private static WebElement  workFlowHeaderVoucherNoCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_7']//div[contains(text(),'Date')]")
		private static WebElement  workFlowHeaderDateCL;

		@FindBy(xpath="//div[contains(text(),'Name')]")
		private static WebElement  workFlowHeaderNameCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_9']//div[contains(text(),'Quantity')]")
		private static WebElement  workFlowHeaderQtyCL;

		@FindBy(xpath="//div[contains(text(),'Suspended')]")
		private static WebElement  workFlowHeaderSuspendCL;

		//1 Row CRTL + L

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr[1]/td[2]/input")
		private static WebElement workFlowRow1ChkBoxCL;

		/*@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-6']")
		private static WebElement  workFlowRow1Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-7']")
		private static WebElement  workFlowRow1Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-8']")
		private static WebElement  workFlowRow1Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-9']")
		private static WebElement  workFlowRow1Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-10']")
		private static WebElement  workFlowRow1Column5CL;*/


		//2 Row CRTL + L

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr[2]/td[2]/input")
		private static WebElement workFlowRow2ChkBoxCL;

		/*@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-6']")
		private static WebElement  workFlowRow2Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-7']")
		private static WebElement  workFlowRow2Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-8']")
		private static WebElement  workFlowRow2Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-9']")
		private static WebElement  workFlowRow2Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-10']")
		private static WebElement  workFlowRow2Column5CL;*/
		
		@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']")
		private static WebElement  workflowTableBody;
	
		
		@FindBy(xpath="//input[@id='id_header_4']")
		private static WebElement  newCashBankAccountTxt;
		
		
		
		
		@FindBy(xpath="//*[@id='lblAccount']")
		private static WebElement  billRefPartyName;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
		private static List<WebElement> billRefAdjustBillsGrid;
		
		@FindBy(xpath="//tbody[@id='id_Adjustment_Grid_body']")
		private static WebElement  billRefAdjustBillsTable;
		

		 //Bill Reference Screen 	
		

		@FindBy(xpath="//input[@id='txtNewReference']")
		private static WebElement  billRefNewReferenceTxt;
		
		@FindBy(xpath="//input[@id='txtOnAccount']")
		private static WebElement  billRefTxtOnAccount;		
			
		@FindBy(xpath="//input[@id='Searchtxt']")
		private static WebElement  billRefSearchTxt;		
		
		@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
		private static WebElement  billRefNewReferenceDropdown;		
		
		@FindBy(xpath="//select[@id='cbmShowBills']")
		private static WebElement  billRefShowBillsDropdown;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
		private static WebElement  billRefGridHeaderDueDate;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
		private static WebElement  billRefGridHeaderCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
		private static WebElement  billRefGridHeaderOrginalAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
		private static WebElement  billRefGridHeaderBalanceAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
		private static WebElement  billRefGridHeaderAdjustmentAmt;		
		
		@FindBy(xpath="//div[contains(text(),'Native Currency')]")
		private static WebElement  billRefGridHeaderNativeCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
		private static WebElement  billRefGridHeaderNarration;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
		private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
		private static WebElement  billRefGridFirstRow;	
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
		private static WebElement  billRefGridFirstRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
		private static WebElement  billRefGridSecondRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
		private static WebElement  billRefGridThirdRowChkbox;		
		
		/*@FindBy(xpath="//tbody[@id='id_Adjustment_Grid_body']//td[13]")
		private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
		*/             
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[4]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[13]")
		private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[4]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[2]/td[13]")
		private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
		private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
		private static WebElement  billRefGridFirstNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
		private static WebElement  billRefGridSecondNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
		private static WebElement  billRefGridThirdNarrationTxt;		
		
		@FindBy(xpath="//input[@id='id_Narration']")
		private static WebElement  narrationToWrite;		
		
		@FindBy(xpath="//input[@id='id_limit']")
		private static WebElement  adjustAmtToWrite;		
		
		@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
		private static WebElement  billRefPaymentsBillReferenceLabel;		
		
		@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
		private static WebElement  billRefAdjustOnFIFOBtn;		
		
		/*@FindBy(xpath="//span[@id='btnPick']")
		private static WebElement  billRefPickIcon;		
		
		@FindBy(xpath="//span[@id='btnOk']")
		private static WebElement  billRefOkBtn;		
		
		@FindBy(xpath="//span[@id='btnCancel']")
		private static WebElement  billRefcancel;	*/	
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		private static WebElement  billRefSummatyValueNet;		
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
		private static WebElement  billRefGridVendorRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
		private static WebElement  billRefGridVendorAmtRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
		private static WebElement  billRefGridVendorRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
		private static WebElement  billRefGridVendorAmtRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
		private static WebElement  billRefGridVendorRow3;
		
		@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
		private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
				
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		private static WebElement transactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		private static WebElement baseCurrency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
		private static WebElement localCurrencyDhs;
		
		@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
		private static WebElement balanceNewReferenceAmt;
		
		@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
		private static WebElement breakUpByTagTab;
		
		@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
		private static WebElement adjustmentTab;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
		private static WebElement breakUpByTagDueDate;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
		private static WebElement breakUpByTagDepartment;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
		private static WebElement breakUpByTagBaseCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
		private static WebElement breakUpByTagBillCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
		private static WebElement breakUpByTagBaseConversionRate;
			
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
		private static WebElement breakUpByTagBaseLocalCurrency;
		
		@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
		private static WebElement  billRefAdjustAmountInTransCurency;
		
		@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
		private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		private static WebElement  billRefInfoBarLocalCurrencyRate;
		
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		private static WebElement billRefTransactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		private static WebElement billRefBaseCurrency;
		

		@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
		private static WebElement breakUpDetailsAccount;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
		private static WebElement breakUpDetailsItem;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
		private static WebElement breakUpDetailsDepartment;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
		private static WebElement conversationRateBaseCurrencyRate;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		private static WebElement conversationRateLocalCurrencyRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
		private static WebElement asOnEntryDateTransAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
		private static WebElement asOnEntryDateBaseConcersationRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
		private static WebElement asOnEntryDateBaseAmount;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
		private static WebElement asOnEntryDateLocConversationRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
		private static WebElement asOnEntryDateAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
		private static WebElement balOnAdjstDateTransAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
		private static WebElement  balOnAdjstDateBasrConversionRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
		private static WebElement  balOnAdjstDateBaseAmount;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
		private static WebElement  balOnAdjstDateLocalConversionRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
		private static WebElement  balOnAdjstDateAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
		private static WebElement adjustmentsAmount1;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
		private static WebElement adjustmentsAmount2;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
		private static WebElement adjustmentsAmount3;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
		private static WebElement adjustmentsAmount4;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
		private static WebElement exchangeGainLossForBaseCurrency;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
		private static WebElement exchangeGainLossForLocalCurrency;
		
		
		
		@FindBy(xpath="//input[@id='id_limit']")
		private static WebElement gridEnterAdjustAmtRow1;
		
		//Billreference Body Grid Elements
		
	    
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[8]")
		private static WebElement gridOrginalAmtRow1;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[8]")
		private static WebElement gridOrginalAmtRow2;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[8]")
		private static WebElement gridOrginalAmtRow3;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[8]")
		private static WebElement gridOrginalAmtRow4;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[8]")
		private static WebElement gridOrginalAmtRow5;
		
		
		
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[10]")
		private static WebElement gridBalanceAmtRow1;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[10]")
		private static WebElement gridBalanceAmtRow2;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[10]")
		private static WebElement gridBalanceAmtRow3;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[10]")
		private static WebElement gridBalanceAmtRow4;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[10]")
		private static WebElement gridBalanceAmtRow5;
		
		
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
		private static WebElement gridAdjustmentAmtRow1;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[13]")
		private static WebElement gridAdjustmentAmtRow2;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[13]")
		private static WebElement gridAdjustmentAmtRow3;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[13]")
		private static WebElement gridAdjustmentAmtRow4;

		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[13]")
		private static WebElement gridAdjustmentAmtRow5;
		
		@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
		private static List<WebElement> bodyAccountListInGrid;
		
		               
		@FindBy(xpath="//*[@id='id_body_39_table_body']/tr")
		private static List<WebElement> bodyCreditAccountListInGrid;
		
		
		
		@FindBy(xpath="//div[@id='id_transaction_authorization_remark_popup']/div/div")
		private static WebElement authorizationRemarkPopup;
		
		
		
		@FindBy(xpath="//label[@class='modal-title theme_background-color theme_color font-4']")
		private static WebElement stockReservationLabel;
		
		@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
		private static WebElement stockRes_QtyToReserveRow1; 
		
		@FindBy(xpath="//li[@id='btnPickQuantity']")
		private static WebElement res_PickBtn;
		
		@FindBy(xpath="//div[contains(text(),'Discard')]")
		private static WebElement res_DiscardBtn;
		
		@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-ok icon-font6']")
		private static WebElement res_OkBtn;
		
		@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-close icon-font6']")
		private static WebElement res_CloseBtn;
		
		
		@FindBy(xpath="//tbody[@id='ctrlAuthorizationH_table_body']/tr/td[2]")
		private static List<WebElement> tranAuthNameList;		
		
		public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
				String actErrorMessage=errorMessage.getText();
				String expErrorMessage=ExpMessage;
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
					
					return actErrorMessage;
				}
				catch(Exception ee)
				{
					
					System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
					
					return actErrorMessage;
				}
			}
			catch(Exception e)
			{
				System.err.println("Error Message NOT Found or NOT Clickable");
				System.err.println(e.getMessage());
		                
				String Exception=e.getMessage();
				
				return Exception;	
			} 
		  }	
		
		
		
    public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
    {
    	 Thread.sleep(5000);
           
           try 
           {
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
    			doNotShowCheckbox.click();
    			
    			Thread.sleep(2000);
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
    			closeBtnInDemoPopupScreen.click(); 
    			
    			System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");
    			
    		} 
           catch (Exception e)
           {
           	System.err.println("NO POP UP DISPLAYED");
    		}

       	
       	Thread.sleep(4000);
    }
    		 



    		


    	@FindBy(xpath="//button[contains(text(),'Ok')]")
    	private static WebElement loginRefreshOkBtn;
    	
    	
    	public static void checkRefershPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
    	{
    	
    	try 
    	{
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
    	loginRefreshOkBtn.click();
    	
    	
    	} 
    	catch (Exception e)
    	{
    	System.err.println("NO ALERT POP UP DISPLAYED");
    	}
    	
    	
    	Thread.sleep(4000);
    	}
    	

    	
    	

    	@FindBy(xpath="//select[@id='ddlCompany']")
    	private static WebElement companyDropDownList;
    	
    	@FindBy(xpath="//span[@class='hidden-xs']")
    	private static WebElement userNameDisplay;
    	
    	/*@FindBy(xpath="//span[text()='SU']")
        private static WebElement userNameDisplay;*/
    	
    	@FindBy(xpath="//*[@id='companyLogo']")
    	private static WebElement companyLogo;
    	
    	@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
    	private static WebElement companyName;
    	
    	@FindBy(xpath="//*[@id='userprofile']/li/span[2]")
    	private static WebElement logoutOption;
    		
    	@FindBy(xpath="//input[@id='donotshow']")
    	private static WebElement doNotShowCheckbox;
    	 		    
    	@FindBy(xpath="//span[@class='pull-right']")
    	private static WebElement closeBtnInDemoPopupScreen;
    	
    	//DataManagement menu
    	@FindBy (xpath="//*[@id='25']/span")
        private static WebElement dataMangementMenu;
    	
    		@FindBy (xpath="//*[@id='26']/span")
    		private static WebElement backup;
    			
    		@FindBy (xpath="//*[@id='27']/span")
    		private static WebElement restore;
    		
    		@FindBy (xpath="//*[@id='111']/span")
    		private static WebElement reindex;
    		
    		@FindBy (xpath="//*[@id='115']/span")
    		private static WebElement eraseAll;
    		
    		@FindBy (xpath="//*[@id='216']/span")
    		private static WebElement lockAndUnlock;
    		
    		
    		@FindBy (xpath="//input[@id='idEraseTransaction']")
    		private static WebElement eraseTranscationsRadio;
    		
    		@FindBy (xpath="//span[contains(text(),'Ok')]")
    		private static WebElement eraseAllOkBtn;
    		
    		@FindBy (xpath="//ul[@class='nav navbar-nav navbar-right']//i[@class='icon-font6 icon-close']")
    		private static WebElement eraseAllCancelBtn;
    		
    		
    	@FindBy (xpath="//button[@class='btn Fbutton']")
    	private static WebElement folderpathExpandBtn;
    	
    	@FindBy (xpath="//div[@id='RestoreControls']//div[1]//div[1]")
    	private static WebElement restoreCompanyBtn;
    	
    	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Yes')]")
    	private static WebElement overRideYesBtn;
    	
    	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'No')]")
    	private static WebElement overRideNoBtn;
    	
    	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
    	private static WebElement overRideCancelBtn;
     
    	private static int cSize;
    	
    	
    	public void prongHornExit() throws AWTException, InterruptedException, IOException
    	{
    	 
			
			/*
			 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_WINDOWS);
			 * robot.keyPress(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_R);
			 * robot.keyRelease(KeyEvent.VK_WINDOWS);
			 */
			 
   	     
   	     Thread.sleep(3000);
   	     
   	   Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PronghornExit.exe");
   	   
   	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
   	     //Thread.sleep(3000);
   	     
   	     
			/*
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * 
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * 
			 * 
			 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
			 */
      
      Thread.sleep(4000);

   	     
   	     
   	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
   	     
   	     
   	     
				
   	     
   	     
   	    
   	
    	}
    	
    	public void inetRestart() throws AWTException, InterruptedException, IOException
    	{
    		
    		Thread.sleep(2000);
    		Robot robot = new Robot();
    		robot.keyPress(KeyEvent.VK_WINDOWS); 
    		robot.keyPress(KeyEvent.VK_D);
			robot.keyRelease(KeyEvent.VK_D); 
			robot.keyRelease(KeyEvent.VK_WINDOWS);
			
			Thread.sleep(4000);
    		
    		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\RightClick.exe");
    	 
				
				/*
				 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_TAB);
				 * robot.keyRelease(KeyEvent.BUTTON3_DOWN_MASK);
				 * 
				 * 
				 * 
				 * 
				 * robot.keyPress(KeyEvent.VK_WINDOWS); robot.keyPress(KeyEvent.VK_R);
				 * robot.keyRelease(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_WINDOWS);
				 * 
				 * 
				 * 
				 * 
				 * 
				 * Thread.sleep(3000);
				 * 
				 * Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornexit.exe")
				 * ;
				 * 
				 * //Runtime.getRuntime().exec(getBaseDir()+
				 * "\\autoIt\\scripts\\inetmgrRestart.exe"); //Thread.sleep(3000);
				 * 
				 * robot.keyPress(KeyEvent.VK_TAB);
				 * robot.keyRelease(KeyEvent.BUTTON3_DOWN_MASK);
				 * //robot.keyPress(KeyEvent.VK_TAB);
				 * robot.keyRelease(KeyEvent.BUTTON1_DOWN_MASK);
				 * 
				 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
				 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
				 * 
				 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
				 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
				 * 
				 * 
				 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
				 */
					 
				 
			 
      
             Thread.sleep(5000);

   	     
   	     
   	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
   	     
    	}
    	
    	
    	public void  prongHornOn() throws AWTException, InterruptedException, IOException
    	{
    	 
			
			/*
			 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_WINDOWS);
			 * robot.keyPress(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_R);
			 * robot.keyRelease(KeyEvent.VK_WINDOWS);
			 */
			 
   	     
   	     Thread.sleep(3000);
   	     
   	  Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PronghornOn.exe");
   	   
   	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
   	     //Thread.sleep(3000);
   	     
   	     
			/*
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * 
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * 
			 * 
			 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
			 */
      
      Thread.sleep(5000);

   	     
   	     
   	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
   	     
   	     
    	}
    	
    	public static void killChromedriver() throws IOException, InterruptedException, AWTException 
		{
    		
    		
			 Robot robot = new Robot(); 
			 robot.keyPress(KeyEvent.VK_WINDOWS);
			 robot.keyPress(KeyEvent.VK_R);
			 robot.keyRelease(KeyEvent.VK_R);
			 robot.keyRelease(KeyEvent.VK_WINDOWS);
			 
			
				Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\killChromeDriver.exe");
				Thread.sleep(20000);
				//Runtime.getRuntime().exec("TAKKILL /F /IM chrome.exe");
				//Runtime.getRuntime().exec("TASKKILL /F /IM chromedriver.exe");
				
			
		}
    	

    	public boolean checkLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
    	{
    		Thread.sleep(2000);

    		
    		//prongHornExit();

    		
    		//prongHornOn();
    		//Thread.sleep(4000);
    		//prongHornExit();
    		
    		//killChromedriver();
    		
    		//inetRestart();
    		
    		//Thread.sleep(4000);
    		
    		//prongHornOn();
    		
    		//Thread.sleep(3000);
    		//Thread.sleep(15000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    String compname="Transaction Authorization";

    		Select oSelect = new Select(companyDropDownList);

    		List <WebElement> elementCount = oSelect.getOptions();

    		int cqSize = elementCount.size();

    		System.out.println("CompanyDropdownList Count :"+cqSize);

    		int i;

    		for(i=0; i<elementCount.size(); i++) 
    		{

    			elementCount.get(i).getText();

    			String optionName = elementCount.get(i).getText();
    			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
    			{
    				System.out.println("q"+elementCount.get(i).getText());
    				elementCount.get(i).click();
    			}
    		}


    		Thread.sleep(2000);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(5000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="SU";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;
    		
    		//prongHornExit();
    		Thread.sleep(2000);
    		//prongHornOn();
    		
    		
    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
    	

    	public boolean checkLoginAndRestoreOptionsCompanyAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    String compname="Transaction Authorization";

    		Select oSelect = new Select(companyDropDownList);

    		List <WebElement> elementCount = oSelect.getOptions();

    		int cqSize = elementCount.size();

    		System.out.println("CompanyDropdownList Count :"+cqSize);

    		int i;

    		for(i=0; i<elementCount.size(); i++) 
    		{

    			elementCount.get(i).getText();

    			String optionName = elementCount.get(i).getText();
    			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
    			{
    				System.out.println("q"+elementCount.get(i).getText());
    				elementCount.get(i).click();
    			}
    		}


    		Thread.sleep(2000);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(8000);
    		
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="SU";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
    		homeMenu.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
    		dataMangementMenu.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
    		restore.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
    		folderpathExpandBtn.click();
    		
    		Thread.sleep(3000);
    	     
    	     Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\optionsCompanyRestore.exe");
    	     
    	     Thread.sleep(3000);
    	     
    	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
    	     restoreCompanyBtn.click();
    	     
    	     try
    	     {
    	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
    	 		 overRideYesBtn.click();
    	 		 Thread.sleep(20000);
    	     }
    	     catch(Exception e)
    	     {
    	    	 System.err.println("NO OLDER COMPANY EXISTS");
    	     }
    	     
    	     Thread.sleep(3000);
    	     
    	     if(getIsAlertPresent())
    	     {
    	    	 getWaitForAlert();
    	    	 
    	    	 getAlert().accept();
    	     }
    	     
    	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    	     userNameDisplay.click();
    		
    		
    	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
    	     logoutOption.click();

    	     Thread.sleep(3000);
    	     
    	     lp.enterUserName(unamelt);
    	     
    	     lp.enterPassword(pawslt);
    	     
    	     Thread.sleep(2000);
    	     
    	     Select s = new Select(companyDropDownList);
    	     int size=s.getOptions().size();
    	     
    	     System.err.println("SIZE : "+size);
    	     
    	     for(int j=0;j<size;i++)
    	     {
    	    	 String data;
    	    	 
    	    	 data=s.getOptions().get(j).getText();
    	    	 
    	    	 System.err.println("DATA : "+data);
    	    	 
    	    	 if(data.contains("Transaction Authorization"))
    	    	 {
    	    		 
    	    		 s.selectByVisibleText(data);
    	    		 
    	    		 break;
    	    	 }
    	     }
    	     
    	     lp.clickOnSignInBtn();
    	     
    	     Thread.sleep(8000);
    	     
    	     String actUserInfo1=userNameDisplay.getText();
    			
    		System.out.println("User Info  : "+actUserInfo1);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt1=companyName.getText();
    		String getLoginCompanyName1=getCompanyTxt1.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName1);
    		companyLogo.click();
    		
    		String expUserInfo1           ="SU";
    		String expLoginCompanyName1   ="Transaction Authorization";
    	     
    	     
    		System.out.println("UserInfo             : "+actUserInfo            +" Value Expected : "+expUserInfo);
    		System.out.println("LoginCompanyName     : "+getLoginCompanyName    +" Value Expected : "+expLoginCompanyName);
    		
    		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
    		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);
    		
    		if(actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) 
    				&& actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
    		{
    	
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='4']")
    	private static WebElement selectFieldVendorAC;
    	
    	@FindBy(xpath="//*[@id='filterTree_68_0_AdvanceFilter_']/ul/li[2]/ul/li[1]/a")
    	private static WebElement selectFieldVendorACName;
    	
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='23']")
    	private static WebElement selectFieldItem;
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='5021']")
    	private static WebElement selectFieldItemName;
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[text()='Quantity']")
    	private static WebElement selectFieldQuantity;
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='268435460']")
    	private static WebElement selectFieldWarehouse;
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='268435460']/following-sibling::ul/li/a[text()='Name']")
    	private static WebElement selectFieldWarehouseName;
    	
    	
    	
    	
    	
    	
    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='1073741850']")
    	private static WebElement voucherQty;
    	
    	@FindBy(xpath="//li[@id='id_menu_tree_Purchases Vouchers']//i[@class='icon-expand col-xs-1']")
    	private static WebElement purchasevoucherExpandbutton;
    	
    	@FindBy(xpath="//span[@class='col-xs-10'][contains(text(),'Purchase Vouchers N')]")
    	private static WebElement purchasevoucherTypeCreatedVoucher;
    	
    	@FindBy(xpath="//li[@id='id_menu_tree_Sales Orders']/a/span")
    	private static WebElement documentNameSalesOrders;
    	
    	@FindBy(xpath="//li[@id='id_menu_tree_Sales Orders (1)']/a/span")
    	private static WebElement documentNameSalesOrders1;
    	
    	
    	
    	
    	// 
    	
    	@FindBy(xpath="//select[@id='ddlLimiton']")
    	private static WebElement limitDefination_LimitOnDrpdwn;
    	
    	@FindBy(xpath="//div[@id='divCondtionModal']/div/div/div[2]/div[1]/div[4]/span")
    	private static WebElement limitDefination_ConditionPopupOkBtn;
    	
    	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//select)[1]")
    	private static WebElement limitDefination_ConjunctionDrpdwn;
    	
    	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//input)[1]")
    	private static WebElement limitDefination_SelectFieldTxt;
    	
    	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='CustomerAC']")
    	private static WebElement limitDefination_SelectFieldCustomerAC;
    	
    	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='Warehouse']")
    	private static WebElement limitDefination_SelectFieldWarehouse;
    	
    	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='Item']")
    	private static WebElement limitDefination_SelectFieldItem;
    	
    	@FindBy(xpath="//div[@id='68_1_AdvanceFilter_']/table/tbody//a[text()='Unit']")
    	private static WebElement limitDefination_SelectFieldUnit;
    	
    	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//select)[2]")
    	private static WebElement limitDefination_SelectOperatorDrpdwn;
    	
    	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//select)[3]")
    	private static WebElement limitDefination_CompareWithDrpdwn;
    	
    	@FindBy(xpath="(//div[@id='68_1_AdvanceFilter_']/table/tbody//input)[2]")
    	private static WebElement limitDefination_ValueTxt;
    	
    	@FindBy(xpath="//span[@id='btnCancel']")
    	private static WebElement limitDefination_CancelBtn;
    	
    	
    	
    	// Escalation Tab
    	
    	@FindBy(xpath="//span[@class='font-5'][contains(text(),'Escalation')]")
    	private static WebElement escalationTab;					

    	@FindBy(xpath="//*[@id='spnAddEscalation']/i")
    	private static WebElement escalationLevelAddBtn;					
    	
    	
    	//First Escalation
    	
    	@FindBy(xpath="//*[@id='txtTimeLimit1']")
    	private static WebElement TimelimitTxt1;					
    			
    	@FindBy(xpath="//*[@id='ddlTimeLimit1']")
    	private static WebElement timelimitDropdown1;					
    			
    	@FindBy(xpath="//*[@id='ddlEscalationType1']")
    	private static WebElement EscalationType1;	
    	
    	@FindBy(xpath="//select[@id='ddlUserType1']")
    	private static WebElement escalation_UserTypeDrpdwn;
    	
    	@FindBy(xpath="//div[@id='divEscalationBody1']/div[4]/div[2]/div[2]/div/div[1]//label/input")
    	private static List<WebElement> escalation_UsersCheckboxList;
    	
    	@FindBy(xpath="//div[@id='divEscalationBody1']/div[4]/div[2]/div[2]/div/div[1]//label")
    	private static List<WebElement> escalation_UsersList;
    	
    	
    	
    	
    	@FindBy(xpath="//*[@id='divEscalation1']/div[1]/div[2]/i[1]")
    	private static WebElement Minimize1;					
    	
    	@FindBy(xpath="//*[@id='divEscalation1']/div[1]/div[2]/i[2]")
    	private static WebElement Close1;					
    			
    	
    	//Second Escalation
    	
    	@FindBy(xpath="//*[@id='txtTimeLimit2']")
    	private static WebElement TimelimitTxt2;					
    			
    	@FindBy(xpath="//*[@id='ddlTimeLimit2']")
    	private static WebElement Dropdown2;					
    			
    	@FindBy(xpath="//*[@id='ddlEscalationType2']")
    	private static WebElement EscalationType2;	
    	
    	@FindBy(xpath="//*[@id='divEscalation2']/div[1]/div[2]/i[1]")
    	private static WebElement Minimize2;					
    	
    	@FindBy(xpath="//*[@id='divEscalation2']/div[1]/div[2]/i[2]")
    	private static WebElement Close2;	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	// Condition Not Required Option
    	public boolean 	checkConditonNotRequiredIsSelectedInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		highlightElement(settingsmenuBtn);
    		Thread.sleep(3000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		
    		highlightElement(transactionAuthorizationBtn);
    		Thread.sleep(3000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		if(conditionNotRequiredChkBox.isSelected()==false)
    		{
    			conditionNotRequiredChkBox.click();
    		}

    		boolean actConditionNotRequiredIsSelected = conditionNotRequiredChkBox.isSelected();
    		boolean expConditionNotRequiredIsSelected = true;
    		
    		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actConditionNotRequiredIsSelected==expConditionNotRequiredIsSelected && actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	
    	public static boolean checkSavingPurchaseVoucherNWithConditionsNotRequiredOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			    Thread.sleep(2000);
				
				click(newReferenceTxt);
				Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithConditionsNotRequiredOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	public boolean checkAuthorizationStatusInVoucherHomePageWithConditionsNotRequiredOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInVoucherHomePageWithConditionsNotRequiredOption  *********************************");
			
			System.out.println("SavedVouchersCount   : "+actSavedVouchersCount   +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus  : "+actAuthorizationStatus  +" Value Expected : "+expAuthorizationStatus);
			
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				System.out.println("Test Pass : Authorization Status Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Authorization Statusis NOT Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
			
			
			
			
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithConditionsNotRequiredOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithConditionsNotRequiredOption*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
			
    	
    	
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserTransactionAuthorization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserTransactionAuthorization";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		String expUserInfo           ="UserTransactionAuthorization";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSU() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="SU";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
		
		
		
		
    	


		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAfterAuthorizationStatus = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");
			
			System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
			System.out.println("AfterAuthorizationStatus  : "+actAfterAuthorizationStatus  +" Value Expected : "+expAfterAuthorizationStatus);
			
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) 
				&& actAfterAuthorizationStatus.equalsIgnoreCase(expAfterAuthorizationStatus))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
		
		
		
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithConditionsNotRequiredOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithConditionsNotRequiredOption  *********************************");
			
			System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
    		
    		
    	
		
		
		public boolean checkEraseAllTransactionsAfterCompletingConditionsNotRequiredOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expMessage = "Data deleted successfully.";
			
			String actMessage = checkValidationMessage(expMessage);
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actMessage +" Value Expected : "+expMessage);
			
			if (actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println("Voucher Saved");
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				return false;
			}
		}
			
		
		
		
		
		
		// For Changing User when Voucher is in Pending.
		
		public boolean checkTransactionAuthorizationDeletingLevelAndChangingUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level2DeleteBtn));
    		Level2DeleteBtn.click();
    		
    		getWaitForAlert();
    		
    		String actAlert = getAlert().getText();
    		String expAlert = "Would you like to delete the selected node ?";
    		
    		getAlert().accept();
    		
    		System.err.println("Alert Text : "+actAlert+"  Value Expected  "+expAlert);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		
    		if(conditionNotRequiredChkBox.isSelected()==false)
    		{
    			conditionNotRequiredChkBox.click();
    		}
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
    		userSelectionTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
    		userrow1.click();
    		Select user = new Select(userDropdown);
			user.selectByVisibleText("UserTransactionAuthorization");
    		
			Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(/*actAlert.equalsIgnoreCase(expAlert) &&*/ actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1ForChangingUserWhileVoucherIsInPendingState() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("***************************checkSavingPurchaseVoucherN1ForChangingUserWhileVoucherIsInPendingState*********************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("0.5");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
	 		{
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	 			new_CloseBtn.click();
	 			Thread.sleep(2000);
	 			return true;
	 		}
	 		else
	 		{
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	 			new_CloseBtn.click();
	 			Thread.sleep(2000);
	 			return false;
	 		}
	 	}
		
		
		
		
		
		
 	
 	
		public boolean checkAuthorizationStatusInVoucherHomePageWithChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
 		    System.out.println("**********************checkAuthorizationStatusInVoucherHomePageWithChangingUserWhileVoucherIsInPendingStateCondition***********************");
 		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);

			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkChangingUserToUserAllOptionsInTransactionAuthorizationWhenPurchaseVoucherNIsInPending() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
    		userSelectionTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
    		userrow1.click();
    		Select user = new Select(userDropdown);
			user.selectByVisibleText("UserAllOptions");
    		
			Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Template and user details updated successfully, Other details cannot be modified as authorization is in pending state";
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			
			getWaitForAlert();
			
			String actAlert = getAlert().getText();
			String expAlert = "Would you like to Close this window , there are uncommited changes";
			
			getAlert().accept();
			
			Thread.sleep(2000);
			
			System.out.println("Alert Text : "+actAlert+"  Value Expected  "+expAlert);
    		
    		if(actAlert.equalsIgnoreCase(expAlert) && actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN2AfterChangingUserWhileVoucherIsInPendingState() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("***************************checkSavingPurchaseVoucherN2AfterChangingUserWhileVoucherIsInPendingState*********************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("0.5");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
	 		{
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	 			new_CloseBtn.click();
	 			Thread.sleep(2000);
	 			return true;
	 		}
	 		else
	 		{
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	 			new_CloseBtn.click();
	 			Thread.sleep(2000);
	 			return false;
	 		}
	 	}
		
		
		
		
		
 	
 	
		public boolean checkAuthorizationStatusInVoucherHomePageWithTwoVouchersChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
 		    System.out.println("**********************checkAuthorizationStatusInVoucherHomePageWithTwoVouchersChangingUserWhileVoucherIsInPendingStateCondition***********************");
 		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 2;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);

			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 2;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizaingWithUserAllOptionsAndChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

    		int voucherGridDocNoCount = voucherGridDocNo.size();

    		for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("1"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    					break;
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			String expUserCantAuthorize = "User can not authorize";
			String actUserCantAuthorize = checkValidationMessage(expUserCantAuthorize);
			
			Thread.sleep(2000);
			
			for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("1"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==true) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    			
    			click(voucher2);
    			
    			if(data.equalsIgnoreCase("2"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    		}

    		Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			
			if(actUserCantAuthorize.equalsIgnoreCase(expUserCantAuthorize) && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
    	
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserTransactionAuthorizationAndChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 2;
			
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizaingWithUserTransactionAuthorizationAndChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

    		int voucherGridDocNoCount = voucherGridDocNo.size();

    		for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("1"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    					break;
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			
			if(actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus) && actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
    	
    	
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithSUAfterAuthorizationChangingUserWhileVoucherIsInPendingStateCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 2;
			
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		// Condition With Quantity Greater Than or Equal to and Parallel Level
		
		public boolean 	checkTransactionAuthorizationAddingLevelAndGivingConditionsWithQuantity() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		
    		if(conditionNotRequiredChkBox.isSelected())
    		{
    			conditionNotRequiredChkBox.click();
    		}
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ConjunctionDropdown));
    		Select s1=new Select(Row1ConjunctionDropdown);
    		s1.selectByIndex(1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectFieldTxt));
    		Row1SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		getAction().moveToElement(selectFieldQuantity).click().build().perform();
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectOperatorDropdown));
    		Select s2=new Select(Row1SelectOperatorDropdown);
    		s2.selectByIndex(6);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1CompareWithDropdown));
    		Select s3=new Select(Row1CompareWithDropdown);
    		s3.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ValueTxt));
    		Row1ValueTxt.click();
    		Row1ValueTxt.sendKeys("10");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1TransAuthConditionAddBtn));
    		Row1TransAuthConditionAddBtn.click();
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2SelectFieldTxt));
    		Row2SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", selectFieldQuantity);
    		//getAction().moveToElement(selectFieldQuantity).build().perform();
    		selectFieldQuantity.click();
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2SelectOperatorDropdown));
    		Select sR2=new Select(Row2SelectOperatorDropdown);
    		sR2.selectByIndex(5);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2CompareWithDropdown));
    		Select R2S3=new Select(Row2CompareWithDropdown);
    		R2S3.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2ValueTxt));
    		Row2ValueTxt.click();
    		Row2ValueTxt.sendKeys("20");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LevelCheck1ChkBox));
    		LevelCheck1ChkBox.click();
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addLevelBtn));
    		addLevelBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
    		descriptionTxt.click();
    		descriptionTxt.sendKeys("UTA");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		
    		if(conditionNotRequiredChkBox.isSelected())
    		{
    			conditionNotRequiredChkBox.click();
    		}
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ConjunctionDropdown));
    		Select Conjunction = new Select(Row1ConjunctionDropdown);
    		Conjunction.selectByIndex(1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectFieldTxt));
    		Row1SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		getAction().moveToElement(selectFieldQuantity).click().build().perform();
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectOperatorDropdown));
    		Select Operator = new Select(Row1SelectOperatorDropdown);
    		Operator.selectByIndex(4);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1CompareWithDropdown));
    		Select CompareWith = new Select(Row1CompareWithDropdown);
    		CompareWith.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ValueTxt));
    		Row1ValueTxt.click();
    		Row1ValueTxt.sendKeys("20");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(askRemarksOnapprovalChkBox));

    		if (askRemarksOnapprovalChkBox.isSelected()==false) 
    		{
    			askRemarksOnapprovalChkBox.click();
			}
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
    		userSelectionTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
    		userrow1.click();
    		Thread.sleep(2000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userDropdown));
    		Select user = new Select(userDropdown);
			user.selectByVisibleText("UserTransactionAuthorization");
    		
			Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
		
		
		
		
		
		
		


		public static boolean checkSavingPurchaseVoucherN1WithQuantityAs6() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("***************************checkSavingPurchaseVoucherN1WithQuantityAs6*********************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("0.5");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN2WithQuantityAs12() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("**********************checkSavingPurchaseVoucherN2WithQuantityAs12*************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
    	
    	
		
		
		
		public static boolean checkSavingPurchaseVoucherN3WithQuantityAs12() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("**********************checkSavingPurchaseVoucherN3WithQuantityAs12*************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN4WithQuantityAs24() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("**********************checkSavingPurchaseVoucherN4WithQuantityAs24*************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("2");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 4";
			
			String actMessage = checkValidationMessage(expMessage1);
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
    	
    	
    	public boolean checkAuthorizationStatusInVoucherHomePageWithConditionsWithQuantity() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		System.out.println("**********************checkAuthorizationStatusInVoucherHomePageWithConditionsWithQuantity***********************");
    		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
			
			
		
		
		
		
		
		
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndQuantityCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizaingWithUserAllOptionsAndQuantityConditionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

    		int voucherGridDocNoCount = voucherGridDocNo.size();

    		for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("4"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    					break;
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			String expUserCantAuthorize = "User can not authorize";
			String actUserCantAuthorize = checkValidationMessage(expUserCantAuthorize);
			
			Thread.sleep(2000);
			
			for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("4"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==true) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    			
    			if(data.equalsIgnoreCase("3"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    		}

    		Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actUserCantAuthorize.equalsIgnoreCase(expUserCantAuthorize) && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus) && actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
    	
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserTransactionAuthorizationAndQuantityCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizaingWithUserTransactionAuthorizationAndQuantityConditionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

    		int voucherGridDocNoCount = voucherGridDocNo.size();

    		for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("2"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    					break;
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			String expUserCantAuthorize = "User can not authorize";
			String actUserCantAuthorize = checkValidationMessage(expUserCantAuthorize);
			
			Thread.sleep(2000);
			
			for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("2"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==true) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}    			
    			    	
    			click(voucher4);  // recent extra code 
    			
    			if(data.equalsIgnoreCase("4"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actUserCantAuthorize.equalsIgnoreCase(expUserCantAuthorize) && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus) 
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus) 
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
    	
    	
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithSUAfterAuthorizationQuantityCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
    	
    	
    	
    	
    	
    	
    	
    	
    	// With Warehouse Conditions
    	
    	public boolean 	checkTransactionAuthorizationGivingConditionsWithWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		
    		if(conditionNotRequiredChkBox.isSelected())
    		{
    			conditionNotRequiredChkBox.click();
    		}
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2TransAuthConditionDeleteBtn));
    		Row2TransAuthConditionDeleteBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1TransAuthConditionDeleteBtn));
    		Row1TransAuthConditionDeleteBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ConjunctionDropdown));
    		Select s1=new Select(Row1ConjunctionDropdown);
    		s1.selectByIndex(1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectFieldTxt));
    		Row1SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		//getAction().moveToElement(selectFieldWarehouse).click().build().perform();
    		ClickUsingJs(selectFieldWarehouse);
    		Thread.sleep(1000);
    		
    		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldWarehouseName));
    		//selectFieldWarehouseName.click();
    		ClickUsingJs(selectFieldWarehouseName);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectOperatorDropdown));
    		Select s2=new Select(Row1SelectOperatorDropdown);
    		s2.selectByIndex(1);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1CompareWithDropdown));
    		Select s3=new Select(Row1CompareWithDropdown);
    		s3.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InputValueTxt));
    		InputValueTxt.sendKeys("Hyderabad");
    		Thread.sleep(2000);
    		InputValueTxt.sendKeys(Keys.TAB);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level2editBtn));
    		Level2editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		
    		if(conditionNotRequiredChkBox.isSelected())
    		{
    			conditionNotRequiredChkBox.click();
    		}
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1TransAuthConditionDeleteBtn));
    		Row1TransAuthConditionDeleteBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ConjunctionDropdown));
    		Select s4=new Select(Row1ConjunctionDropdown);
    		s1.selectByIndex(1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectFieldTxt));
    		Row1SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		ClickUsingJs(selectFieldWarehouse);
    		Thread.sleep(1000);
    		
    		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldWarehouseName));
    		//selectFieldWarehouseName.click();
    		ClickUsingJs(selectFieldWarehouseName);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectOperatorDropdown));
    		Select s5=new Select(Row1SelectOperatorDropdown);
    		s2.selectByIndex(1);
    		
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1CompareWithDropdown));
    		Select s6=new Select(Row1CompareWithDropdown);
    		s3.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InputValueTxt));
    		InputValueTxt.sendKeys("Secunderabad");
    		Thread.sleep(2000);
    		InputValueTxt.sendKeys(Keys.TAB);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
		
		
    	
    	
    	
    	
    	
    	public static boolean checkSavingPurchaseVoucherN1WithWarehouseAsMumbai() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("***************************checkSavingPurchaseVoucherN1WithWarehouseAsMumbai*********************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("MUMBAI");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("0.5");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN2WithWarehouseAsHyderabad() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("**********************checkSavingPurchaseVoucherN2WithWarehouseAsHyderabad*************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
    	
    	
		
		
		
		public static boolean checkSavingPurchaseVoucherN3WithWarehouseAsHyderabad() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("**********************checkSavingPurchaseVoucherN3WithWarehouseAsHyderabad*************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN4WithWarehouseAsSecunderabad() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("**********************checkSavingPurchaseVoucherN4WithWarehouseAsSecunderabad*************************");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("Secunderabad");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("2");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 4";
			
			String actMessage = checkValidationMessage(expMessage1);
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	
    	
		public boolean checkAuthorizationStatusInVoucherHomePageWithWarehouseConditions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		System.out.println("**********************checkAuthorizationStatusInVoucherHomePageWithWarehouseConditions***********************");
    		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
			
			
		
		
		
		
		
		
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndWarehouseCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Pending";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizaingWithUserAllOptionsAndWarehouseConditionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

    		int voucherGridDocNoCount = voucherGridDocNo.size();

    		for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("4"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    					break;
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			String expUserCantAuthorize = "User can not authorize";
			String actUserCantAuthorize = checkValidationMessage(expUserCantAuthorize);
			
			Thread.sleep(2000);
			
			for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("4"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==true) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    			
    			if(data.equalsIgnoreCase("3"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    		}

    		Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actUserCantAuthorize.equalsIgnoreCase(expUserCantAuthorize) && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus) && actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
    	
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserTransactionAuthorizationAndWarehouseCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Pending";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizaingWithUserTransactionAuthorizationAndWarehouseConditionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));

    		int voucherGridDocNoCount = voucherGridDocNo.size();

    		for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("2"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    					break;
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			String expUserCantAuthorize = "User can not authorize";
			String actUserCantAuthorize = checkValidationMessage(expUserCantAuthorize);
			
			Thread.sleep(2000);
			
			for(int i=0;i<voucherGridDocNoCount;i++)
    		{
    			String data = voucherGridDocNo.get(i).getText();

    			if(data.equalsIgnoreCase("2"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==true) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    			click(voucher4);      // recent code
    			
    			if(data.equalsIgnoreCase("4"))
    			{
    				if (voucherGridIndexChkBox.get(i).isSelected()==false) 
    				{
    					voucherGridIndexChkBox.get(i).click();
    				}
    			}
    		}

    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actUserCantAuthorize.equalsIgnoreCase(expUserCantAuthorize) && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus) 
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus) 
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
    	
    	
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithSUAfterAuthorizationWarehouseCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 4;
			
			
			String actRow1AuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expRow1AuthorizationStatus = "Authorized";
			
			String actRow2AuthorizationStatus = voucherGridRow2AuthorizationStatus.getText();
			String expRow2AuthorizationStatus = "Authorized";
			
			String actRow3AuthorizationStatus = voucherGridRow3AuthorizationStatus.getText();
			String expRow3AuthorizationStatus = "Pending";
			
			String actRow4AuthorizationStatus = voucherGridRow4AuthorizationStatus.getText();
			String expRow4AuthorizationStatus = "Authorized";
			
			System.out.println("SavedVouchersCount       : "+actSavedVouchersCount       +" Value Expected : "+expSavedVouchersCount);
			System.out.println("Row1AuthorizationStatus  : "+actRow1AuthorizationStatus  +" Value Expected : "+expRow1AuthorizationStatus);
			System.out.println("Row2AuthorizationStatus  : "+actRow2AuthorizationStatus  +" Value Expected : "+expRow2AuthorizationStatus);
			System.out.println("Row3AuthorizationStatus  : "+actRow3AuthorizationStatus  +" Value Expected : "+expRow3AuthorizationStatus);
			System.out.println("Row4AuthorizationStatus  : "+actRow4AuthorizationStatus  +" Value Expected : "+expRow4AuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actRow1AuthorizationStatus.equalsIgnoreCase(expRow1AuthorizationStatus)
					&& actRow2AuthorizationStatus.equalsIgnoreCase(expRow2AuthorizationStatus)
					&& actRow3AuthorizationStatus.equalsIgnoreCase(expRow3AuthorizationStatus)
					&& actRow4AuthorizationStatus.equalsIgnoreCase(expRow4AuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
		
    	
		
		
		
		
		
		
		// Escalation
		
		@FindBy(xpath="//td[@id='id_tblAlerts_col_1-5']")
		private static WebElement alertTabRow1AlertTxt;
		
		@FindBy(xpath="//th[@id='id_tblAlerts_control_heading_5']/div/u")
		private static WebElement alertTabAlertHeadingLink;
		
		@FindBy(xpath="//select[@id='id_tblAlerts_Alerts']")
		private static WebElement alertTabRow1AlertDrpdwn;
		
		@FindBy(xpath="//label[text()=' Escalation Level 1']")
		private static WebElement EscalationLevelText;
		
		public boolean 	checkTransactionAuthorizationAddingEscalationWithTimeLimit1DayAndEscalationTypeApproved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
			System.out.println("***************************checkTransactionAuthorizationAddingEscalationWithTimeLimit1DayAndEscalationTypeApproved*****************************");
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(alertsTab));
    		alertsTab.click();
    		
    		Thread.sleep(1000);
    		
    		String alertColumnTxt = alertTabRow1AlertTxt.getText();
    		
    		System.err.println("Alert Column Txt : "+alertColumnTxt);
    		
    		String expTemplateSaveMessage = null;
    		String actTemplateSaveMessage = null;
    		
    		if (alertColumnTxt.equalsIgnoreCase(" ")) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(alertTabAlertHeadingLink));
    			alertTabAlertHeadingLink.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeTemplateTemplatestxt));
    			customizeTemplateTemplatestxt.sendKeys("createAlertsTemplate");
    			Thread.sleep(2000);
    			customizeTemplateTemplatestxt.sendKeys(Keys.TAB);
    			
    			Thread.sleep(1000);
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeTemplateSaveBtn));
    			customizeTemplateSaveBtn.click();
    			
    			expTemplateSaveMessage = "Template saved successfully";
    			actTemplateSaveMessage = checkValidationMessage(expTemplateSaveMessage);
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeTemplateCloseBtn));
    			customizeTemplateCloseBtn.click();
			}
    		
			System.out.println("Template Saved Message : "+actTemplateSaveMessage+"  Value Expected  "+expTemplateSaveMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(alertTabRow1AlertTxt));
			alertTabRow1AlertTxt.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(alertTabRow1AlertDrpdwn));
			Select alert = new Select(alertTabRow1AlertDrpdwn);
			
			String actAlertSelected = alert.getFirstSelectedOption().getText();
			String expAlertSelected = "createAlertsTemplate";
			
			System.out.println("Alert Selected : "+actAlertSelected+"  Value Expected  "+expAlertSelected);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(escalationTab));
			escalationTab.click();
			
			Thread.sleep(1000);
			
			if (EscalationLevelText.isDisplayed()==true) 
			{
				System.out.println("Escalation Level is Already Added");
			}
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(escalationLevelAddBtn));
				escalationLevelAddBtn.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TimelimitTxt1));
			TimelimitTxt1.click();
			TimelimitTxt1.sendKeys(Keys.END);
			TimelimitTxt1.sendKeys(Keys.SHIFT, Keys.HOME);
			TimelimitTxt1.sendKeys("1");
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(timelimitDropdown1));
			Select time = new Select(timelimitDropdown1);
			time.selectByVisibleText("Days");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EscalationType1));
			Select escalationType = new Select(EscalationType1);
			escalationType.selectByVisibleText("Approved");
				
			Thread.sleep(2000);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		
    		if(actAlertSelected.equalsIgnoreCase(expAlertSelected) && actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithCurrentDateForEscalationTimeLimit1DayAndTypeApproved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 System.out.println("************************checkSavingPurchaseVoucherNWithCurrentDateForEscalationTimeLimit1DayAndTypeApproved*****************************");
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInVoucherHomePageWithCurrentDateForEscalationTimeLimit1DayAndTypeApproved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			System.out.println("*******************checkAuthorizationStatusInVoucherHomePageWithCurrentDateForEscalationTimeLimit1DayAndTypeApproved*****************");
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Pending";
			
			System.out.println("SavedVouchersCount   : "+actSavedVouchersCount   +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus  : "+actAuthorizationStatus  +" Value Expected : "+expAuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(1000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(1000);
				return false;
			}
		}
		
		
		
		
		
		
		
    	public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndWithCurrentDateForEscalationTimeLimit1DayAndTypeApproved() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
    		System.out.println("*****************checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndWithCurrentDateForEscalationTimeLimit1DayAndTypeApproved******************");
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Pending";
			
			Thread.sleep(2000);
			
			System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(1000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(1000);
				return false;
			}
		}
		
		
		
		
		
    	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		private static List<WebElement> grid_CheckBoxList;
		
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
		private static List<WebElement> grid_VoucherNoList;
		
    	public static boolean checkLogoutAndLoginWithSUAndResaveVoucherWithPreviousDateForEscalationTimeLimit1DayAndTypeApprovedValidateAuthorizationStatus() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		System.out.println("**********************checkLogoutAndLoginWithSUAndResaveVoucherWithPreviousDateForEscalationTimeLimit1DayAndTypeApprovedValidateAuthorizationStatus*********************");
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
            
            for (int i = 0; i < count; i++) 
            {
                String VoucherNo = grid_VoucherNoList.get(i).getText();
                
                if (VoucherNo.equalsIgnoreCase("1")) 
                {
                	getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
                }
            }    
			
            checkValidationMessage("Voucher Loaded Successfully");
            
            DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -1);
            
            String previousDate = format.format(cal.getTime());
            
            System.err.println("Previous Date : "+previousDate);
			
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(previousDate);
            
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		   new_CloseBtn.click();
		   
		   Thread.sleep(1000);
			
		   int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Authorized";
			
			Thread.sleep(2000);
			
			System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actSavedVouchersCount==expSavedVouchersCount 
					&& actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
    	
    	
		// Escalating Time as 1 Week
    	
    	
		
		
		
		
    	
    	
    	@FindBy (xpath="//input[@id='chkDateRange']")
    	public static WebElement transactionAuthorizationConditionTabDateRangeChkBox;
    	
    	@FindBy (xpath="//input[@id='dpFromDate']")
    	public static WebElement transactionAuthorizationConditionTabFromDateTxt;
    	
    	@FindBy (xpath="//td[@id='dpFromDate_input_image']/span")
    	public static WebElement transactionAuthorizationConditionTabFromDateCalendarIcon;
    	
    	@FindBy (xpath="//input[@id='dpToDate']")
    	public static WebElement transactionAuthorizationConditionTabToDateTxt;
    	
    	@FindBy (xpath="//td[@id='dpToDate_input_image']/span")
    	public static WebElement transactionAuthorizationConditionTabToDateCalendarIcon;
    	
    	
    	@FindBy (xpath="//input[@id='chkTimeRange']")
    	public static WebElement transactionAuthorizationConditionTabTimeRangeChkBox;
    	
    	@FindBy (xpath="//input[@id='tpFromTime']")
    	public static WebElement transactionAuthorizationConditionTabFromTimeTxt;
    	
    	@FindBy (xpath="//input[@id='tpToTime']")
    	public static WebElement transactionAuthorizationConditionTabToTimeTxt;
    	
    	
    	

    	// Date Range Option
    	public boolean 	checkTransactionAuthorizationConditionTabDateRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabDateRangeChkBox));
    		transactionAuthorizationConditionTabDateRangeChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		boolean actDateRange = transactionAuthorizationConditionTabDateRangeChkBox.isSelected();
    		boolean expDateRange = true;
    		
    		
    		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			
	    	String Currentdate=dateFormat.format(date);
    		
			Calendar c = Calendar.getInstance();
		
			c.add(Calendar.DAY_OF_MONTH, -5);  
			
			String FromDate = dateFormat.format(c.getTime());  
    		
			String ToDate = Currentdate;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabFromDateTxt));
			transactionAuthorizationConditionTabFromDateTxt.click();
			transactionAuthorizationConditionTabFromDateTxt.sendKeys(Keys.HOME);
			Thread.sleep(2000);
			transactionAuthorizationConditionTabFromDateTxt.sendKeys(FromDate);
			Thread.sleep(2000);
			transactionAuthorizationConditionTabFromDateTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabToDateTxt));
			transactionAuthorizationConditionTabToDateTxt.sendKeys(Keys.HOME);
			Thread.sleep(2000);
			transactionAuthorizationConditionTabToDateTxt.sendKeys(ToDate);
			transactionAuthorizationConditionTabToDateTxt.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			String actFromDate = transactionAuthorizationConditionTabFromDateTxt.getAttribute("value");
			String expFromDate = FromDate;
			
			String actToDate = transactionAuthorizationConditionTabToDateTxt.getAttribute("value");
			String expToDate = ToDate;
			
			
			System.out.println("****************************************checkTransactionAuthorizationConditionTabDateRangeOption*******************************************");
    		
			System.out.println("Date Range is Selected : "+actDateRange +" Value Expected "+expDateRange);
			System.out.println("From Date              : "+FromDate);
			System.out.println("To Date                : "+ ToDate);
			System.out.println("FromDate Entered       : "+actFromDate  +" Value Expected "+expFromDate);
			System.out.println("ToDate Entered         : "+actToDate    +" Value Expected "+expToDate);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		
    		if(actDateRange==expDateRange && actFromDate.equalsIgnoreCase(expFromDate) && actToDate.equalsIgnoreCase(expToDate) && actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	public static boolean checkPurchaseVoucherNSavingVoucher1WithDateRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			
	    	String Currentdate=dateFormat.format(date);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(Currentdate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkPurchaseVoucherNSavingVoucher1WithDateRangeOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			System.out.println("Error Message is As Expected");
    			return true;
    		}
    		else
    		{
    			System.out.println(" NO Error Message");
    			return false;
    		}
    	}
	
    	
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNSavingVoucher2WithDateRangeOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    		
			Calendar c = Calendar.getInstance();
		
			c.add(Calendar.DAY_OF_MONTH, 2);  
			
			String Date = dateFormat.format(c.getTime());  
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(Date);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor B");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher2  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return false;
    		}
    	}
    	
    	
    	


    	public boolean checkAuthorizationStatusInHomePageWithDateRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageWithDateRangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return false;
			}
			
		}
			
			
			
			
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithDateRangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithDateRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Authorized";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Authorized";
			
			
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithDateRangeOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) && actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithDateRangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithDateRangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
    		
    		
    	
		
		
		public boolean checkEraseAllTransactionsAfterDateRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expMessage = "Data deleted successfully.";
			String actMessage = checkValidationMessage(expMessage);
			  
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actMessage +" Value Expected : "+expMessage);
			
			if (actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
    	
    	
		
		
		
		// Time Range Option
    	public boolean 	checkTransactionAuthorizationConditionTabTimeRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		
    		if (transactionAuthorizationConditionTabDateRangeChkBox.isSelected()==true) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabDateRangeChkBox));
        		transactionAuthorizationConditionTabDateRangeChkBox.click();
			}
    		
    		
    		if (transactionAuthorizationConditionTabTimeRangeChkBox.isSelected()==false) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabTimeRangeChkBox));
        		transactionAuthorizationConditionTabTimeRangeChkBox.click();
			}
    		
    		
    		Thread.sleep(2000);
    		
    		boolean actTimeRange = transactionAuthorizationConditionTabTimeRangeChkBox.isSelected();
    		boolean expTimeRange = true;
    		
    		DateFormat dateFormat = new SimpleDateFormat("HH:mm");
    		
			Calendar from = Calendar.getInstance();
			from.add(Calendar.MINUTE, -5);  
			String FromTime = dateFormat.format(from.getTime()); 
			
			Calendar to = Calendar.getInstance();
			to.add(Calendar.SECOND, 90);  
			String ToTime = dateFormat.format(to.getTime()); 
    		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabFromTimeTxt));
			transactionAuthorizationConditionTabFromTimeTxt.click();
			transactionAuthorizationConditionTabFromTimeTxt.sendKeys(Keys.ARROW_LEFT);
			transactionAuthorizationConditionTabFromTimeTxt.sendKeys(FromTime);
			transactionAuthorizationConditionTabFromTimeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabToTimeTxt));
			transactionAuthorizationConditionTabToTimeTxt.sendKeys(Keys.HOME);
			transactionAuthorizationConditionTabToTimeTxt.sendKeys(ToTime);
			transactionAuthorizationConditionTabToTimeTxt.sendKeys(Keys.ARROW_LEFT);
			
			String actFromTime = transactionAuthorizationConditionTabFromTimeTxt.getAttribute("value");
			String expFromTime = FromTime;
			
			String actToTime = transactionAuthorizationConditionTabToTimeTxt.getAttribute("value");
			String expToTime = ToTime;
			
			
			System.out.println("****************************************checkTransactionAuthorizationConditionTabTimeRangeOption*******************************************");
    		
			System.out.println("Time Range is Selected : "+actTimeRange +" Value Expected "+expTimeRange);
			System.out.println("From Time              : "+FromTime);
			System.out.println("To Time                : "+ ToTime);
			System.out.println("FromTime Entered       : "+actFromTime  +" Value Expected "+expFromTime);
			System.out.println("ToTime Entered         : "+actToTime    +" Value Expected "+expToTime);
			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		
    		if(actTimeRange==expTimeRange && actFromTime.equalsIgnoreCase(expFromTime) && actToTime.equalsIgnoreCase(expToTime) 
    				&& actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	public static boolean checkPurchaseVoucherNSavingVoucher1WithTimeRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkPurchaseVoucherNSavingVoucher1WithTimeRangeOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
	
    	
    	
    	
    	
    	
    	
    	public static boolean checkPurchasesVoucherNSavingVoucher2WithTimeRangeOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(5000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor B");
			
			Thread.sleep(7000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(7000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(7000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(7000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			Thread.sleep(2000);
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkPurchasesVoucherNSavingVoucher2WithTimeRangeOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
    	
    	
    	


    	public boolean checkAuthorizationStatusInHomePageWithTimeRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageWithTimeRangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
			
			
			
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithTimeRangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithTimeRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Authorized";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Authorized";
			
			
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithTimeRangeOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) && actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithTimeRangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithTimeRangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
    		
    		
    	
		
		
		public boolean checkEraseAllTransactionsAfterTimeRangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	public boolean 	checkConditonForTransactionAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabDateRangeChkBox));
    		
    		if (transactionAuthorizationConditionTabDateRangeChkBox.isSelected()) 
    		{
        		transactionAuthorizationConditionTabDateRangeChkBox.click();
			}
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationConditionTabTimeRangeChkBox));
    		if (transactionAuthorizationConditionTabTimeRangeChkBox.isSelected()) 
    		{
    			transactionAuthorizationConditionTabTimeRangeChkBox.click();
			}
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		if(conditionNotRequiredChkBox.isSelected())
    		{
    			conditionNotRequiredChkBox.click();
    		}
    		
    		Thread.sleep(2000);
    		
    		Select s1=new Select(Row1ConjunctionDropdown);
    		
    		s1.selectByIndex(1);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectFieldTxt));
    		Row1SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldVendorAC));
    		selectFieldVendorAC.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldVendorACName));
    		selectFieldVendorACName.click();
    		
    		Select s2=new Select(Row1SelectOperatorDropdown);
    		
    		s2.selectByIndex(1);
    		
    		Select s3=new Select(Row1CompareWithDropdown);
    		
    		s3.selectByIndex(1);
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InputValueTxt));
    		//Row1ValueTxt.click();
    		InputValueTxt.sendKeys("V");
    		
    		Thread.sleep(2000);
    		
    		int count=Row1ValueList.size();
			
			for(int i=0 ; i < count ;i++)
			{
				String data=Row1ValueList.get(i).getText();
				
				System.err.println(data);
				
				if(data.equalsIgnoreCase("Vendor A"))
				{
					Row1ValueList.get(i).click();
						
					break;
				}
			}	
					
			InputValueTxt.sendKeys(Keys.TAB);
    		
    		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1ValueTxt));
    		Row1ValueTxt.sendKeys("Vendor A");
    		
    		Thread.sleep(3000);
    		
    		Row1ValueTxt.sendKeys(Keys.TAB);*/
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
    	
    	
				
    	
    	public static boolean checkFinancialsPurchasesVoucherNSavingVoucher1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher1  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
	
    	
    	
    	
    	
    	public static boolean checkFinancialsPurchasesVoucherNSavingVoucher2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher2  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	public static boolean checkFinancialsPurchasesVoucherNSavingVoucher3() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor B");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher3  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
	
    
    	
    	
    	
			
		public boolean checkAuthorizationStatusInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePage  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow2 : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
			
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher2EditVendorATOVendorB() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(voucherGridAuthorizationStatus.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Loding Message");
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			String LoadingMessage = errorMessage.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();*/
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.END);
			vendorAccountTxt.sendKeys(Keys.SHIFT, Keys.HOME);
			vendorAccountTxt.sendKeys(Keys.BACK_SPACE);
			vendorAccountTxt.sendKeys("Vendor B");
			
			Thread.sleep(3000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher2EditVendorATOVendorB  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
			
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterEditingVoucher2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterEditingVoucher2  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow2 : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
			
			
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(10000);

    		if (dashboard.isDisplayed()) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
			
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNAuthorizationStatusWithUserAllOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			String actAfterAuthorizeStatusRow3 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					actAfterAuthorizeStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Authorized";
			String expAfterAuthorizeStatusRow3 = "Authorized";
			
			
			
			System.out.println("************************************* checkFinancialsPurchasesVoucherNAuthorizationStatusWithUserAllOptions  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			System.out.println("AfterAuthorizeStatusRow3 : "+actAfterAuthorizeStatusRow3+" Value Expected : "+expAfterAuthorizeStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) && actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2)
				&& actAfterAuthorizeStatusRow3.equalsIgnoreCase(expAfterAuthorizeStatusRow3))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatus() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(8000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatus  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3 : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
    		
    		
    	
		
		
		public boolean checkEraseAllTransactionsAfterIntialCheck() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			
			String expMessage = "Data deleted successfully.";
			
			String actMessage = checkValidationMessage(expMessage);
			  
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actMessage +" Value Expected : "+expMessage);
			
			if (actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
		
		
		
		
		// Condition Item as BR COGS ITEM and Quantity Greater Than 100

		public boolean 	checkEditAndChangingConditonForTransactionAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1TransAuthConditionDeleteBtn));
    		Row1TransAuthConditionDeleteBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1TransAuthConditionAddBtn));
    		Row1TransAuthConditionAddBtn.click();
    		
    		Select s1=new Select(Row1ConjunctionDropdown);
    		
    		s1.selectByIndex(1);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row1SelectFieldTxt));
    		Row1SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldItem));
    		selectFieldItem.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldItemName));
    		selectFieldItemName.click();
    		
    		Select s2=new Select(Row1SelectOperatorDropdown);
    		
    		s2.selectByIndex(1);
    		
    		Select s3=new Select(Row1CompareWithDropdown);
    		
    		s3.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InputValueTxt));
    		InputValueTxt.sendKeys("BR COGS ITEM");
    		
    		Thread.sleep(2000);
    		
    		//InputValueTxt.sendKeys(Keys.TAB);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2SelectFieldTxt));
    		Row2SelectFieldTxt.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFieldQuantity));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", selectFieldQuantity);
    		
    		selectFieldQuantity.click();
    		
    		Thread.sleep(2000);
    		
    		Select s4=new Select(Row2SelectOperatorDropdown);
    		
    		s4.selectByIndex(4);
    		
    		Select s5=new Select(Row2CompareWithDropdown);
    		
    		s5.selectByIndex(1);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Row2ValueTxt));
    		Row2ValueTxt.click();
    		Row2ValueTxt.sendKeys("100");
    		
    		Thread.sleep(2000);
    		
    		Row2ValueTxt.sendKeys(Keys.TAB);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher1WithConditionItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("90");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher1WithConditionItemAsBRCOGS  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
	
    	
    	
    	
    	
    	public static boolean checkFinancialsPurchasesVoucherNSavingVoucher2WithConditionItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("101");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher2WithConditionItemAsBRCOGS  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	public static boolean checkFinancialsPurchasesVoucherNSavingVoucher3WithConditionItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("90");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher3WithConditionItemAsBRCOGS  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
	
    
    	
    	
    	
    	public static boolean checkFinancialsPurchasesVoucherNSavingVoucher4WithConditionItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("101");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 4";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher4WithConditionItemAsBRCOGS  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
    	
    	
    	
    	
			
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			String actStatusRow4 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					 actStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Authorized";
			String expStatusRow4 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionItemAsBRCOGS  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow2 : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			System.out.println("StatusRow4 : "+actStatusRow4+" Value Expected : "+expStatusRow4);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3)
				&& actStatusRow4.equalsIgnoreCase(expStatusRow4))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithConditionItemAsBRCOGS() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(10000);

    		if (dashboard.isDisplayed()) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
			
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithConditionItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			String actStatusRow4 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					 actStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Authorized";
			String expStatusRow4 = "Authorized";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
			grid_HeaderChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(3000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			String actAfterAuthorizeStatusRow3 = null;
			String actAfterAuthorizeStatusRow4 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					actAfterAuthorizeStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					actAfterAuthorizeStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Authorized";
			String expAfterAuthorizeStatusRow3 = "Authorized";
			String expAfterAuthorizeStatusRow4 = "Authorized";
			
			
			
			System.out.println("************************************* checkFinancialsPurchasesVoucherNAuthorizationStatusWithUserAllOptions  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			System.out.println("StatusRow4               : "+actStatusRow4				+" Value Expected : "+expStatusRow4);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			System.out.println("AfterAuthorizeStatusRow3 : "+actAfterAuthorizeStatusRow3+" Value Expected : "+expAfterAuthorizeStatusRow3);
			System.out.println("AfterAuthorizeStatusRow4 : "+actAfterAuthorizeStatusRow4+" Value Expected : "+expAfterAuthorizeStatusRow4);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3) 
				&& actStatusRow4.equalsIgnoreCase(expStatusRow4) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) 
				&& actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2) && actAfterAuthorizeStatusRow3.equalsIgnoreCase(expAfterAuthorizeStatusRow3)
				&& actAfterAuthorizeStatusRow4.equalsIgnoreCase(expAfterAuthorizeStatusRow4))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithConditionItemAsBRCOGS() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(8000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			String actStatusRow4 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					 actStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			String expStatusRow4 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatus  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3 : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			System.out.println("StatusRow4 : "+actStatusRow4+" Value Expected : "+expStatusRow4);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3)
				&& actStatusRow4.equalsIgnoreCase(expStatusRow4))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
    		
    		
    	
		
		
		public boolean checkEraseAllTransactionsAfterVerifyingTransactionsWithItemAsBRCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg = "Data deleted successfully.";
			
			String actValidationMsg = checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
    	
			
		
		
		
		
		// Condition Tab Line wise Authorization Option

		public boolean 	checkEditAndChangingConditonAsLineWiseAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    			
    		Thread.sleep(1000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		conditionNotRequiredChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationChkBox));
    		lineWiseAuthorizationChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
		
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher1WithLineWiseAuthorizationCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			/*enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);*/
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			select2ndRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
			select2ndRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			/*enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);*/
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			select3rdRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			/*enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);*/
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
			select4thRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
			select4thRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			/*enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);*/
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
			select5thRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
			select5thRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_7thColumn));
			select5thRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			/*enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);*/
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher1WithLineWiseAuthorizationCondition  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
			
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher2WithLineWiseAuthorizationCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			checkValidationMessage("Voucher Loaded Successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
			copyToClipBoardOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
			pasteFromClipBoardOption.click();
			
			
			String expCopyDocMsg = "Paste from clipboard completed successfully";
			
			String actCopyDocMsg = checkValidationMessage(expCopyDocMsg);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(1000);
			
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher2WithLineWiseAuthorizationCondition  *********************************");
		   
		   System.out.println("CopyDocMsg     :  "+actCopyDocMsg +" Value Expected : "+expCopyDocMsg);
		   System.out.println("SavingMessage  :  "+actMessage    +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actCopyDocMsg.contains(expCopyDocMsg) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher3WithLineWiseAuthorizationCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
			pasteFromClipBoardOption.click();
			
			String expCopyDocMsg = "Paste from clipboard completed successfully";
			
			String actCopyDocMsg = checkValidationMessage(expCopyDocMsg);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher3WithLineWiseAuthorizationCondition  *********************************");
		   
		   System.out.println("CopyDocMsg     :  "+actCopyDocMsg +" Value Expected : "+expCopyDocMsg);
		   System.out.println("SavingMessage  :  "+actMessage    +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actCopyDocMsg.contains(expCopyDocMsg) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
			
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher4WithLineWiseAuthorizationCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
			pasteFromClipBoardOption.click();
			
			String expCopyDocMsg = "Paste from clipboard completed successfully";
			
			String actCopyDocMsg = checkValidationMessage(expCopyDocMsg);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 4";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher4WithLineWiseAuthorizationCondition  *********************************");
		   
		   System.out.println("CopyDocMsg     :  "+actCopyDocMsg +" Value Expected : "+expCopyDocMsg);
		   System.out.println("SavingMessage  :  "+actMessage    +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actCopyDocMsg.contains(expCopyDocMsg) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
			
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher5WithLineWiseAuthorizationCondition() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
			pasteFromClipBoardOption.click();
			
			String expCopyDocMsg = "Paste from clipboard completed successfully";
			
			String actCopyDocMsg = checkValidationMessage(expCopyDocMsg);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 5";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher5WithLineWiseAuthorizationCondition  *********************************");
		   
		   System.out.println("CopyDocMsg     :  "+actCopyDocMsg +" Value Expected : "+expCopyDocMsg);
		   System.out.println("SavingMessage  :  "+actMessage    +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
		   if(actCopyDocMsg.contains(expCopyDocMsg) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
			
			
    	
	
		
		
		
		
    	
    	
    	public static boolean checkFinancialsPurchasesVoucherNAuthorizationStatusWithLineWiseAuthorizationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			String actStatusRow4 = null;
			String actStatusRow5 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					 actStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("5")) 
				{
					 actStatusRow5 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			String expStatusRow4 = "Pending";
			String expStatusRow5 = "Pending";
			
			Thread.sleep(2000);
			
			System.out.println("************************************* checkFinancialsPurchasesVoucherNAuthorizationStatusWithLineWiseAuthorizationOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			System.out.println("StatusRow4               : "+actStatusRow4				+" Value Expected : "+expStatusRow4);
			System.out.println("StatusRow5               : "+actStatusRow5				+" Value Expected : "+expStatusRow5);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			homeCloseBtn.click();
			
			Thread.sleep(2000);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3) 
				&& actStatusRow4.equalsIgnoreCase(expStatusRow4) && actStatusRow5.equalsIgnoreCase(expStatusRow5))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
    	
    	
    	
    	
    	
    	
    	
    	
    	public static boolean checkLogoutAndLoginWithUserAllOptionsWithConditionLineWiseAuthorization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    		Thread.sleep(5000);

    		if (dashboard.isDisplayed()) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
			
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithConditionLineWiseAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			String actStatusRow4 = null;
			String actStatusRow5 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					 actStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("5")) 
				{
					 actStatusRow5 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			String expStatusRow4 = "Pending";
			String expStatusRow5 = "Pending";
			
			Thread.sleep(2000);
			
			System.out.println("************************************* checkFinancialsPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithConditionLineWiseAuthorization  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			System.out.println("StatusRow4               : "+actStatusRow4				+" Value Expected : "+expStatusRow4);
			System.out.println("StatusRow5               : "+actStatusRow5				+" Value Expected : "+expStatusRow5);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3) 
				&& actStatusRow4.equalsIgnoreCase(expStatusRow4) && actStatusRow5.equalsIgnoreCase(expStatusRow5))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		public static boolean checkAuthorizingLineWiseInVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
    		pendingAuthorizationPurchases.click();
    		
    		Thread.sleep(2000);

			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(voucherGridAuthorizationStatus.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher Loaded Successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_AuthorizeBtn));
			new_AuthorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthHeaderChkBox));
			lineWiseAuthHeaderChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthHeaderAuthorizeBtn));
			lineWiseAuthHeaderAuthorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationOkBtn));
			lineWiseAuthorizationOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DocumentInfoStatusTxt));
			String actStatus = new_DocumentInfoStatusTxt.getText();
			String expStatus = "Approved";
			
			System.out.println("************************************* checkAuthorizingLineWiseInVoucher1  *********************************");
			
			System.out.println("Authorization Status in Voucher Entry Page : "+actStatus+" Value Expected : "+expStatus);
			
			if(actStatus.equalsIgnoreCase(expStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
    		
		
		
		
		
		
		public static boolean checkAuthorizingLineWiseInVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
    		pendingAuthorizationPurchases.click();
    		
    		Thread.sleep(2000);

			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(voucherGridAuthorizationStatus.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher Loaded Successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_AuthorizeBtn));
			new_AuthorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthHeaderChkBox));
			lineWiseAuthHeaderChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthHeaderRejectBtn));
			lineWiseAuthHeaderRejectBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationOkBtn));
			lineWiseAuthorizationOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DocumentInfoStatusTxt));
			String actStatus = new_DocumentInfoStatusTxt.getText();
			String expStatus = "Rejected";
			
			System.out.println("************************************* checkAuthorizingLineWiseInVoucher2  *********************************");
			
			System.out.println("Authorization Status in Voucher Entry Page : "+actStatus+" Value Expected : "+expStatus);
			
			if(actStatus.equalsIgnoreCase(expStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public static boolean checkAuthorizingLineWiseInVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
    		pendingAuthorizationPurchases.click();
    		
    		Thread.sleep(2000);

			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(voucherGridAuthorizationStatus.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher Loaded Successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_AuthorizeBtn));
			new_AuthorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthHeaderChkBox));
			lineWiseAuthHeaderChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthHeaderBanBtn));
			lineWiseAuthHeaderBanBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationOkBtn));
			lineWiseAuthorizationOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DocumentInfoStatusTxt));
			String actStatus = new_DocumentInfoStatusTxt.getText();
			String expStatus = "Stopped";
			
			System.out.println("************************************* checkAuthorizingLineWiseInVoucher3  *********************************");
			
			System.out.println("Authorization Status in Voucher Entry Page : "+actStatus+" Value Expected : "+expStatus);
			
			if(actStatus.equalsIgnoreCase(expStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public static boolean checkAuthorizingLineWiseInVoucher4() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
    		pendingAuthorizationPurchases.click();
    		
    		Thread.sleep(2000);

			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("4")) 
				{
					getAction().doubleClick(voucherGridAuthorizationStatus.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher Loaded Successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_AuthorizeBtn));
			new_AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow1ChkBox));
			lineWiseAuthRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow1AuthorizeBtn));
			lineWiseAuthRow1AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow2ChkBox));
			lineWiseAuthRow2ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow2AuthorizeBtn));
			lineWiseAuthRow2AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow3ChkBox));
			lineWiseAuthRow3ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow3AuthorizeBtn));
			lineWiseAuthRow3AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationOkBtn));
			lineWiseAuthorizationOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DocumentInfoStatusTxt));
			String actStatus = new_DocumentInfoStatusTxt.getText();
			String expStatus = "Partial";
			
			System.out.println("************************************* checkAuthorizingLineWiseInVoucher4  *********************************");
			
			System.out.println("Authorization Status in Voucher Entry Page : "+actStatus+" Value Expected : "+expStatus);
			
			if(actStatus.equalsIgnoreCase(expStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public static boolean checkAuthorizingLineWiseInVoucher5() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
    		pendingAuthorizationPurchases.click();
    		
    		Thread.sleep(2000);

			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("5")) 
				{
					getAction().doubleClick(voucherGridAuthorizationStatus.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher Loaded Successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_AuthorizeBtn));
			new_AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow1ChkBox));
			lineWiseAuthRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow1AuthorizeBtn));
			lineWiseAuthRow1AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow2ChkBox));
			lineWiseAuthRow2ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow2AuthorizeBtn));
			lineWiseAuthRow2AuthorizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow3ChkBox));
			lineWiseAuthRow3ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow3RejectBtn));
			lineWiseAuthRow3RejectBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow4ChkBox));
			lineWiseAuthRow4ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow4RejectBtn));
			lineWiseAuthRow4RejectBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow5ChkBox));
			lineWiseAuthRow5ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthRow5BanBtn));
			lineWiseAuthRow5BanBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationOkBtn));
			lineWiseAuthorizationOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DocumentInfoStatusTxt));
			String actStatus = new_DocumentInfoStatusTxt.getText();
			String expStatus = "Stopped";
			
			System.out.println("************************************* checkAuthorizingLineWiseInVoucher5  *********************************");
			
			System.out.println("Authorization Status in Voucher Entry Page : "+actStatus+" Value Expected : "+expStatus);
			
			if(actStatus.equalsIgnoreCase(expStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithConditionLineWiseAuthorization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(8000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			String actStatusRow4 = null;
			String actStatusRow5 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("4")) 
				{
					 actStatusRow4 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("5")) 
				{
					 actStatusRow5 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Rejected";
			String expStatusRow3 = "Stopped";
			String expStatusRow4 = "Partial";
			String expStatusRow5 = "Partial";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithConditionLineWiseAuthorization  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3 : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			System.out.println("StatusRow4 : "+actStatusRow4+" Value Expected : "+expStatusRow4);
			System.out.println("StatusRow5 : "+actStatusRow5+" Value Expected : "+expStatusRow5);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3)
				&& actStatusRow4.equalsIgnoreCase(expStatusRow4) && actStatusRow5.equalsIgnoreCase(expStatusRow5))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
    		
    		
    	
		
		
		public boolean checkEraseAllTransactionsAfterVerifyingTransactionsWithLineWiseAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
    	
    	
		
		
		
		// Keep Unposted Options
		
		public boolean 	checkEditAndChangingConditonAsKeepUnpostedSelectingFinancialAccountingAndInventory() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lineWiseAuthorizationChkBox));
    		lineWiseAuthorizationChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedfinancialAccountingChkBox));
    		keepUnpostedfinancialAccountingChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedInventoryChkBox));
    		keepUnpostedInventoryChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
    	
    	
		
		
		
		
		
		
		public static boolean checkFinancialsPurchasesVoucherNSavingVoucher1WithKeepUnpostedFinancialAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
			updateStockChkBox.click(); //enable checkbox
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_updateBtn));
			settings_updateBtn.click();
			
			checkValidationMessage("Data saved successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkFinancialsPurchasesVoucherNSavingVoucher1WithKeepUnpostedFinancialAccountingAndInventoryOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionKeepUnpostedFinancialAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionKeepUnpostedFinancialAccountingAndInventoryOptions  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkFinancialLedgerReportWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			ledger.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SearhItemTxt));
			sl_SearhItemTxt.click();
			sl_SearhItemTxt.sendKeys("Vendor A");
			sl_SearhItemTxt.sendKeys(Keys.ENTER);

			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[11]"));
				
				String actname=name.getAttribute("title");
				
				System.out.println("Ledger Account Selected : "+actname);
				
				if(actname.equalsIgnoreCase("Vendor A") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div[1]//input"));
					index.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			System.out.println(report_Body.getText());
			
			boolean actTableData = report_Body.getText().isEmpty();
			boolean expTableData = true;
			
			System.out.println("*********************************checkFinancialLedgerReportWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions*****************************************");
			
			System.out.println("Table Data is Empty : "+actTableData+" Value Expected "+expTableData);
			
			if(actTableData==expTableData)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
			

		
		public boolean checkInventoryStockLedgerReportWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
			stockLedger.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					Thread.sleep(2000);
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			System.out.println(report_Body.getText());
			
			boolean actTableData = report_Body.getText().isEmpty();
			boolean expTableData = true;
			
			System.out.println("*********************************checkInventoryStockLedgerReportWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions*****************************************");
			
			System.out.println("Table Data is Empty : "+actTableData+" Value Expected "+expTableData);
			
			if(actTableData==expTableData)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
			
    	
    	
    	


		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedFinancialAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedFinancialAccountingAndInventoryOptions  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedFinancialAccountingAndInventoryOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedFinancialAccountingAndInventoryOptions  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkFinancialLedgerReportAfterAuthorizingWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			ledger.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SearhItemTxt));
			sl_SearhItemTxt.click();
			sl_SearhItemTxt.sendKeys("Vendor A");
			sl_SearhItemTxt.sendKeys(Keys.ENTER);

			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[11]"));
				
				String actname=name.getAttribute("title");
				
				System.out.println("Ledger Account Selected : "+actname);
				
				if(actname.equalsIgnoreCase("Vendor A") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div[1]//input"));
					index.click();
					
					break;
				}

			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			String actAccountNameR1				=sl_1stRow1stCol.getText();
			
			String actVoucherR2					=sl_2ndRow2ndCol.getText();
			String actAccountR2				    =sl_2ndRow3rdCol.getText();
			boolean actTransactionDebitR2	    =sl_2ndRow4thCol.getText().isEmpty();
			String actTransactionCreditR2       =sl_2ndRow5thCol.getText();
			String actTransactionBalanceR2   	=sl_2ndRow6thCol.getText();
			boolean actLocalDebitR2  	    	=sl_2ndRow7thCol.getText().isEmpty();
			String actLocalCreditR2    		    =sl_2ndRow8thCol.getText();
			String actLocalBalanceR2	    	=sl_2ndRow9thCol.getText();
			boolean actBaseDebitR2 	    	    =sl_2ndRow10thCol.getText().isEmpty();
			String actBaseCreditR2   	    	=sl_2ndRow11thCol.getText();
			String actBaseBalanceR2             =sl_2ndRow12thCol.getText();
			String actAlternateIssuedValueR2    =sl_2ndRow13thCol.getText();
			
			
			boolean actVoucherR3				=sl_3rdRow2ndCol.getText().isEmpty();
			boolean actAccountR3				=sl_3rdRow3rdCol.getText().isEmpty();
			boolean actTransactionDebitR3	    =sl_3rdRow4thCol.getText().isEmpty();
			String actTransactionCreditR3       =sl_3rdRow5thCol.getText();
			String actTransactionBalanceR3   	=sl_3rdRow6thCol.getText();
			boolean actLocalDebitR3  	    	=sl_3rdRow7thCol.getText().isEmpty();
			String actLocalCreditR3    		    =sl_3rdRow8thCol.getText();
			String actLocalBalanceR3	    	=sl_3rdRow9thCol.getText();
			boolean actBaseDebitR3 	    	    =sl_3rdRow10thCol.getText().isEmpty();
			String actBaseCreditR3   	    	=sl_3rdRow11thCol.getText();
			String actBaseBalanceR3             =sl_3rdRow12thCol.getText();
			boolean actAlternateIssuedValueR3   =sl_3rdRow13thCol.getText().isEmpty();
			
			
			// Expected
			
			String expAccountNameR1				="Vendor A 033-001";
			
			String expVoucherR2					="NDT45 : 1";
			String expAccountR2				    ="Purchase";
			boolean expTransactionDebitR2	    =true;
			String expTransactionCreditR2       ="10.00";
			String expTransactionBalanceR2   	="10.00";
			boolean expLocalDebitR2  	    	=true;
			String expLocalCreditR2    		    ="0.70";
			String expLocalBalanceR2	    	="0.70";
			boolean expBaseDebitR2 	    	    =true;
			String expBaseCreditR2   	    	="10.00";
			String expBaseBalanceR2             ="10.00";
			String expAlternateIssuedValueR2    ="Indian Rupees";
			
			
			boolean expVoucherR3				=true;
			boolean expAccountR3				=true;
			boolean expTransactionDebitR3	    =true;
			String expTransactionCreditR3       ="10.00";
			String expTransactionBalanceR3   	="10.00";
			boolean expLocalDebitR3  	    	=true;
			String expLocalCreditR3    		    ="0.70";
			String expLocalBalanceR3	    	="0.70";
			boolean expBaseDebitR3 	    	    =true;
			String expBaseCreditR3   	    	="10.00";
			String expBaseBalanceR3             ="10.00";
			boolean expAlternateIssuedValueR3   =true;
			
			System.out.println("*********************************checkFinancialLedgerReportAfterAuthorizingWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions*****************************************");
			
			System.out.println("AccountNameR1           : "+actAccountNameR1           +" Value Expected : "+expAccountNameR1);
			System.out.println("VoucherR2               : "+actVoucherR2               +" Value Expected : "+expVoucherR2);
			System.out.println("AccountR2               : "+actAccountR2               +" Value Expected : "+expAccountR2);
			System.out.println("TransactionDebitR2      : "+actTransactionDebitR2      +" Value Expected : "+expTransactionDebitR2);
			System.out.println("TransactionCreditR2     : "+actTransactionCreditR2     +" Value Expected : "+expTransactionCreditR2);
			System.out.println("TransactionBalanceR2    : "+actTransactionBalanceR2    +" Value Expected : "+expTransactionBalanceR2);
			System.out.println("LocalDebitR2            : "+actLocalDebitR2            +" Value Expected : "+expLocalDebitR2);
			System.out.println("LocalCreditR2           : "+actLocalCreditR2           +" Value Expected : "+expLocalCreditR2);
			System.out.println("LocalBalanceR2          : "+actLocalBalanceR2          +" Value Expected : "+expLocalBalanceR2);
			System.out.println("BaseDebitR2             : "+actBaseDebitR2             +" Value Expected : "+expBaseDebitR2);
			System.out.println("BaseCreditR2            : "+actBaseCreditR2            +" Value Expected : "+expBaseCreditR2);
			System.out.println("BaseBalanceR2           : "+actBaseBalanceR2		   +" Value Expected : "+expBaseBalanceR2);
			System.out.println("AlternateIssuedValueR2  : "+actAlternateIssuedValueR2  +" Value Expected : "+expAlternateIssuedValueR2);
			
			System.out.println("VoucherR3               : "+actVoucherR3               +" Value Expected : "+expVoucherR3);
			System.out.println("AccountR3               : "+actAccountR3               +" Value Expected : "+expAccountR3);
			System.out.println("TransactionDebitR3      : "+actTransactionDebitR3      +" Value Expected : "+expTransactionDebitR3);
			System.out.println("TransactionCreditR3     : "+actTransactionCreditR3     +" Value Expected : "+expTransactionCreditR3);
			System.out.println("TransactionBalanceR3    : "+actTransactionBalanceR3    +" Value Expected : "+expTransactionBalanceR3);
			System.out.println("LocalDebitR3            : "+actLocalDebitR3            +" Value Expected : "+expLocalDebitR3);
			System.out.println("LocalCreditR3           : "+actLocalCreditR3           +" Value Expected : "+expLocalCreditR3);
			System.out.println("LocalBalanceR3          : "+actLocalBalanceR3          +" Value Expected : "+expLocalBalanceR3);
			System.out.println("BaseDebitR3             : "+actBaseDebitR3             +" Value Expected : "+expBaseDebitR3);
			System.out.println("BaseCreditR3            : "+actBaseCreditR3            +" Value Expected : "+expBaseCreditR3);
			System.out.println("BaseBalanceR3           : "+actBaseBalanceR3           +" Value Expected : "+expBaseBalanceR3);
			System.out.println("AlternateIssuedValueR3  : "+actAlternateIssuedValueR3  +" Value Expected : "+expAlternateIssuedValueR3);
			
			
			if(actAccountNameR1.equalsIgnoreCase(expAccountNameR1) 
				&& actVoucherR2.equalsIgnoreCase(expVoucherR2) && actAccountR2.equalsIgnoreCase(expAccountR2)
				&& actTransactionDebitR2==expTransactionDebitR2 && actTransactionCreditR2.equalsIgnoreCase(expTransactionCreditR2) 
				&& actTransactionBalanceR2.equalsIgnoreCase(expTransactionBalanceR2) && actLocalDebitR2==expLocalDebitR2
				&& actLocalCreditR2.equalsIgnoreCase(expLocalCreditR2) && actLocalBalanceR2.equalsIgnoreCase(expLocalBalanceR2)
				&& actBaseDebitR2==expBaseDebitR2 && actBaseCreditR2.equalsIgnoreCase(expBaseCreditR2)
				&& actBaseBalanceR2.equalsIgnoreCase(expBaseBalanceR2) && actAlternateIssuedValueR2.equalsIgnoreCase(expAlternateIssuedValueR2)
				
				&& actVoucherR3==expVoucherR3 && actAccountR3==expAccountR3 && actTransactionDebitR3==expTransactionDebitR3
				&& actTransactionCreditR3.equalsIgnoreCase(expTransactionCreditR3) && actTransactionBalanceR3.equalsIgnoreCase(expTransactionBalanceR3)
				&& actLocalDebitR3==expLocalDebitR3 && actLocalCreditR3.equalsIgnoreCase(expLocalCreditR3) && actLocalBalanceR3.equalsIgnoreCase(expLocalBalanceR3)
				&& actBaseDebitR3==expBaseDebitR3 && actBaseCreditR3.equalsIgnoreCase(expBaseCreditR3) && actBaseBalanceR3.equalsIgnoreCase(expBaseBalanceR3)
				&& actAlternateIssuedValueR3==expAlternateIssuedValueR3)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
			

		
		public boolean checkInventoryStockLedgerReportAfterAuthorizingWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
			stockLedger.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					Thread.sleep(2000);
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			String actItemNameR1				=sl_1stRow1stCol.getText();
			
			String actVoucherR2					=sl_2ndRow2ndCol.getText();
			String actReceivedQtyR2				=sl_2ndRow3rdCol.getText();
			String actReceivedRateR2	    	=sl_2ndRow4thCol.getText();
			boolean actIssuedQtyR2        		=sl_2ndRow5thCol.getText().isEmpty();
			boolean actIssuedRateR2	    		=sl_2ndRow6thCol.getText().isEmpty();
			String actBalanceQtyR2  	    	=sl_2ndRow7thCol.getText();
			String actReceivedValueR2    		=sl_2ndRow8thCol.getText();
			boolean actIssuedValueR2	    	=sl_2ndRow9thCol.getText().isEmpty();
			String actBalanceValueR2 	    	=sl_2ndRow10thCol.getText();
			String actAvgRateR2   	    		=sl_2ndRow11thCol.getText();
			boolean actAlternateReceivedQtyR2   =sl_2ndRow12thCol.getText().isEmpty();
			boolean actAlternateIssuedValueR2   =sl_2ndRow13thCol.getText().isEmpty();
			boolean actAlternatebalanceValueR2	=sl_2ndRow14thCol.getText().isEmpty();
			
			boolean actVoucherR3				=sl_3rdRow2ndCol.getText().isEmpty();
			String actReceivedQtyR3				=sl_3rdRow3rdCol.getText();
			String actReceivedRateR3	    	=sl_3rdRow4thCol.getText();
			boolean actIssuedQtyR3        		=sl_3rdRow5thCol.getText().isEmpty();
			boolean actIssuedRateR3	    		=sl_3rdRow6thCol.getText().isEmpty();
			String actBalanceQtyR3  	    	=sl_3rdRow7thCol.getText();
			String actReceivedValueR3    		=sl_3rdRow8thCol.getText();
			boolean actIssuedValueR3	    	=sl_3rdRow9thCol.getText().isEmpty();
			String actBalanceValueR3 	    	=sl_3rdRow10thCol.getText();
			String actAvgRateR3   	    		=sl_3rdRow11thCol.getText();
			boolean actAlternateReceivedQtyR3   =sl_3rdRow12thCol.getText().isEmpty();
			boolean actAlternateIssuedValueR3   =sl_3rdRow13thCol.getText().isEmpty();
			boolean actAlternatebalanceValueR3	=sl_3rdRow14thCol.getText().isEmpty();
			
			
			// Expected
			
			String expItemNameR1				="STD RATE COGS ITEM STD RATE COGS ITEM";
			
			String expVoucherR2					="NDT45:1";
			String expReceivedQtyR2				="12.00";
			String expReceivedRateR2	    	="10.00";
			boolean expIssuedQtyR2        		=true;
			boolean expIssuedRateR2	    		=true;
			String expBalanceQtyR2  	    	="12.00";
			String expReceivedValueR2    		="120.00";
			boolean expIssuedValueR2	    	=true;
			String expBalanceValueR2 	    	="120.00";
			String expAvgRateR2   	    		="10.00";
			boolean expAlternateReceivedQtyR2   =true;
			boolean expAlternateIssuedValueR2   =true;
			boolean expAlternatebalanceValueR2	=true;
			
			boolean expVoucherR3				=true;
			String expReceivedQtyR3				="12.00";
			String expReceivedRateR3	    	="10.00";
			boolean expIssuedQtyR3        		=true;
			boolean expIssuedRateR3	    		=true;
			String expBalanceQtyR3  	    	="12.00";
			String expReceivedValueR3    		="120.00";
			boolean expIssuedValueR3	    	=true;
			String expBalanceValueR3 	    	="120.00";
			String expAvgRateR3   	    		="10.00";
			boolean expAlternateReceivedQtyR3   =true;
			boolean expAlternateIssuedValueR3   =true;
			boolean expAlternatebalanceValueR3	=true;
			
			
			System.out.println("*********************************checkInventoryStockLedgerReportAfterAuthorizingWithConditionKeepUnpostedFinancialsAccountingAndInventoryOptions*****************************************");
			
			System.out.println("ItemNameR1   			: "+actItemNameR1				+" Value Expected : "+expItemNameR1);
			
			System.out.println("VoucherR2  				: "+actVoucherR2 				+" Value Expected : "+expVoucherR2);
			System.out.println("ReceivedQtyR2  			: "+actReceivedQtyR2 			+" Value Expected : "+expReceivedQtyR2);
			System.out.println("ReceivedRateR2  		: "+actReceivedRateR2 			+" Value Expected : "+expReceivedRateR2);
			System.out.println("IssuedQtyR2  			: "+actIssuedQtyR2 				+" Value Expected : "+expIssuedQtyR2);
			System.out.println("IssuedRateR2  			: "+actIssuedRateR2 			+" Value Expected : "+expIssuedRateR2);
			System.out.println("BalanceQtyR2  			: "+actBalanceQtyR2 			+" Value Expected : "+expBalanceQtyR2);
			System.out.println("ReceivedValueR2  		: "+actReceivedValueR2 			+" Value Expected : "+expReceivedValueR2);
			System.out.println("IssuedValueR2  			: "+actIssuedValueR2 			+" Value Expected : "+expIssuedValueR2);
			System.out.println("BalanceValueR2  		: "+actBalanceValueR2 			+" Value Expected : "+expBalanceValueR2);
			System.out.println("AvgRateR2  				: "+actAvgRateR2 				+" Value Expected : "+expAvgRateR2);
			System.out.println("AlternateReceivedQtyR2  : "+actAlternateReceivedQtyR2 	+" Value Expected : "+expAlternateReceivedQtyR2);
			System.out.println("AlternateIssuedValueR2  : "+actAlternateIssuedValueR2 	+" Value Expected : "+expAlternateIssuedValueR2);
			System.out.println("AlternatebalanceValueR2 : "+actAlternatebalanceValueR2	+" Value Expected : "+expAlternatebalanceValueR2);
			
			System.out.println("VoucherR3  				: "+actVoucherR3 				+" Value Expected : "+expVoucherR3);
			System.out.println("ReceivedQtyR3  			: "+actReceivedQtyR3 			+" Value Expected : "+expReceivedQtyR3);
			System.out.println("ReceivedRateR3  		: "+actReceivedRateR3 			+" Value Expected : "+expReceivedRateR3);
			System.out.println("IssuedQtyR3  			: "+actIssuedQtyR3 				+" Value Expected : "+expIssuedQtyR3);
			System.out.println("IssuedRateR3  			: "+actIssuedRateR3 			+" Value Expected : "+expIssuedRateR3);
			System.out.println("BalanceQtyR3  			: "+actBalanceQtyR3 			+" Value Expected : "+expBalanceQtyR3);
			System.out.println("ReceivedValueR3  		: "+actReceivedValueR3 			+" Value Expected : "+expReceivedValueR3);
			System.out.println("IssuedValueR3  			: "+actIssuedValueR3 			+" Value Expected : "+expIssuedValueR3);
			System.out.println("BalanceValueR3  		: "+actBalanceValueR3 			+" Value Expected : "+expBalanceValueR3);
			System.out.println("AvgRateR3  				: "+actAvgRateR3 				+" Value Expected : "+expAvgRateR3);
			System.out.println("AlternateReceivedQtyR3  : "+actAlternateReceivedQtyR3 	+" Value Expected : "+expAlternateReceivedQtyR3);
			System.out.println("AlternateIssuedValueR3  : "+actAlternateIssuedValueR3 	+" Value Expected : "+expAlternateIssuedValueR3);
			System.out.println("AlternatebalanceValueR3 : "+actAlternatebalanceValueR3	+" Value Expected : "+expAlternatebalanceValueR3);
			
			if(actItemNameR1.equalsIgnoreCase(expItemNameR1) && actVoucherR2.equalsIgnoreCase(expVoucherR2) && actReceivedQtyR2.equalsIgnoreCase(expReceivedQtyR2)
				&& actReceivedRateR2.equalsIgnoreCase(expReceivedRateR2) && actIssuedQtyR2==expIssuedQtyR2 && actIssuedRateR2==expIssuedRateR2
				&& actBalanceQtyR2.equalsIgnoreCase(expBalanceQtyR2) && actReceivedValueR2.equalsIgnoreCase(expReceivedValueR2) 
				&& actIssuedValueR2==expIssuedValueR2 && actBalanceValueR2.equalsIgnoreCase(expBalanceValueR2) && actAvgRateR2.equalsIgnoreCase(expAvgRateR2)
				&& actAlternateReceivedQtyR2==expAlternateReceivedQtyR2 && actAlternateIssuedValueR2==expAlternateIssuedValueR2
				&& actAlternatebalanceValueR2==expAlternatebalanceValueR2
				
				&& actVoucherR3==expVoucherR3 && actReceivedQtyR3.equalsIgnoreCase(expReceivedQtyR3) && actReceivedRateR3.equalsIgnoreCase(expReceivedRateR3)
				&& actIssuedQtyR3==expIssuedQtyR3 && actIssuedRateR3==expIssuedRateR3 && actBalanceQtyR3.equalsIgnoreCase(expBalanceQtyR3)
				&& actReceivedValueR3.equalsIgnoreCase(expReceivedValueR3) && actIssuedValueR3==expIssuedValueR3 && actBalanceValueR3.equalsIgnoreCase(expBalanceValueR3)
				&& actAvgRateR3.equalsIgnoreCase(expAvgRateR3) && actAlternateReceivedQtyR3==expAlternateReceivedQtyR3 
				&& actAlternateIssuedValueR3==expAlternateIssuedValueR3 && actAlternatebalanceValueR3==expAlternatebalanceValueR3)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsAfterConditionKeepUnpostedFinancialsAccountingAndInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsAfterConditionKeepUnpostedFinancialsAccountingAndInventoryOptions  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		// Keep Unposted Links Base Options
		
		public boolean 	checkAddingSalesOrderDocumentAndConditonAsKeepUnpostedSelectingLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameSalesOrders));
    		documentNameSalesOrders.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		Thread.sleep(1000);
    		
    		nameTxt.sendKeys("Sales");
    		nameTxt.sendKeys(Keys.TAB);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addLevelBtn));
    		addLevelBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
    		descriptionTxt.click();
    		descriptionTxt.sendKeys("SO");
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conditionNotRequiredChkBox));
    		conditionNotRequiredChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedlinkBaseChkBox));
    		keepUnpostedlinkBaseChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
    		userSelectionTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
    		userrow1.click();
    		Select user = new Select(userDropdown);
			user.selectByVisibleText("UserAllOptions");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingSalesOrdersVoucher1WithKeepUnpostedLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys("Customer A");
			
			Thread.sleep(3000);
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(3000);
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("3");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("3");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";

			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkSavingSalesOrdersVoucher1WithKeepUnpostedLinkBaseOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionKeepUnpostedLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionKeepUnpostedLinksBaseOptions  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkLinkInSalesInvoiceVATVoucher1WithConditionKeepUnpostedLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = true;
			   
			System.out.println("**************************************** checkLinkInSalesInvoiceVATVoucher1WithConditionKeepUnpostedLinksBaseOptions  ***************************************");
			
			System.out.println("purchaseVoucherWorlFlowText  		: "+actPurchaseVoucherWorlFlowText		+" 	Value Expected : "+expPurchaseVoucherWorlFlowText);
			
			if(actPurchaseVoucherWorlFlowText==expPurchaseVoucherWorlFlowText)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}

		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithKeepUnpostedLinksBaseOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		public static boolean checkSalesOrderAuthorizationStatusWithUserAllOptionsWithKeepUnpostedLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();

			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkSalesOrderAuthorizationStatusWithUserAllOptionsWithKeepUnpostedLinksBaseOptions  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedLinksBaseOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedLinksBaseOptions  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		

		
		
		
		public boolean checkSavingSalesInvoiceVATVoucher1WithConditionKeepUnpostedLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			
			ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			
			for(int i=0;i<voucherGridBodyListCount;i++)
			{
    		 
				String data = voucherGridBodyList.get(i).getText();
    		 
				voucherGridBodyListArray.add(data);
			}	
				
    	 
			String actvoucherGridBodyList = voucherGridBodyListArray.toString();
			
			String expvoucherGridBodyList = "[1, HYDERABAD, STD RATE COGS ITEM, , Sales - Computers, Pcs, 10.00, 10.00, 3.00, 3.00, 0, 6.00, SalOrd:1, 0.00, 10.00, 60.00, 0.00, 0.00, 60.00, , , , , 2, , , , , , , , , , , , , , , , , , , , , , , 3, , , , , , , , , , , , , , , , , , , , , , , 4, , , , , , , , , , , , , , , , , , , , , , , 5, , , , , , , , , , , , , , , , , , , , , , ]";
			
			System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
			System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			homeCloseBtn.click();
			   
			System.out.println("**************************************** checkSavingSalesInvoiceVATVoucher1WithConditionKeepUnpostedLinksBaseOptions  ***************************************");
			
			System.out.println("purchaseVoucherWorlFlowText  		: "+actPurchaseVoucherWorlFlowText		+" 	Value Expected : "+expPurchaseVoucherWorlFlowText);
			
			if(actPurchaseVoucherWorlFlowText==expPurchaseVoucherWorlFlowText && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		
		
		
		
		// Keep Unposted Reservation Option
		
		public boolean 	checkTransactionAuthorizationSalesOrderDocumentAndConditonAsKeepUnpostedSelectingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameSalesOrders1));
    		documentNameSalesOrders1.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Sales"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedlinkBaseChkBox));
    		keepUnpostedlinkBaseChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReservationChkBox));
    		keepUnpostedReservationChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingSalesOrdersVoucher1WithKeepUnpostedReservationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
			deleteBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
			checkValidationMessage("Voucher Deleted Successfully : 1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys("Customer A");
			
			Thread.sleep(3000);
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(3000);
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("3");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("3");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkSavingSalesOrdersVoucher1WithKeepUnpostedReservationOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionKeepUnpostedReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
		
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithConditionKeepUnpostedReservationOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkLinkInSalesInvoiceVATVoucher1WithConditionKeepUnpostedReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = true;
			   
			System.out.println("**************************************** checkLinkInSalesInvoiceVATVoucher1WithConditionKeepUnpostedReservationOption  ***************************************");
			
			System.out.println("purchaseVoucherWorlFlowText  		: "+actPurchaseVoucherWorlFlowText		+" 	Value Expected : "+expPurchaseVoucherWorlFlowText);
			
			if(actPurchaseVoucherWorlFlowText==expPurchaseVoucherWorlFlowText)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}

		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithKeepUnpostedReservationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		
		public static boolean checkSalesOrderAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkSalesOrderAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReservationOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedReservationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedReservationOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		

		
		
		
		public boolean checkSavingSalesInvoiceVATVoucher1WithConditionKeepUnpostedReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			
			ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			
			for(int i=0;i<voucherGridBodyListCount;i++)
			{
    		 
				String data = voucherGridBodyList.get(i).getText();
    		 
    		 
				voucherGridBodyListArray.add(data);
			}	
				
    	 
			String actvoucherGridBodyList = voucherGridBodyListArray.toString();
			
			String expvoucherGridBodyList = "[1, HYDERABAD, STD RATE COGS ITEM, , Sales - Computers, Pcs, 10.00, 10.00, 3.00, 3.00, 0, 6.00, SalOrd:1, 0.00, 10.00, 60.00, 0.00, 0.00, 60.00, , , , , 2, , , , , , , , , , , , , , , , , , , , , , , 3, , , , , , , , , , , , , , , , , , , , , , , 4, , , , , , , , , , , , , , , , , , , , , , , 5, , , , , , , , , , , , , , , , , , , , , , ]";
			
			System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
			System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			homeCloseBtn.click();
			   
			System.out.println("**************************************** checkSavingSalesInvoiceVATVoucher1WithConditionKeepUnpostedReservationOption  ***************************************");
			
			System.out.println("purchaseVoucherWorlFlowText  		: "+actPurchaseVoucherWorlFlowText		+" 	Value Expected : "+expPurchaseVoucherWorlFlowText);
			
			if(actPurchaseVoucherWorlFlowText==expPurchaseVoucherWorlFlowText && actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 785, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message is Displayed ");
				//excelReader.setCellData(xlfile, "SmokeSalesInvoiceVATRelease", 785, 9, resFail);
				return false;
			}
		}

		
		
		
		
		
		
		public boolean checkEraseAllTransactionsAfterConditionKeepUnpostedReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			
			String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			
			System.out.println("************************************* checkEraseAllTransactionsAfterConditionKeepUnpostedReservationOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		// Keep Unposted Links Option
		
		public static boolean checkSavingPurchaseOrderVoucher1WithOutKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
			inventoryTransactionsPurchasesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
			purchasesOrdersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";

			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher1WithOutKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher2WithOutKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";

			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher2WithOutKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithOutKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow1ChkBoxCL));
			workFlowRow1ChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";

			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN2WithOutKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow1ChkBoxCL));
			workFlowRow1ChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN2WithOutKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_0']/td[2]")
		private static WebElement listOfDoc_1stRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_0']/td[3]")
		private static WebElement listOfDoc_1stRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[4]")
		private static WebElement listOfDoc_1stRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[5]")
		private static WebElement listOfDoc_1stRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[6]")
		private static WebElement listOfDoc_1stRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[7]")
		private static WebElement listOfDoc_1stRow6thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_1']/td[2]")
		private static WebElement listOfDoc_2ndRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_1']/td[3]")
		private static WebElement listOfDoc_2ndRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[4]")
		private static WebElement listOfDoc_2ndRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[5]")
		private static WebElement listOfDoc_2ndRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[6]")
		private static WebElement listOfDoc_2ndRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[7]")
		private static WebElement listOfDoc_2ndRow6thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_2']/td[2]")
		private static WebElement listOfDoc_3rdRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_2']/td[3]")
		private static WebElement listOfDoc_3rdRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[4]")
		private static WebElement listOfDoc_3rdRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[5]")
		private static WebElement listOfDoc_3rdRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[6]")
		private static WebElement listOfDoc_3rdRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[7]")
		private static WebElement listOfDoc_3rdRow6thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_3']/td[2]")
		private static WebElement listOfDoc_4thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_3']/td[3]")
		private static WebElement listOfDoc_4thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[4]")
		private static WebElement listOfDoc_4thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[5]")
		private static WebElement listOfDoc_4thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[6]")
		private static WebElement listOfDoc_4thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[7]")
		private static WebElement listOfDoc_4thRow6thCol;
		

		
		public boolean checkInventoryOrderManagementAnalysisOfLinkedOrUnLinkedListingOfDocReportWithoutConditionKeepUnpostedLinkOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
			orderManagementMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
			analysisOfLinkedORUnlinkedDocumentsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocuments));
			listingOfDocuments.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
			listingOfDocWorkFlowTxt.click();
			listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
			Thread.sleep(2000);
			listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			// Actual
			String actVoucherR1				=listOfDoc_1stRow2ndCol.getText();
			String actItemR1				=listOfDoc_1stRow3rdCol.getText();
			String actLinkValueR1			=listOfDoc_1stRow4thCol.getText();
			boolean actBalanceR1			=listOfDoc_1stRow5thCol.getText().isEmpty();
			String actStatusR1				=listOfDoc_1stRow6thCol.getText();
			
			String actVoucherR2				=listOfDoc_2ndRow2ndCol.getText();
			String actItemR2				=listOfDoc_2ndRow3rdCol.getText();
			String actLinkValueR2			=listOfDoc_2ndRow4thCol.getText();
			boolean actBalanceR2			=listOfDoc_2ndRow5thCol.getText().isEmpty();
			String actStatusR2				=listOfDoc_2ndRow6thCol.getText();
			
			boolean actVoucherR3			=listOfDoc_3rdRow2ndCol.getText().isEmpty();
			boolean actItemR3				=listOfDoc_3rdRow3rdCol.getText().isEmpty();
			String actLinkValueR3			=listOfDoc_3rdRow4thCol.getText();
			boolean actBalanceR3			=listOfDoc_3rdRow5thCol.getText().isEmpty();
			boolean actStatusR3				=listOfDoc_3rdRow6thCol.getText().isEmpty();
			
			
			// Expected
			String expVoucherR1				="PurOrd:1";
			String expItemR1				="STD RATE COGS ITEM";
			String expLinkValueR1			="12.00";
			boolean expBalanceR1			=true;
			String expStatusR1				="Closed";
			
			String expVoucherR2				="PurOrd:2";
			String expItemR2				="STD RATE COGS ITEM";
			String expLinkValueR2			="12.00";
			boolean expBalanceR2			=true;
			String expStatusR2				="Closed";
			
			boolean expVoucherR3			=true;
			boolean expItemR3				=true;
			String expLinkValueR3			="24.00";
			boolean expBalanceR3			=true;
			boolean expStatusR3				=true;
		
			
			System.out.println("*********************************checkInventoryOrderManagementAnalysisOfLinkedOrUnLinkedListingOfDocReportWithoutConditionKeepUnpostedLinkOption*****************************************");
			
			System.out.println("VoucherR1   : "+actVoucherR1	+" Value Expected "+expVoucherR1);
			System.out.println("ItemR1      : "+actItemR1		+" Value Expected "+expItemR1);
			System.out.println("LinkValueR1 : "+actLinkValueR1	+" Value Expected "+expLinkValueR1);
			System.out.println("BalanceR1   : "+actBalanceR1	+" Value Expected "+expBalanceR1);
			System.out.println("StatusR1    : "+actStatusR1		+" Value Expected "+expStatusR1);
			System.out.println("VoucherR2   : "+actVoucherR2	+" Value Expected "+expVoucherR2);
			System.out.println("ItemR2      : "+actItemR2		+" Value Expected "+expItemR2);
			System.out.println("LinkValueR2 : "+actLinkValueR2	+" Value Expected "+expLinkValueR2);
			System.out.println("BalanceR2   : "+actBalanceR2	+" Value Expected "+expBalanceR2);
			System.out.println("StatusR2    : "+actStatusR2		+" Value Expected "+expStatusR2);
			System.out.println("VoucherR3   : "+actVoucherR3	+" Value Expected "+expVoucherR3);
			System.out.println("ItemR3      : "+actItemR3		+" Value Expected "+expItemR3);
			System.out.println("LinkValueR3 : "+actLinkValueR3	+" Value Expected "+expLinkValueR3);
			System.out.println("BalanceR3   : "+actBalanceR3	+" Value Expected "+expBalanceR3);
			System.out.println("StatusR3    : "+actStatusR3		+" Value Expected "+expStatusR3);
			
			if(actVoucherR1.equalsIgnoreCase(expVoucherR1) && actItemR1.equalsIgnoreCase(expItemR1) && actLinkValueR1.equalsIgnoreCase(expLinkValueR1)
				&& actBalanceR1==expBalanceR1 && actStatusR1.equalsIgnoreCase(expStatusR1) && actVoucherR2.equalsIgnoreCase(expVoucherR2)
				&& actItemR2.equalsIgnoreCase(expItemR2) && actLinkValueR2.equalsIgnoreCase(expLinkValueR2) && actBalanceR2==expBalanceR2
				&& actStatusR2.equalsIgnoreCase(expStatusR2) && actVoucherR3==expVoucherR3 && actItemR3==expItemR3 && actLinkValueR3.equalsIgnoreCase(expLinkValueR3)
				&& actBalanceR3==expBalanceR3 && actStatusR3==expStatusR3)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
	
		
		
		
		public boolean checkEraseAllTransactionsWithoutKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithoutKeepUnpostedLinksOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		

		
		
		
		
		
		public boolean 	checkSelectingConditionAsLinksInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		if (keepUnpostedfinancialAccountingChkBox.isSelected()) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedfinancialAccountingChkBox));
        		keepUnpostedfinancialAccountingChkBox.click();
			}
    		
    		if (keepUnpostedInventoryChkBox.isSelected()) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedInventoryChkBox));
        		keepUnpostedInventoryChkBox.click();
			}
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedLinksChkBox));
    		keepUnpostedLinksChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher1WithKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
			inventoryTransactionsPurchasesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
			purchasesOrdersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher1WithKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher2WithKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher2WithKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow1ChkBoxCL));
			workFlowRow1ChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN2WithKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow2ChkBoxCL));
			workFlowRow2ChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN2WithKeepUnpostedLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		


		
		public boolean checkInventoryOrderManagementAnalysisOfLinkedOrUnLinkedListingOfDocReportWithOutConditionKeepUnpostedLinkOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
			orderManagementMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
			analysisOfLinkedORUnlinkedDocumentsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocuments));
			listingOfDocuments.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
			listingOfDocWorkFlowTxt.click();
			listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
			Thread.sleep(2000);
			listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			// Actual
			String actVoucherR1				=listOfDoc_1stRow2ndCol.getText();
			String actItemR1				=listOfDoc_1stRow3rdCol.getText();
			String actLinkValueR1			=listOfDoc_1stRow4thCol.getText();
			String actBalanceR1		 		=listOfDoc_1stRow5thCol.getText();
			String actStatusR1				=listOfDoc_1stRow6thCol.getText();
			
			String actVoucherR2				=listOfDoc_2ndRow2ndCol.getText();
			String actItemR2				=listOfDoc_2ndRow3rdCol.getText();
			String actLinkValueR2			=listOfDoc_2ndRow4thCol.getText();
			String actBalanceR2				=listOfDoc_2ndRow5thCol.getText();
			String actStatusR2				=listOfDoc_2ndRow6thCol.getText();
			
			boolean actVoucherR3			=listOfDoc_3rdRow2ndCol.getText().isEmpty();
			boolean actItemR3				=listOfDoc_3rdRow3rdCol.getText().isEmpty();
			String actLinkValueR3			=listOfDoc_3rdRow4thCol.getText();
			String actBalanceR3				=listOfDoc_3rdRow5thCol.getText();
			boolean actStatusR3				=listOfDoc_3rdRow6thCol.getText().isEmpty();
			
			
			// Expected
			String expVoucherR1				="PurOrd:1";
			String expItemR1				="STD RATE COGS ITEM";
			String expLinkValueR1			="12.00";
			String expBalanceR1				="12.00";
			String expStatusR1				="Pending";
			
			String expVoucherR2				="PurOrd:2";
			String expItemR2				="STD RATE COGS ITEM";
			String expLinkValueR2			="12.00";
			String expBalanceR2				="12.00";
			String expStatusR2				="Pending";
			
			boolean expVoucherR3			=true;
			boolean expItemR3				=true;
			String expLinkValueR3			="24.00";
			String expBalanceR3				="24.00";
			boolean expStatusR3				=true;
		
			
			System.out.println("*********************************checkInventoryOrderManagementAnalysisOfLinkedOrUnLinkedListingOfDocReportWithOutConditionKeepUnpostedLinkOption*****************************************");
			
			System.out.println("VoucherR1   : "+actVoucherR1	+" Value Expected "+expVoucherR1);
			System.out.println("ItemR1      : "+actItemR1		+" Value Expected "+expItemR1);
			System.out.println("LinkValueR1 : "+actLinkValueR1	+" Value Expected "+expLinkValueR1);
			System.out.println("BalanceR1   : "+actBalanceR1	+" Value Expected "+expBalanceR1);
			System.out.println("StatusR1    : "+actStatusR1		+" Value Expected "+expStatusR1);
			System.out.println("VoucherR2   : "+actVoucherR2	+" Value Expected "+expVoucherR2);
			System.out.println("ItemR2      : "+actItemR2		+" Value Expected "+expItemR2);
			System.out.println("LinkValueR2 : "+actLinkValueR2	+" Value Expected "+expLinkValueR2);
			System.out.println("BalanceR2   : "+actBalanceR2	+" Value Expected "+expBalanceR2);
			System.out.println("StatusR2    : "+actStatusR2		+" Value Expected "+expStatusR2);
			System.out.println("VoucherR3   : "+actVoucherR3	+" Value Expected "+expVoucherR3);
			System.out.println("ItemR3      : "+actItemR3		+" Value Expected "+expItemR3);
			System.out.println("LinkValueR3 : "+actLinkValueR3	+" Value Expected "+expLinkValueR3);
			System.out.println("BalanceR3   : "+actBalanceR3	+" Value Expected "+expBalanceR3);
			System.out.println("StatusR3    : "+actStatusR3		+" Value Expected "+expStatusR3);
			
			
			
			
			if(actVoucherR1.equalsIgnoreCase(expVoucherR1) && actItemR1.equalsIgnoreCase(expItemR1) && actLinkValueR1.equalsIgnoreCase(expLinkValueR1)
				&& actBalanceR1.equalsIgnoreCase(expBalanceR1) && actStatusR1.equalsIgnoreCase(expStatusR1) && actVoucherR2.equalsIgnoreCase(expVoucherR2)
				&& actItemR2.equalsIgnoreCase(expItemR2) && actLinkValueR2.equalsIgnoreCase(expLinkValueR2) && actBalanceR2.equalsIgnoreCase(expBalanceR2)
				&& actStatusR2.equalsIgnoreCase(expStatusR2) && actVoucherR3==expVoucherR3 && actItemR3==expItemR3 && actLinkValueR3.equalsIgnoreCase(expLinkValueR3)
				&& actBalanceR3.equalsIgnoreCase(expBalanceR3) && actStatusR3==expStatusR3)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
	
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithKeepUnpostedLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Pending";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedLinksOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) && actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "pending";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedLinksOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2 : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkInventoryOrderManagementAnalysisOfLinkedOrUnLinkedListingOfDocReportWithConditionKeepUnpostedLinkOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(orderManagementMenu));
			orderManagementMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(analysisOfLinkedORUnlinkedDocumentsMenu));
			analysisOfLinkedORUnlinkedDocumentsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocuments));
			listingOfDocuments.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(listingOfDocWorkFlowTxt));
			listingOfDocWorkFlowTxt.click();
			listingOfDocWorkFlowTxt.sendKeys("Purchases Orders vs Purchase Vouchers N");
			Thread.sleep(2000);
			listingOfDocWorkFlowTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			// Actual
			String actVoucherR1				=listOfDoc_1stRow2ndCol.getText();
			String actItemR1				=listOfDoc_1stRow3rdCol.getText();
			String actLinkValueR1			=listOfDoc_1stRow4thCol.getText();
			boolean actBalanceR1		 	=listOfDoc_1stRow5thCol.getText().isEmpty();
			String actStatusR1				=listOfDoc_1stRow6thCol.getText();
			
			String actVoucherR2				=listOfDoc_2ndRow2ndCol.getText();
			String actItemR2				=listOfDoc_2ndRow3rdCol.getText();
			String actLinkValueR2			=listOfDoc_2ndRow4thCol.getText();
			boolean actBalanceR2			=listOfDoc_2ndRow5thCol.getText().isEmpty();
			String actStatusR2				=listOfDoc_2ndRow6thCol.getText();
			//boolean actStatusR2				=listOfDoc_2ndRow6thCol.getText().isEmpty();
			
			String actVoucherR3				=listOfDoc_3rdRow2ndCol.getText();
			String actItemR3				=listOfDoc_3rdRow3rdCol.getText();
			String actLinkValueR3			=listOfDoc_3rdRow4thCol.getText();
			String actBalanceR3				=listOfDoc_3rdRow5thCol.getText();
			String actStatusR3				=listOfDoc_3rdRow6thCol.getText();
			
			boolean actVoucherR4			=listOfDoc_4thRow2ndCol.getText().isEmpty();
			boolean actItemR4				=listOfDoc_4thRow3rdCol.getText().isEmpty();
			String actLinkValueR4			=listOfDoc_4thRow4thCol.getText();
			String actBalanceR4				=listOfDoc_4thRow5thCol.getText();
			boolean actStatusR4				=listOfDoc_4thRow6thCol.getText().isEmpty();
			
			
			// Expected
			String expVoucherR1				="PurOrd:1";
			String expItemR1				="STD RATE COGS ITEM";
			String expLinkValueR1			="12.00";
			boolean expBalanceR1			=true;
			String expStatusR1				="Closed";
			
			String expVoucherR2				="NDT45:1";
			String expItemR2				="STD RATE COGS ITEM";
			String expLinkValueR2			="12.00";
			boolean expBalanceR2			=true;
			String expStatusR2				="Closed";
			
			String expVoucherR3				="PurOrd:2";
			String expItemR3				="STD RATE COGS ITEM";
			String expLinkValueR3			="12.00";
			String expBalanceR3				="12.00";
			String expStatusR3				="Pending";
			
			boolean expVoucherR4			=true;
			boolean expItemR4				=true;
			String expLinkValueR4			="36.00";
			String expBalanceR4				="12.00";
			boolean expStatusR4				=true;
		
			
			System.out.println("*********************************checkInventoryOrderManagementAnalysisOfLinkedOrUnLinkedListingOfDocReportWithConditionKeepUnpostedLinkOption*****************************************");
			
			System.out.println("VoucherR1   : "+actVoucherR1	+" Value Expected "+expVoucherR1);
			System.out.println("ItemR1      : "+actItemR1		+" Value Expected "+expItemR1);
			System.out.println("LinkValueR1 : "+actLinkValueR1	+" Value Expected "+expLinkValueR1);
			System.out.println("BalanceR1   : "+actBalanceR1	+" Value Expected "+expBalanceR1);
			System.out.println("StatusR1    : "+actStatusR1		+" Value Expected "+expStatusR1);
			System.out.println("VoucherR2   : "+actVoucherR2	+" Value Expected "+expVoucherR2);
			System.out.println("ItemR2      : "+actItemR2		+" Value Expected "+expItemR2);
			System.out.println("LinkValueR2 : "+actLinkValueR2	+" Value Expected "+expLinkValueR2);
			System.out.println("BalanceR2   : "+actBalanceR2	+" Value Expected "+expBalanceR2);
			System.out.println("StatusR2    : "+actStatusR2		+" Value Expected "+expStatusR2);
			System.out.println("VoucherR3   : "+actVoucherR3	+" Value Expected "+expVoucherR3);
			System.out.println("ItemR3      : "+actItemR3		+" Value Expected "+expItemR3);
			System.out.println("LinkValueR3 : "+actLinkValueR3	+" Value Expected "+expLinkValueR3);
			System.out.println("BalanceR3   : "+actBalanceR3	+" Value Expected "+expBalanceR3);
			System.out.println("StatusR3    : "+actStatusR3		+" Value Expected "+expStatusR3);
			System.out.println("VoucherR4   : "+actVoucherR4	+" Value Expected "+expVoucherR4);
			System.out.println("ItemR4      : "+actItemR4		+" Value Expected "+expItemR4);
			System.out.println("LinkValueR4 : "+actLinkValueR4	+" Value Expected "+expLinkValueR4);
			System.out.println("BalanceR4   : "+actBalanceR4	+" Value Expected "+expBalanceR4);
			System.out.println("StatusR4    : "+actStatusR4		+" Value Expected "+expStatusR4);
			
			if(actVoucherR1.equalsIgnoreCase(expVoucherR1) && actItemR1.equalsIgnoreCase(expItemR1) && actLinkValueR1.equalsIgnoreCase(expLinkValueR1) 
				&& actBalanceR1==expBalanceR1 && actStatusR1.equalsIgnoreCase(expStatusR1) && actVoucherR2.equalsIgnoreCase(expVoucherR2) 
				&& actItemR2.equalsIgnoreCase(expItemR2) && actLinkValueR2.equalsIgnoreCase(expLinkValueR2) && actBalanceR2==expBalanceR2
				&& actStatusR2.equalsIgnoreCase(expStatusR2) && actVoucherR3.equalsIgnoreCase(expVoucherR3) && actItemR3.equalsIgnoreCase(expItemR3)
				&& actLinkValueR3.equalsIgnoreCase(expLinkValueR3) && actBalanceR3.equalsIgnoreCase(expBalanceR3) && actStatusR3.equalsIgnoreCase(expStatusR3)
				&& actVoucherR4==expVoucherR4 && actItemR4==expItemR4 && actLinkValueR4.equalsIgnoreCase(expLinkValueR4) && actBalanceR4.equalsIgnoreCase(expBalanceR4)
				&& actStatusR4==expStatusR4)
			{
				System.out.println("Test Pass : Reports Are As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Reports Are NOT As Expected");
				//excelReader.setCellData(xlfile, xlsheet, 992, 9, resFail);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithKeepUnpostedLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithKeepUnpostedLinksOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		// Keep Unposted References
		
		public static boolean checkSavingPurchaseVoucherN1WithOutKeepUnpostedReferencesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutKeepUnpostedReferencesOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
				
		
		public boolean checkPaymentVoucherWithoutKeepUnpostedReferenceOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialMenu));
		    financialMenu.click();
		  
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		    financialsTransactionMenu.click();
		  
		    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		    cashAndBankMenu.click();
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
			paymentsVoucher.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen Opened");
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
			newCashBankAccountTxt.click();
			newCashBankAccountTxt.sendKeys("Bank");
			
			Thread.sleep(3000);
			
			newCashBankAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(3000); 
			
			departmentTxt.sendKeys(Keys.TAB);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("Vendor A");
			Thread.sleep(3000);
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
			enter_Amount.sendKeys("5");
			enter_Amount.sendKeys(Keys.TAB);
		
			Thread.sleep(3000);
			
			int actAdjustbills=billRefAdjustBillsGrid.size();
			int expAdjustbills=1;

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkPaymentVoucherWithoutKeepUnpostedReferenceOption  *********************************");
		   System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
		   System.out.println("SavingMessage  : "+actMessage     +" Value Expected  : "+expMessage1+" "+expMessage2);
	
		   if(actAdjustbills==expAdjustbills && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   Thread.sleep(2000);
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			   homeCloseBtn.click();
			   Thread.sleep(2000);
			   return true;
			}
			else 
			{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   Thread.sleep(2000);
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			   homeCloseBtn.click();
			   Thread.sleep(2000);
			   return false;
			}
		}
			
				
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithoutKeepUnpostedReferencesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithoutKeepUnpostedReferencesOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean 	checkSelectingConditionAsReferencesInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		if (keepUnpostedfinancialAccountingChkBox.isSelected()) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedfinancialAccountingChkBox));
        		keepUnpostedfinancialAccountingChkBox.click();
			}
    		
    		if (keepUnpostedInventoryChkBox.isSelected()) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedInventoryChkBox));
        		keepUnpostedInventoryChkBox.click();
			}
    		
    		if (keepUnpostedLinksChkBox.isSelected()) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedLinksChkBox));
        		keepUnpostedLinksChkBox.click();
			}
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		keepUnpostedReferencesChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithKeepUnpostedReferencesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithKeepUnpostedReferencesOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public boolean checkPaymentVoucherWithKeepUnpostedReferenceOptionBeforeAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialMenu));
		    financialMenu.click();
		  
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		    financialsTransactionMenu.click();
		  
		    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		    cashAndBankMenu.click();
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
			paymentsVoucher.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen Opened");
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
			newCashBankAccountTxt.click();
			newCashBankAccountTxt.sendKeys("Bank");
			
			Thread.sleep(3000);
			
			newCashBankAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(3000); 
			
			departmentTxt.sendKeys(Keys.TAB);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("Vendor A");
			Thread.sleep(3000);
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
			enter_Amount.sendKeys("5");
			enter_Amount.sendKeys(Keys.TAB);
		
			Thread.sleep(3000);
			
			boolean actAdjustbills = billRefAdjustBillsTable.getText().isEmpty();
			boolean expAdjustbills = true;
			
			if (actAdjustbills==expAdjustbills) 
			{
				System.err.println(billRefAdjustBillsTable.getText());
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));
			billRefcancel.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		    new_CloseBtn.click();
			   
			if (getIsAlertPresent()) 
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
		   System.out.println("************************************* checkPaymentVoucherWithKeepUnpostedReferenceOption  *********************************");
		   System.err.println("Adjustbills isEmpty  : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
	
		   if(actAdjustbills==expAdjustbills)
			{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			   homeCloseBtn.click();
			   Thread.sleep(2000);
			   //excelReader.setCellData(xlfile, "SmokePayments", 16, 9, resPass);
			   return true;
			}
			else 
			{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			   homeCloseBtn.click();
			   Thread.sleep(2000);
			   //excelReader.setCellData(xlfile, "SmokePayments", 16, 9, resFail);
			   return false;
			}
		}
		
		
		


		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithKeepUnpostedReferencesOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReferencesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReferencesOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedReferencesOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithKeepUnpostedReferencesOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkPaymentVoucherWithKeepUnpostedReferenceOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialMenu));
		    financialMenu.click();
		  
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		    financialsTransactionMenu.click();
		  
		    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		    cashAndBankMenu.click();
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
			paymentsVoucher.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen Opened");
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
			newCashBankAccountTxt.click();
			newCashBankAccountTxt.sendKeys("Bank");
			
			Thread.sleep(3000);
			
			newCashBankAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(3000); 
			
			departmentTxt.sendKeys(Keys.TAB);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
			enter_AccountTxt.click();
			enter_AccountTxt.sendKeys("Vendor A");
			Thread.sleep(3000);
			enter_AccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
			enter_Amount.sendKeys("5");
			enter_Amount.sendKeys(Keys.TAB);
		
			Thread.sleep(3000);
			
			int actAdjustbills=billRefAdjustBillsGrid.size();
			int expAdjustbills=1;

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkPaymentVoucherWithKeepUnpostedReferenceOption  *********************************");
		   System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
		   System.out.println("SavingMessage  : "+actMessage     +" Value Expected  : "+expMessage1+" "+expMessage2);
	
		   if(actAdjustbills==expAdjustbills && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   Thread.sleep(2000);
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			   homeCloseBtn.click();
			   Thread.sleep(2000);
			   return true;
			}
			else 
			{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   Thread.sleep(2000);
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			   homeCloseBtn.click();
			   Thread.sleep(2000);
			   return false;
			}
		}
			
				
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithKeepUnpostedReferencesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithKeepUnpostedReferencesOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Ask Remarks on Approval
		
		public boolean 	checkWithOutConditionAskRemarksOnApprovalInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		keepUnpostedReferencesChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(askRemarksOnapprovalChkBox));
    		askRemarksOnapprovalChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithOutAuthorizationModeAskRemarksOnApprovalOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutAuthorizationModeAskRemarksOnApprovalOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutAuthorizationModeAskRemarksOnApprovalOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutAuthorizationModeAskRemarksOnApprovalOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = false;
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReferencesOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutAuthorizationModeAskRemarksOnApprovalOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutAuthorizationModeAskRemarksOnApprovalOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithOutAuthorizationModeAskRemarksOnApprovalOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithOutAuthorizationModeAskRemarksOnApprovalOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		public boolean 	checkWithConditionAskRemarksOnApprovalInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(askRemarksOnapprovalChkBox));
    		askRemarksOnapprovalChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithAuthorizationModeAskRemarksOnApprovalOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithAuthorizationModeAskRemarksOnApprovalOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithAuthorizationModeAskRemarksOnApprovalOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeAskRemarksOnApprovalOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReferencesOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeAskRemarksOnApprovalOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeAskRemarksOnApprovalOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithAuthorizationModeAskRemarksOnApprovalOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithAuthorizationModeAskRemarksOnApprovalOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Make Approval Remarks Mandatory
		
		public boolean 	checkWithConditionMakeApprovalRemarksMandatoryInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(makeApprovalRemarksmandatoryChkBox));
    		makeApprovalRemarksmandatoryChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithAuthorizationModeMakeApprovalRemarksMandatoryOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithAuthorizationModeMakeApprovalRemarksMandatoryOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithAuthorizationModeMakeApprovalRemarksMandatoryOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeMakeApprovalRemarksMandatoryOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(3000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizationRemarkPopup));
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			String expMandatoryMsg = "Remark is mandatory.";
			
			String actMandatoryMsg = checkValidationMessage(expMandatoryMsg);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupTextArea));
			authorizePopupTextArea.click();
			authorizePopupTextArea.sendKeys("Make Approval Remarks Mandatory");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeMakeApprovalRemarksMandatoryOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("MandatoryMsg             : "+actMandatoryMsg            +" Value Expected : "+expMandatoryMsg);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actMandatoryMsg.equalsIgnoreCase(expMandatoryMsg) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return false;
			}
		}
			
		
		
		
		
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeMakeApprovalRemarksMandatoryOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeMakeApprovalRemarksMandatoryOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithAuthorizationModeMakeApprovalRemarksMandatoryOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithAuthorizationModeMakeApprovalRemarksMandatoryOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Ask Remarks on Rejection
		
		public static boolean checkSavingPurchaseVoucherN1WithOutAuthorizationModeAskRemarksOnRejectionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutAuthorizationModeAskRemarksOnRejectionOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutAuthorizationModeAskRemarksOnRejectionOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutAuthorizationModeAskRemarksOnRejectionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rejectBtn));
			rejectBtn.click();
			
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = false;
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Rejected";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithKeepUnpostedReferencesOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutAuthorizationModeAskRemarksOnRejectionOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Rejected";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithOutAuthorizationModeAskRemarksOnRejectionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithOutAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean 	checkWithConditionAskRemarksOnRejectionInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(askRemarksOnRejectionChkBox));
    		askRemarksOnRejectionChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithAuthorizationModeAskRemarksOnRejectionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithAuthorizationModeAskRemarksOnRejectionOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithAuthorizationModeAskRemarksOnRejectionOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeAskRemarksOnRejectionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(3000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rejectBtn));
			rejectBtn.click();
			
			Thread.sleep(2000);
			
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Rejected";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeAskRemarksOnRejectionOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Rejected";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithAuthorizationModeAskRemarksOnRejectionOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Make Rejection Remarks Mandatory
		
		public boolean 	checkWithConditionMakeRejectionRemarksMandatoryInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(makeRejectionRemarksMandatoryChkBox));
    		//makeRejectionRemarksMandatoryChkBox.click();
    		ClickUsingJs(makeRejectionRemarksMandatoryChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithAuthorizationModeMakeRejectionRemarksMandatoryOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithAuthorizationModeMakeRejectionRemarksMandatoryOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithAuthorizationModeMakeRejectionRemarksMandatoryOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeMakeRejectionRemarksMandatoryOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(3000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rejectBtn));
			rejectBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizationRemarkPopup));
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			String expMandatoryMsg = "Remark is mandatory.";
			
			String actMandatoryMsg = checkValidationMessage(expMandatoryMsg);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupTextArea));
			authorizePopupTextArea.click();
			authorizePopupTextArea.sendKeys("Make Rejection Remarks Mandatory");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Rejected";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithAuthorizationModeMakeRejectionRemarksMandatoryOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("MandatoryMsg             : "+actMandatoryMsg            +" Value Expected : "+expMandatoryMsg);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actMandatoryMsg.equalsIgnoreCase(expMandatoryMsg) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return false;
			}
		}
			
	
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeMakeRejectionRemarksMandatoryOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Rejected";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAuthorizationModeMakeRejectionRemarksMandatoryOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithAuthorizationModeMakeRejectionRemarksMandatoryOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithAuthorizationModeMakeRejectionRemarksMandatoryOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Undo Authorization on Editing 
		
		public static boolean checkSavingPurchaseVoucherN1WithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		


		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizationRemarkPopup));
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			Thread.sleep(2000);
			
			authorizePopupTextArea.sendKeys("Without Option");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkValidationMessage("Screen Opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(narrationTxt));
			narrationTxt.sendKeys("Any value change (Including extra fields)");
			narrationTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		public static boolean checkAuthorizationStatusAfterEditingWithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusAfterEditingWithOutUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithOutUndoAuthorizationOnEditingAnyValueChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			
    		String expValidationMsg="Data deleted successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			
			System.out.println("************************************* checkEraseAllTransactionsWithOutAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean 	checkWithConditionUndoAuthorizationOnEditingAnyValueChangeInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(makeApprovalRemarksmandatoryChkBox));
    		makeApprovalRemarksmandatoryChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(makeRejectionRemarksMandatoryChkBox));
    		makeRejectionRemarksMandatoryChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(anyValueChangeChkBox));
    		anyValueChangeChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("Full");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		

		public static boolean checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingAnyValueChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);

			System.out.println("************************************* checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		


		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingAnyValueChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizationRemarkPopup));
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Suspended Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Suspended Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkValidationMessage("Screen Opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(narrationTxt));
			narrationTxt.sendKeys("Any value change (Including extra fields)");
			narrationTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public static boolean checkAuthorizationStatusAfterEditingWithUndoAuthorizationOnEditingAnyValueChangeOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			Thread.sleep(2000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusAfterEditingWithUndoAuthorizationOnEditingAnyValueChangeOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithUndoAuthorizationOnEditingAnyValueChangeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithOutAuthorizationModeAskRemarksOnRejectionOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Amounts or quantity or any other numeric fields
		
		public boolean 	checkWithConditionUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(anyValueChangeChkBox));
    		anyValueChangeChkBox.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(amountsOrQuantityOrNumericChkBox));
    		amountsOrQuantityOrNumericChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("Full");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		

		public static boolean checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("10");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		

		

		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizationRemarkPopup));
			boolean actRemarksPopup = authorizationRemarkPopup.isDisplayed();
			boolean expRemarksPopup = true;
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("RemarksPopup             : "+actRemarksPopup            +" Value Expected : "+expRemarksPopup);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actRemarksPopup==expRemarksPopup && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkValidationMessage("Screen Opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.END);
			enter_Quantity.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_Quantity.sendKeys("5");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_Rate.sendKeys("5");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkAuthorizationStatusAfterEditingWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusAfterEditingWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithUndoAuthorizationOnEditingAmountOrQuantityOrAnyOtherNumericFieldsOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		// Undo Authorization on Editing Links
		
		public boolean 	checkWithOutConditionUndoAuthorizationOnEditingLinksInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(amountsOrQuantityOrNumericChkBox));
    		amountsOrQuantityOrNumericChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("None");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    				
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher1WithOutUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
			inventoryTransactionsPurchasesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
			purchasesOrdersVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("2");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher1WithOutUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher2WithOutUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("5");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher2WithOutUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithOutUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow1ChkBoxCL));
			workFlowRow1ChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithOutUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditLinksOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingLinksOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithOutUndoAuthorizationOnEditingLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkValidationMessage("Screen Opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PurchasesOrders));
			enter_PurchasesOrders.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseOrderLinkHeaderChkBox));
			
			int vouchersCount = purchaseOrderLinkPopupVouchersList.size();
			
			System.out.println("Size  : "+vouchersCount);
			
			for (int i = 0; i < vouchersCount; i++) 
			{
				String data = purchaseOrderLinkPopupVouchersNoList.get(i).getText();
				
				if (data.equalsIgnoreCase("PurOrd:1")  && purchaseOrderLinkPopupChkBoxList.get(i).isSelected()) 
				{
					purchaseOrderLinkPopupChkBoxList.get(i).click();
				}
				
				if (data.equalsIgnoreCase("PurOrd:2") && purchaseOrderLinkPopupChkBoxList.get(i).isSelected()==false) 
				{
					purchaseOrderLinkPopupChkBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseOrderLinkPopupOkBtn));
			purchaseOrderLinkPopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithOutUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkAuthorizationStatusWithOutUndoAuthorizationOnEditingLinksOptionAfterEditingPurchaseVoucherN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			Thread.sleep(2000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusWithOutUndoAuthorizationOnEditingLinksOptionAfterEditingPurchaseVoucherN  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithOutUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithOutUndoAuthorizationOnEditingLinksOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean 	checkWithConditionUndoAuthorizationOnEditingLinksInTransactionAuthorizationConditionTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(undoLinksChkBox));
    		undoLinksChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("Full");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher1WithUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
			inventoryTransactionsPurchasesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
			purchasesOrdersVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("2");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher1WithUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseOrderVoucher2WithUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("5");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseOrderVoucher2WithUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
    			homeCloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
			workFlowExpandBtn.click();
		
			Thread.sleep(2000);
			
			boolean actPurchaseVoucherWorlFlowText = workflowTableBody.getText().isEmpty();
			
			boolean expPurchaseVoucherWorlFlowText = false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow1ChkBoxCL));
			workFlowRow1ChkBoxCL.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherN1WithUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithUndoAuthorizationOnEditLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 voucherGridCheckBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(4000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditLinksOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
					
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingLinksOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithUndoAuthorizationOnEditingLinksOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkValidationMessage("Screen Opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PurchasesOrders));
			enter_PurchasesOrders.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseOrderLinkHeaderChkBox));
			
			int vouchersCount = purchaseOrderLinkPopupVouchersList.size();
			
			System.out.println("Size  : "+vouchersCount);
			
			for (int i = 0; i < vouchersCount; i++) 
			{
				String data = purchaseOrderLinkPopupVouchersNoList.get(i).getText();
				
				if (data.equalsIgnoreCase("PurOrd:1")  && purchaseOrderLinkPopupChkBoxList.get(i).isSelected()) 
				{
					purchaseOrderLinkPopupChkBoxList.get(i).click();
				}
				
				if (data.equalsIgnoreCase("PurOrd:2") && purchaseOrderLinkPopupChkBoxList.get(i).isSelected()==false) 
				{
					purchaseOrderLinkPopupChkBoxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseOrderLinkPopupOkBtn));
			purchaseOrderLinkPopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithOutUndoAuthorizationOnEditingLinksOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		   new_CloseBtn.click();
		   
		   Thread.sleep(2000);
		   
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkAuthorizationStatusWithUndoAuthorizationOnEditingLinksOptionAfterEditingPurchaseVoucherN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
			allVouchersOption.click();*/
		    
		    Thread.sleep(3000);
		    
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusWithOutUndoAuthorizationOnEditingLinksOptionAfterEditingPurchaseVoucherN  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
			homeCloseBtn.click();
			
			Thread.sleep(2000);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithUndoAuthorizationOnEditingLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";

			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithUndoAuthorizationOnEditingLinksOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Undo Authorization on Editing Reservations
		
		public boolean 	checkTransactionAuthorizationSalesOrderDocumentUncheckKeepUnpostedReservationAndLinksBaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameSalesOrders1));
    		documentNameSalesOrders1.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Sales"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReservationChkBox));
    		keepUnpostedReservationChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedlinkBaseChkBox));
    		keepUnpostedlinkBaseChkBox.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(Keys.END);
    		documentNameDropdown.sendKeys(Keys.SHIFT, Keys.HOME);
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount1=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount1 ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(undoLinksChkBox));
    		undoLinksChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("None");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		String expValidationMsg1 = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg1 = checkValidationMessage(expValidationMsg1);
    		
    		System.out.println("Validation Message : "+actValidationMsg +"  Value Expected : "+expValidationMsg);
    		System.out.println("Validation Message : "+actValidationMsg1+"  Value Expected : "+expValidationMsg1);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg) && actValidationMsg1.equalsIgnoreCase(expValidationMsg1))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithOutUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("5");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
		
    	public boolean checkAuthorizationStatusInVoucherHomePageWithOutUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInVoucherHomePageWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("SavedVouchersCount   : "+actSavedVouchersCount   +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus  : "+actAuthorizationStatus  +" Value Expected : "+expAuthorizationStatus);
			
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				System.out.println("Test Pass : Authorization Status Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Authorization Statusis NOT Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
			
			
			
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
		
		



		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";

			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		


		public static boolean checkLogoutAndLoginWithSUWithOutUndoAuthorizationOnEditingReservationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="su";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
		
		
		
		


		public static boolean checkSavingSalesOrdersVoucher1WithOutUndoAuthorizationOnEditingReservationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys("Customer A");
			
			Thread.sleep(3000);
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(3000);
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("5");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("5");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
			stockRes_QtyToReserveRow1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
			res_PickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkSavingSalesOrdersVoucher1WithOutUndoAuthorizationOnEditingReservationOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithOutUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOptionAfterSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		
		public static boolean checkSalesOrderAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
			allVouchersOption.click();
		    
		    Thread.sleep(3000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkSalesOrderAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingReservationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkEditingSalesOrdersVoucher1WithOutUndoAuthorizationOnEditingReservationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
					
			checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("6");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("6");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
			enter_Reserve.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
			stockRes_QtyToReserveRow1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
			res_PickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkSavingSalesOrdersVoucher1WithOutUndoAuthorizationOnEditingReservationOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterEditingVouchersWithOutUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
			allVouchersOption.click();
		    
		    Thread.sleep(3000);
		    
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			grid_ChkBox1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
			deleteBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			
			String expMsg = "VoucherNo - 1: Voucher deleted Successfully";
			
			String actMsg = checkValidationMessage(expMsg);
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithOutUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1      : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("Voucher Deleted : "+actMsg       +" Value Expected : "+expMsg);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actMsg.equalsIgnoreCase(expMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean 	checkTransactionAuthorizationSalesOrderDocumentWithUndoAuthorizationOnEditingReservationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameSalesOrders1));
    		documentNameSalesOrders1.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Sales"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(undoReservationChkBox));
    		undoReservationChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("Full");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		
    		String expValidationMsg="Authorization Flow saved successfully.";
    		
    		String actValidationMsg=checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg +"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		


		
		
		public static boolean checkSavingSalesOrdersVoucher1WithUndoAuthorizationOnEditingReservationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys("Customer A");
			
			Thread.sleep(3000);
			
			customerAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys("HYDERABAD");
			Thread.sleep(3000);
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("5");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("5");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
			stockRes_QtyToReserveRow1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
			res_PickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkSavingSalesOrdersVoucher1WithUndoAuthorizationOnEditingReservationOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithUndoAuthorizationOnEditingReservationOptionAfterSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(7000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		boolean expDashboard = true;

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
				return true;
			}
    		else
    		{
    			return false;
			}
    	}
    	
    	
    	
		
		
		
		
		public static boolean checkSalesOrderAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
			voucherHomeRow1ChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
			allVouchersOption.click();
		    
		    Thread.sleep(3000);
			
			String actAfterAuthorizeStatusRow1 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkSalesOrderAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
	
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingReservationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoyTransactionsSalesMenu));
			inventoyTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrders));
			salesOrders.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1 : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkEditingSalesOrdersVoucher1WithUndoAuthorizationOnEditingReservationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
					
			checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("6");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("6");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
			enter_Reserve.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
			stockRes_QtyToReserveRow1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
			res_PickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
		   System.out.println("************************************* checkSavingSalesOrdersVoucher1WithUndoAuthorizationOnEditingReservationOptions  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		   new_CloseBtn.click();
			
		   Thread.sleep(2000);
			
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterEditingVouchersWithUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
			allVouchersOption.click();*/
		    
		    Thread.sleep(3000);
		    
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithUndoAuthorizationOnEditingReservationOption  *********************************");
			
			System.out.println("StatusRow1      : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithUndoAuthorizationOnEditingReservationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithUndoAuthorizationOnEditingReservationOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		@FindBy(xpath="//input[@id='id_body_37']")
		private static WebElement enter_Expirydate;
		
		
		
		// Undo Authorization on Editing Reservations Batch/RMA/Bin
		
		public static boolean checkSavingPurchaseVoucherNWithBatchItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#1");
			enter_Batch.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithBatchItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithRMAItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("WA COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("12");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			select1stRow_13thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaScreenTitle));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys("RMA#1,12");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			Thread.sleep(2000);			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			Thread.sleep(2000);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithRMAItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithBinItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("FIFO COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
			getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithBinItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
 			    new_CloseBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1   : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2   : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3   : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithOutUndoAuthorizationOnEditingBatchBinRMAOption*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
			
    	
    	
    	
		


		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
			grid_HeaderChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			String actAfterAuthorizeStatusRow3 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					actAfterAuthorizeStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Authorized";
			String expAfterAuthorizeStatusRow3 = "Authorized";
			
			
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			System.out.println("AfterAuthorizeStatusRow3 : "+actAfterAuthorizeStatusRow3+" Value Expected : "+expAfterAuthorizeStatusRow3);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) && actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2)
				&& actAfterAuthorizeStatusRow3.equalsIgnoreCase(expAfterAuthorizeStatusRow3))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthoizationOnEditingBatchBinRMAOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithOutUndoAuthoizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithBatchItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(voucherGridCheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.END);
			enter_Batch.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Batch.sendKeys("EditedBatch#1");
			enter_Batch.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithBatchItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		   new_CloseBtn.click();
		   
		   Thread.sleep(2000);
		    
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithRMAItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(voucherGridCheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			select1stRow_13thColumn.click();
			
			//Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.SPACE);
			//Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaScreenTitle));
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaClearBtn));
			rmaClearBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys("EditedRMA#1,12");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithRMAItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		   new_CloseBtn.click();
		   
		   Thread.sleep(2000);
		    
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		@FindBy (xpath="//tbody[@id='id_transaction_bins_grid_body']/tr/td[1]")
		private static List<WebElement> binPopupIndexList;
		
		@FindBy (xpath="//tbody[@id='id_transaction_bins_grid_body']/tr/td[2]")
		private static List<WebElement> binPopupBinsList;
		
		@FindBy (xpath="//tbody[@id='id_transaction_bins_grid_body']/tr/td[13]")
		private static List<WebElement> binPopupToBeAllocatedList;
		
		public static boolean checkEditingPurchaseVoucherNWithBinItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(voucherGridCheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			enter_Bin.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);

			int count = binPopupBinsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String data = binPopupBinsList.get(i).getText();
				
				if (data.equalsIgnoreCase("Bin5")) 
				{
					getAction().doubleClick(binPopupIndexList.get(i)).build().perform();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithBinItemWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		   new_CloseBtn.click();
		  
		   Thread.sleep(2000);
		   
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterEditingVouchersWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterEditingVouchersWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1   : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2   : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3   : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkEraseAllTransactionsWithOutUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			
			String expValidationMsg="Data deleted successfully.";

			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			
			System.out.println("************************************* checkEraseAllTransactionsWithOutUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean 	checkTransactionAuthorizationUndoAuthorizationOnEditingBatchBinRmaOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(keepUnpostedReferencesChkBox));
    		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView();", keepUnpostedReferencesChkBox);
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRMABinChkBox));
    		batchRMABinChkBox.click();
    		
    		Select undoAuthEditingDrpdwn = new Select(undoAuthorizationEditingDropdown);
    		undoAuthEditingDrpdwn.selectByVisibleText("Full");
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
    		definitionOkBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
    		tranAuthSaveBtn.click();
    		
    		
    		String expValidationMsg = "Authorization Flow saved successfully.";
    		
    		String actValidationMsg = checkValidationMessage(expValidationMsg);
    		
    		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+expValidationMsg);
    		
    		if(actValidationMsg.equalsIgnoreCase(expValidationMsg))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithBatchItemWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#1");
			enter_Batch.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithBatchItemWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}  
    	}
    	
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithRMAItemWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("WA COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("12");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			select1stRow_13thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaScreenTitle));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys("RMA#1,12");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			Thread.sleep(2000);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.TAB);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithRMAItemWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		
		
		public static boolean checkSavingPurchaseVoucherNWithBinItemWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("FIFO COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
			getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithBinItemWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
 			    new_CloseBtn.click();
 			    Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterSavingVouchersWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterSavingVouchersWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1   : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2   : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3   : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithUndoAuthorizationOnEditingBatchBinRMAOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithUndoAuthorizationOnEditingBatchBinRMAOption*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
			
    	
    	
    	
		


		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
			pendingAuthorizationPurchases.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
			grid_HeaderChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtn));
			authorizePopupOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
			homePageAllVouchersView.click();
			
			Thread.sleep(2000);
			
			String actAfterAuthorizeStatusRow1 = null;
			String actAfterAuthorizeStatusRow2 = null;
			String actAfterAuthorizeStatusRow3 = null;
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actAfterAuthorizeStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actAfterAuthorizeStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					actAfterAuthorizeStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expAfterAuthorizeStatusRow1 = "Authorized";
			String expAfterAuthorizeStatusRow2 = "Authorized";
			String expAfterAuthorizeStatusRow3 = "Authorized";
			
			
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			System.out.println("AfterAuthorizeStatusRow1 : "+actAfterAuthorizeStatusRow1+" Value Expected : "+expAfterAuthorizeStatusRow1);
			System.out.println("AfterAuthorizeStatusRow2 : "+actAfterAuthorizeStatusRow2+" Value Expected : "+expAfterAuthorizeStatusRow2);
			System.out.println("AfterAuthorizeStatusRow3 : "+actAfterAuthorizeStatusRow3+" Value Expected : "+expAfterAuthorizeStatusRow3);
			
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3) 
				&& actAfterAuthorizeStatusRow1.equalsIgnoreCase(expAfterAuthorizeStatusRow1) && actAfterAuthorizeStatusRow2.equalsIgnoreCase(expAfterAuthorizeStatusRow2)
				&& actAfterAuthorizeStatusRow3.equalsIgnoreCase(expAfterAuthorizeStatusRow3))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(3000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthoizationOnEditingBatchBinRMAOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Authorized";
			String expStatusRow2 = "Authorized";
			String expStatusRow3 = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithUndoAuthoizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1               : "+actStatusRow1				+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2               : "+actStatusRow2				+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3               : "+actStatusRow3				+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithBatchItemWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(voucherGridCheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.END);
			enter_Batch.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Batch.sendKeys("EditedBatch#1");
			enter_Batch.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithBatchItemWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
 			    new_CloseBtn.click();
 			    Thread.sleep(2000);
    			return false;
    		}
    	}
    	
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithRMAItemWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(voucherGridCheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			select1stRow_13thColumn.click();
			
			//Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
			enter_RMA.sendKeys(Keys.SPACE);
			
			//Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaScreenTitle));
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(rmaClearBtn));
			rmaClearBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
			rmaSerialNumberTxtField.click();
			rmaSerialNumberTxtField.sendKeys("EditedRMA#1,12");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
			rmaAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
			rmaOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 2";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithRMAItemWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
 			    new_CloseBtn.click();
 			    Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		public static boolean checkEditingPurchaseVoucherNWithBinItemWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(voucherGridCheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			enter_Bin.sendKeys(Keys.SPACE);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
			binSearchBtn.click();
			
			Thread.sleep(2000);

			int count = binPopupBinsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String data = binPopupBinsList.get(i).getText();
				
				if (data.equalsIgnoreCase("Bin5")) 
				{
					getAction().doubleClick(binPopupIndexList.get(i)).build().perform();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 3";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkEditingPurchaseVoucherNWithBinItemWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
 			    new_CloseBtn.click();
 			    Thread.sleep(2000);
    			return false;
    		}
    	}
		
		
		
		
		
		
		
		
		public boolean checkAuthorizationStatusInHomePageAfterEditingVouchersWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			String actStatusRow1 = null;
			String actStatusRow2 = null;
			String actStatusRow3 = null;
			
			System.out.println("Size  : "+voucherGridDocNoCount);
			
			for (int i = 0; i < voucherGridDocNoCount; i++) 
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					 actStatusRow1 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("2")) 
				{
					 actStatusRow2 =  voucherGridAuthorizationStatus.get(i).getText();
				}
				
				if (data.equalsIgnoreCase("3")) 
				{
					 actStatusRow3 =  voucherGridAuthorizationStatus.get(i).getText();
				}
			}
			
			String expStatusRow1 = "Pending";
			String expStatusRow2 = "Pending";
			String expStatusRow3 = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInHomePageAfterEditingVouchersWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			
			System.out.println("StatusRow1   : "+actStatusRow1+" Value Expected : "+expStatusRow1);
			System.out.println("StatusRow2   : "+actStatusRow2+" Value Expected : "+expStatusRow2);
			System.out.println("StatusRow3   : "+actStatusRow3+" Value Expected : "+expStatusRow3);
			
			if(actStatusRow1.equalsIgnoreCase(expStatusRow1) && actStatusRow2.equalsIgnoreCase(expStatusRow2) && actStatusRow3.equalsIgnoreCase(expStatusRow3))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
				Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
		
		
		public static boolean checkTransactionAuthotizationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionAuthorizationReportMenu));
			financialsTransactionAuthorizationReportMenu.click();
			
			Thread.sleep(2000);
			
			dropDown("As on date", dateOptionDropdown);
			
			;
			
			Thread.sleep(2000);
			
			click(reportOkBtn);
			
			Thread.sleep(3000);
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				if(data.isEmpty()==false)
				{
					if(i==5)
					{
						data="TimeField";
					}
					reportsByWarehouseRow1ListArray.add(data);
				}
				
				
				
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[1, NDT45:1, "+getCurrentDateF2()+", UserAllOptions, "+getCurrentDateF2()+", TimeField, Authorized]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				if(data.isEmpty()==false)
				{
					reportsByWarehouseRow2ListArray.add(data);
				}
				
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[2, NDT45:1, "+getCurrentDateF2()+", UserAllOptions, Pending]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				
				if(data.isEmpty()==false)
				{
					if(i==5)
					{
						data="TimeField";
					}
					reportsRow3ListArray.add(data);
				}
				
				
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[3, NDT45:2, "+getCurrentDateF2()+", UserAllOptions, "+getCurrentDateF2()+", TimeField, Authorized]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				if(data.isEmpty()==false)
				{
					reportsRow4ListArray.add(data);
				}
				
				
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[4, NDT45:2, "+getCurrentDateF2()+", UserAllOptions, Pending]";
			
		
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				if(data.isEmpty()==false)
				{
					if(i==5)
					{
						data="TimeField";
					}
					reportsRow5ListArray.add(data);
				}
				
				
				
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[5, NDT45:3, "+getCurrentDateF2()+", UserAllOptions, "+getCurrentDateF2()+", TimeField, Authorized]";
			
			
			int report6thRowListCount = reportsRow6List.size();
			ArrayList<String> report6thRowListArray = new ArrayList<String>();
			for(int i=0;i<report6thRowListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				if(data.isEmpty()==false)
				{
					report6thRowListArray.add(data);
				}
				
			}
			String actRow6List = report6thRowListArray.toString();
			String expRow6List = "[6, NDT45:3, "+getCurrentDateF2()+", UserAllOptions, Pending]";
			
			System.out.println("********************************* Transaction Authorization report*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
		
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) 
					&& actRow6List.equalsIgnoreCase(expRow6List))
			{
				click(report_CloseBtn);				
				Thread.sleep(2000);
				click(sl_CloseBtn);				
				return true;
			}
			else
			{
				click(report_CloseBtn);				
				Thread.sleep(2000);
				click(sl_CloseBtn);
				return false;
			}
    	}
		
		
		
		
		public boolean checkEraseAllTransactionsWithUndoAuthorizationOnEditingBatchBinRMAOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully.";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			System.out.println("************************************* checkEraseAllTransactionsWithUndoAuthorizationOnEditingBatchBinRMAOption  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		

		
		public boolean 	checkCreateEmailHeaderTemplate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		click(alertTab);
    	
    		
    		System.err.println("Enabling ALL CheckBoxs ");
    		
    		if(receivedChkBox.isSelected()==false)
    		{
    			receivedChkBox.click();
    		}
    		
    		
    		//click(receivedChkBox);
    		click(approvedChkBox);
    		click(rejectedChkBox);
    		click(stoppedChkBox);
    		
    		
    		Thread.sleep(2000);
    		
    		boolean act1=receivedChkBox.isSelected();
    		boolean act2=approvedChkBox.isSelected();
    		boolean act3=rejectedChkBox.isSelected();
    		boolean act4=stoppedChkBox.isSelected();
    		
    		
    		
    		System.out.println("receivedChkBox selected Status: "+act1);
    		System.out.println("approvedChkBox selected Status: "+act2);
    		System.out.println("rejectedChkBox selected Status: "+act3);
    		System.out.println("stoppedChkBox  selected Status: "+act4);
    		
    		Thread.sleep(2000);

    		System.err.println("Disabling ALL CheckBoxs ");
    		//click(receivedChkBox);
    		click(approvedChkBox);
    		click(rejectedChkBox);
    		click(stoppedChkBox);
    		
    		Thread.sleep(2000);
    		
    		if(receivedChkBox.isSelected()==false)
    		{
    			receivedChkBox.click();
    		}
    		
    		
    		click(emailHeaderTemplateBtn);
    		   		
    		Thread.sleep(1999);
    		
    		
           enterText(customizeTemplateTemplatestxt, "customTemplate1");
           
           tab(customizeTemplateTemplatestxt);
           
           click(customizeTemplateCompanyExpandBtn);
            
            
            
         
            Thread.sleep(8000);
           
            Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\AlertTemplate.exe");
            
            
            Thread.sleep(15000);
            
            click(customizeTemplateSaveBtn);
            
            checkValidationMessage("Template saved successfully");
            
            click(customizeTemplateCloseBtn);
            
            Thread.sleep(2000);
            
            click(emailHeadretTemplateRow1);
            
            Thread.sleep(2000);
            
            dropDown("customTemplate1", emailHeadretTemplateDropdown);
            Thread.sleep(2000);
            
           
            
           Select sel= new Select(emailHeadretTemplateDropdown);
           
           String actSelectdOption  =sel.getFirstSelectedOption().getText();
           
           String expSelectdOption  ="customTemplate1";
           
           System.out.println("actSelectdOption    :"+actSelectdOption);
           System.out.println("expSelectdOption    :"+expSelectdOption);
           
           
    		
    		if(act1==true && act2==true && act3==true && act4==true && actSelectdOption.equalsIgnoreCase(expSelectdOption))
    		{
    			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			//tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			//tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		

		@FindBy(id="txtPassword")
		private static WebElement password;
		
		
		public boolean 	checkCreateEmailTemplate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		click(alertTab);
    		
    		
			click(emailTemplateBtn);

			Thread.sleep(1999);

			Thread.sleep(5000);

			Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\EmailLayout.exe");

			Thread.sleep(45000);
    		
            click(Savedropdown);
            
            Thread.sleep(1500);
            
            click(PrintSaveBtn);
            
            enterText(SaveTxtField, "emailTemplate1");
            
            Thread.sleep(1500);
            click(Save_OkBtn);
            
            String expMsg ="Layout saved successfully";
            
            String actMsg =checkValidationMessage(expMsg);
            
            System.err.println("actMsg   :"+actMsg);
            System.err.println("expMsg   :"+expMsg);
            
            click(ExitBtn);
            
            click(emailTemplateRow1);
            
            dropDown("emailTemplate1", emailTemplateDropdown);
            
            Thread.sleep(1500);    
            
            Select s =new Select(emailTemplateDropdown);
            
           String actEmailTemplate   =s.getFirstSelectedOption().getText();
            
           String expEmailTemplate   ="emailTemplate1"; 
            
            
            System.out.println("actEmailTemplate   :"+actEmailTemplate);
            
            System.out.println("expEmailTemplate   :"+expEmailTemplate);
            
         
			if (actMsg.equalsIgnoreCase(expMsg) && actEmailTemplate.equalsIgnoreCase(expEmailTemplate)) {

				return true;
			} else {

				return false;
			}

		}
		
		
		
		public boolean 	checkPrintCreatedEmailTemplateAndValidatePdf() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
    	{
			 Thread.sleep(2000);

             File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\EmailTemplate.pdf");

             if(Efile.exists())
             {
                     Efile.delete();
             }
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		click(alertTab);
    		
			click(emailTemplateBtn);
			
			Thread.sleep(2000);
			
			click(emailTemplateOpenBtn);
			
			Thread.sleep(1500);
			
			click(emailTemplateOpenTxt);
			
			Thread.sleep(1500);

			click(emailTemplateOpenLayoutTxt);
			
			Thread.sleep(1000);
			click(emailTemplateLoadBtn);
			

			Thread.sleep(4000);
			
			click(emailTemplatePrintDropdown);
			Thread.sleep(1000);
			
			click(emailTemplatePrintBtn);
			
			Thread.sleep(10000);
			
			//
			 Robot robot = new Robot();
             robot.keyPress(KeyEvent.VK_CONTROL);
             robot.keyPress(KeyEvent.VK_J);
             robot.keyRelease(KeyEvent.VK_J);
             robot.keyRelease(KeyEvent.VK_CONTROL);
             
             Thread.sleep(2000);
             
             robot.keyPress(KeyEvent.VK_TAB);
             robot.keyRelease(KeyEvent.VK_TAB);
             robot.keyPress(KeyEvent.VK_TAB);
             robot.keyRelease(KeyEvent.VK_TAB);
             
             robot.keyPress(KeyEvent.VK_ENTER);
             robot.keyRelease(KeyEvent.VK_ENTER);
             
             Thread.sleep(2000);
              
             
             robot.keyPress(KeyEvent.VK_CONTROL);
             robot.keyPress(KeyEvent.VK_S);
             robot.keyRelease(KeyEvent.VK_S);
             robot.keyRelease(KeyEvent.VK_CONTROL);
             
             Thread.sleep(2000);
                     
             Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\SavingEmailTemplate.exe");
             
             Thread.sleep(5000);
             
             robot.keyPress(KeyEvent.VK_CONTROL);
             robot.keyPress(KeyEvent.VK_J);
             robot.keyRelease(KeyEvent.VK_J);
             robot.keyRelease(KeyEvent.VK_CONTROL);
             
             Thread.sleep(2000);
             
             ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
                     
             int actOpenWindowsCount = getDriver().getWindowHandles().size();
             int expOpenWindowsCount = 3;
             
             System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
             
             Thread.sleep(1000);

              getDriver().switchTo().window(openTabs.get(2)).close();
              Thread.sleep(1000);
              getDriver().switchTo().window(openTabs.get(1)).close();
              Thread.sleep(1000);
              getDriver().switchTo().window(openTabs.get(0));
           
			String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\EmailTemplate.pdf";
			String expPDF = getBaseDir()+"\\autoIt\\ImportFiles\\EmailTemplate.pdf";
			
	        PDFUtil pdfutil = new PDFUtil();
	        Thread.sleep(2000);
			//boolean result = pdfutil.compare(actPDF, expPDF);
			
			String actData = pdfutil.getText(actPDF);
			String expData = pdfutil.getText(expPDF);
			
			//System.out.println("Before Replace ::::::::::::::::::::;");
			
			System.err.println(actData);
			System.out.println(expData);
			Thread.sleep(2000);
			/*
			 * String aaaaa=expData.replaceAll("27/01/2022", getCurrentDateF2());
			 * Thread.sleep(2000);
			 * System.out.println("After Replace ::::::::::::::::::::;");
			 * 
			 * System.err.println(actData); System.out.println(aaaaa);
			 */
			
			if (actData.equalsIgnoreCase(expData) && actOpenWindowsCount == expOpenWindowsCount) {

				click(ExitBtn);
				return true;
			}
			else {
			
			    click(ExitBtn);
			    return false;
			}
		}
		
		public boolean 	checkCreateSmsTemplate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		click(alertTab);
    	
    		
    		click(headerSMSTemplate);
    		   		
    		Thread.sleep(1999);
    		
    		
           enterText(customizeTemplateTemplatestxt, "customSMSTemplate1");
           
           tab(customizeTemplateTemplatestxt);
           
           click(customizeTemplateCompanyExpandBtn);
            
            
            
         
            Thread.sleep(5000);
           
            Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\AlertTemplate.exe");
            
            
            Thread.sleep(15000);
            
            click(customizeTemplateSaveBtn);
            
            checkValidationMessage("Template saved successfully");
            
            click(customizeTemplateCloseBtn);
            
            Thread.sleep(2000);
            
            click(smsTemplateRow1);
            
            Thread.sleep(2000);
            
            dropDown("customSMSTemplate1", smsTemplateDropdown);
            Thread.sleep(2000);
            
           
            
           Select sel= new Select(smsTemplateDropdown);
           
           String actSelectdOption  =sel.getFirstSelectedOption().getText();
           
           String expSelectdOption  ="customSMSTemplate1";
           
           System.out.println("actSelectdOption    :"+actSelectdOption);
           System.out.println("expSelectdOption    :"+expSelectdOption);
           
           
    		
    		if(actSelectdOption.equalsIgnoreCase(expSelectdOption))
    		{
    			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			//tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			//tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		public boolean 	checkCreateAlerts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
    		settingsmenuBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
    		transactionAuthorizationBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
    		documentNameDropdown.sendKeys(" ");
    		
    		Thread.sleep(1000);
    			
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherExpandbutton));
    		purchasevoucherExpandbutton.click();
    	
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasevoucherTypeCreatedVoucher));
    		purchasevoucherTypeCreatedVoucher.click();
    		
    		Thread.sleep(3000);
    				
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
    		nameTxt.click();
    		
    		nameTxt.sendKeys(Keys.SPACE);
    		
    		int namecount=tranAuthNameList.size();
			
			for(int i=0 ; i < namecount ;i++)
			{
				String data=tranAuthNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					tranAuthNameList.get(i).click();
					
					break;
				}
			}
				
    		nameTxt.sendKeys(Keys.TAB);
    			
    		Thread.sleep(3000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
    		Level1editBtn.click();
    		
    		Thread.sleep(2000);
    		
    		click(alertTab);
    		
    		Thread.sleep(2000);
    	
    		
    		click(headerAlert);
    		   		
    		Thread.sleep(1999);
    		
    		
           enterText(customizeTemplateTemplatestxt, "customAlertTemplate1");
           
           tab(customizeTemplateTemplatestxt);
           
           click(customizeTemplateCompanyExpandBtn);
            
            
            
         
            Thread.sleep(8000);
           
            Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\AlertTemplate.exe");
            
            
            Thread.sleep(15000);
            
            click(customizeTemplateSaveBtn);
            
            checkValidationMessage("Template saved successfully");
            
            click(customizeTemplateCloseBtn);
            
            Thread.sleep(2000);
            
            click(AlertsTemplateRow1);
            
            Thread.sleep(2000);
            
            dropDown("customAlertTemplate1", AlertsTemplateDropdown);
            Thread.sleep(2000);
            
           
            
           Select sel= new Select(AlertsTemplateDropdown);
           
           String actSelectdOption  =sel.getFirstSelectedOption().getText();
           
           String expSelectdOption  ="customAlertTemplate1";
           
           System.out.println("actSelectdOption    :"+actSelectdOption);
           System.out.println("expSelectdOption    :"+expSelectdOption);
           
           
    		
    		if(actSelectdOption.equalsIgnoreCase(expSelectdOption))
    		{
    			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			//tranAuthCancelBtn.click();
    			return true;
    		}
    		else
    		{
    			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
    			//tranAuthCancelBtn.click();
    			return false;
    		}
    	}
		
		
		
		public static boolean checkSavingPurchaseVoucherNAlertTemplateTransactionAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys("Purchase");
			
			Thread.sleep(2000);
			
			purchaseAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys("Vendor A");
			
			Thread.sleep(2000);
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys("INDIA");
			
			Thread.sleep(2000);
			
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys("HYDERABAD");
			
			Thread.sleep(2000);
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
			Thread.sleep(3000);
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.END);
			enter_Rate.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Rate.sendKeys(Keys.BACK_SPACE);
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			    Thread.sleep(2000);
				
				click(newReferenceTxt);
				Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
			billRefOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);
			
		   System.out.println("************************************* checkSavingPurchaseVoucherNWithConditionsNotRequiredOption  *********************************");
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);
	
		   if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
    			new_CloseBtn.click();
    			Thread.sleep(2000);
    			return false;
    		}
    	}
    	
    	
    	
    	
    	
    	public boolean checkAuthorizationStatusInVoucherHomePageCreateAlertOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Pending";
			
			System.out.println("************************************* checkAuthorizationStatusInVoucherHomePageWithConditionsNotRequiredOption  *********************************");
			
			System.out.println("SavedVouchersCount   : "+actSavedVouchersCount   +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus  : "+actAuthorizationStatus  +" Value Expected : "+expAuthorizationStatus);
			
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				System.out.println("Test Pass : Authorization Status Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Authorization Statusis NOT Succesfully");
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
		}
			
			
			
			
		
		
		public static boolean checkLogoutAndLoginWithUserAllOptionsWithCreateAlertOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
   	     	
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="UserAllOptions";
    	  
    	    String pawslt="12345";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 25);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="UserAllOptions";
    		String expLoginCompanyName   ="Transaction Authorization";
    		
    		boolean actDashboard = dashboard.isDisplayed();
    		boolean expDashboard = true;
    		
    		System.out.println("**********************************************checkLogoutAndLoginWithUserAllOptionsWithConditionsNotRequiredOption*********************************************");
    		
    		System.out.println("User Info               : "+actUserInfo         +" Value Expected "+expUserInfo);
    		System.out.println("Login Company           : "+getLoginCompanyName +" Value Expected "+expLoginCompanyName);
    		System.out.println("Dashboard is Displaying : "+actDashboard        +" Value Expected "+expDashboard );

    		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
    		{
    			System.out.println("Login Successful");
				return true;
			}
    		else
    		{
    			System.out.println("Login Not Successful");
    			return false;
			}
    	}
		
		
		public static boolean checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndAlertTemplateTransactionAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			click(voucherHomePageAlertBtn);
			Thread.sleep(1000);
			click(voucherHomePageAlertTransactions);
			Thread.sleep(1000);
			click(voucherHomePageAlertPurchaseVoucherN);
			
			Thread.sleep(2000);
			
			
			click(voucherHomePageAlertsTemplateTransactionAuthorization);
			
			checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);	
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndAlertTemplateTransactionAuthorization Before Authorization  *********************************");
			
			String actInfoSideBarAuthorizationStatusBefore   =voucherInfoSideBarAuthorizationStatus.getText();
			
			String expInfoSideBarAuthorizationStatusBefore   ="Pending";
			
			System.out.println("actInfoSideBarAuthorizationStatusBefore   :"+actInfoSideBarAuthorizationStatusBefore);
			System.out.println("expInfoSideBarAuthorizationStatusBefore   :"+expInfoSideBarAuthorizationStatusBefore);
			
			click(new_AuthorizeBtn);
			
			Thread.sleep(1500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizePopupOkBtnEntryPage));
			authorizePopupOkBtnEntryPage.click();
			
			Thread.sleep(2000);
			
			System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndAlertTemplateTransactionAuthorization After Authorization  *********************************");
			
			String actInfoSideBarAuthorizationStatusAfter   =voucherInfoSideBarAuthorizationStatus.getText();
			
			String expInfoSideBarAuthorizationStatusAfter   ="Approved";
			
			System.out.println("actInfoSideBarAuthorizationStatusAfter   :"+actInfoSideBarAuthorizationStatusAfter);
			System.out.println("expInfoSideBarAuthorizationStatusAfter   :"+expInfoSideBarAuthorizationStatusAfter);
			
			
			
			
			Thread.sleep(3000);
			
			
			
			
			if(actInfoSideBarAuthorizationStatusBefore.equalsIgnoreCase(expInfoSideBarAuthorizationStatusBefore) 
					&& actInfoSideBarAuthorizationStatusAfter.equalsIgnoreCase(expInfoSideBarAuthorizationStatusAfter))
			{
				System.out.println("Test Pass : Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
    			Thread.sleep(1500);
    			click(homeCloseBtn);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorized Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(1500);
    			click(homeCloseBtn);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
			
		
		
		
	
		
		
		public static boolean checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithAlertTemplateTransactionAuthorization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    		userNameDisplay.click();
   		
   	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
   	     	logoutOption.click();

   	     	Thread.sleep(3000);
    		
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(6000);

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			Thread.sleep(3000);
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			int actSavedVouchersCount = voucherGridDocNoCount-1;
			int expSavedVouchersCount = 1;
			
			
			String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
			String expAuthorizationStatus = "Authorized";
			
			System.out.println("************************************* checkLogoutAndLoginWithSUToCheckAuthorizationStatusWithConditionsNotRequiredOption  *********************************");
			
			System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
			System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
			
			if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
			{
				System.out.println("Test Pass : Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Authorize Succesfully");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
    			Thread.sleep(2000);
				//excelReader.setCellData(xlfile, "SmokeSalesOrder", 627, 9, resFail);
				return false;
			}
			
		}
		
		
		
		
		public boolean checkLogout() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		  userNameDisplay.click();
		 
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		  logoutOption.click();
		  
		  Thread.sleep(2000);
		  
		  System.out.println("Logout  Successfully");

		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		  boolean actUserName = username.isDisplayed();
		  boolean expUserName = true; 
				  
	      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
	      boolean actPassword = password.isDisplayed();
	      boolean expPassword = true;  
			
	      System.out.println("*************************CheckLogout***************************");
	      
	      System.out.println("UserName is Displaying : "+actUserName+"  Value Expected  "+expUserName);
	      System.out.println("Password is Displaying : "+actPassword+"  Value Expected  "+expPassword);
	      
		if(actUserName==expUserName && actPassword==expPassword)  
	      {
			return true;
		  }
	      else
	      {
			return false;
		  }
	    }

		
		
		
		
		
    	
	 public TransactionAuthorizationDefinitionOptionsPage(WebDriver driver)
   	 {
   		PageFactory.initElements(driver, this);	
   	 }  	
}
